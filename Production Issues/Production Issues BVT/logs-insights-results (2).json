[
    {
        "@timestamp": "2025-02-03 00:19:09.821",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:19:09.821Z",
            "@version": "1",
            "message": "Request to retrieve account by following accountNumber: 912010110101074",
            "logger_name": "com.arbm.digibank.accounts.savingaccount.controller.SavingAccountControllerV1",
            "thread_name": "http-nio-8080-exec-7",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a00b7d77b517217d30d2f91ec2a33d",
            "spanId": "6f049bd7cfe95002",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:18:38.623",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:18:38.622Z",
            "@version": "1",
            "message": "Request to retrieve account by following accountNumber: 912010110192917",
            "logger_name": "com.arbm.digibank.accounts.savingaccount.controller.SavingAccountControllerV1",
            "thread_name": "http-nio-8080-exec-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a00b5e3e81bfda383db1463ae7e7b3",
            "spanId": "9a3d6068f8120b79",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:18:36.940",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:18:36.939Z",
            "@version": "1",
            "message": "Request to retrieve account by following accountNumber: 912010110101074",
            "logger_name": "com.arbm.digibank.accounts.savingaccount.controller.SavingAccountControllerV1",
            "thread_name": "http-nio-8080-exec-3",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a00b5c7e882eb961af9f9565a83cab",
            "spanId": "a4c54f58ad23337b",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:18:33.974",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:18:33.973Z",
            "@version": "1",
            "message": "Request to retrieve account by following accountNumber: 912010110101074",
            "logger_name": "com.arbm.digibank.accounts.savingaccount.controller.SavingAccountControllerV1",
            "thread_name": "http-nio-8080-exec-6",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a00b595b60c3483df82193779287ca",
            "spanId": "b0fed7c8e1ca48a6",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:18:28.487",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:18:28.486Z",
            "@version": "1",
            "message": "Request to retrieve account by following accountNumber: 912010110101074",
            "logger_name": "com.arbm.digibank.accounts.savingaccount.controller.SavingAccountControllerV1",
            "thread_name": "http-nio-8080-exec-4",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a00b5469c0593f6d4630914b0071c1",
            "spanId": "4209b8905a75f8f5",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:18:18.567",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:18:18.567Z",
            "@version": "1",
            "message": "Request to retrieve account by following accountNumber: 912010110378060",
            "logger_name": "com.arbm.digibank.accounts.savingaccount.controller.SavingAccountControllerV1",
            "thread_name": "http-nio-8080-exec-6",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a00b4a1083fb681b1af85632e59736",
            "spanId": "b52edc9d8516b8a1",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:18:10.800",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:18:10.8Z",
            "@version": "1",
            "message": "Request to retrieve account by following accountNumber: 912010110378060",
            "logger_name": "com.arbm.digibank.accounts.savingaccount.controller.SavingAccountControllerV1",
            "thread_name": "http-nio-8080-exec-5",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a00b4276c123502ac3ff9a66010441",
            "spanId": "0214ed7dfa8d3655",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:17:59.892",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:17:59.891Z",
            "@version": "1",
            "message": "validateTransition",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "b99f6ea354323166",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:17:59.892",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:17:59.891Z",
            "@version": "1",
            "message": "on Exit run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "b99f6ea354323166",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:17:59.892",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:17:59.891Z",
            "@version": "1",
            "message": "onEnter run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "b99f6ea354323166",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:17:59.892",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:17:59.891Z",
            "@version": "1",
            "message": "new status",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "b99f6ea354323166",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:17:59.892",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:17:59.892Z",
            "@version": "1",
            "message": "Produced: {\"accountId\": \"eb5ba1ee-cbea-48b9-befa-9f9f98fcdc41\"}",
            "logger_name": "com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "b99f6ea354323166",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:17:59.892",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:17:59.892Z",
            "@version": "1",
            "message": "Saving response under id eb5ba1ee-cbea-48b9-befa-9f9f98fcdc41",
            "logger_name": "com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "b99f6ea354323166",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:17:59.886",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:17:59.886Z",
            "@version": "1",
            "message": "Received portfolio to saving pot linkage event: {\"portfolioId\": \"0d98c140-0c31-4a2a-886d-88b874a368b9\", \"accountId\": \"eb5ba1ee-cbea-48b9-befa-9f9f98fcdc41\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "b99f6ea354323166",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:17:59.882",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:17:59.882Z",
            "@version": "1",
            "message": "Received PortfolioLinkedWithAccountEvent: {\"portfolioId\": \"0d98c140-0c31-4a2a-886d-88b874a368b9\", \"accountId\": \"eb5ba1ee-cbea-48b9-befa-9f9f98fcdc41\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "b99f6ea354323166",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:17:59.881",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:17:59.881Z",
            "@version": "1",
            "message": "Error handler threw an exception",
            "logger_name": "org.springframework.kafka.listener.KafkaMessageListenerContainer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Seek to current after exception; nested exception is org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:208)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2719)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2689)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t... 9 common frames omitted\nCaused by: org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\tSuppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: \nError has been observed at the following site(s):\n\t*__checkpoint ⇢ 409 from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses [DefaultWebClient]\nOriginal Stack Trace:\n\t\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\t\tat org.springframework.web.reactive.function.client.DefaultClientResponse.lambda$createException$1(DefaultClientResponse.java:207)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:106)\n\t\tat reactor.core.publisher.FluxOnErrorReturn$ReturnSubscriber.onNext(FluxOnErrorReturn.java:162)\n\t\tat reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:101)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)\n\t\tat reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)\n\t\tat reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)\n\t\tat reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1816)\n\t\tat reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:160)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat reactor.netty.channel.FluxReceive.onInboundComplete(FluxReceive.java:400)\n\t\tat reactor.netty.channel.ChannelOperations.onInboundComplete(ChannelOperations.java:419)\n\t\tat reactor.netty.channel.ChannelOperations.terminate(ChannelOperations.java:473)\n\t\tat reactor.netty.http.client.HttpClientOperations.onInboundNext(HttpClientOperations.java:702)\n\t\tat reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:113)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:336)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:308)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\n\t\tat io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe.epollInReady(AbstractEpollStreamChannel.java:800)\n\t\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\n\t\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\n\t\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\n\t\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\n\t\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n\tSuppressed: java.lang.Exception: #block terminated with an error\n\t\tat reactor.core.publisher.BlockingSingleSubscriber.blockingGet(BlockingSingleSubscriber.java:99)\n\t\tat reactor.core.publisher.Mono.block(Mono.java:1707)\n\t\tat com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl.saveAsyncResult(AsyncResponseServiceImpl.kt:17)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.produceSavingPotCreatedAsyncResult(SavingPotActiveHandler.kt:49)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:39)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:17)\n\t\tat com.arbm.digibank.accounts.common.statemachine.AccountStateMachine.transitionTo(AccountStateMachine.kt:20)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo(SavingPotService.kt:251)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo$default(SavingPotService.kt:247)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.activateSavingPot(SavingPotService.kt:117)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$FastClassBySpringCGLIB$$ece3748f.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.retry.annotation.AnnotationAwareRetryOperationsInterceptor.invoke(AnnotationAwareRetryOperationsInterceptor.java:162)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$EnhancerBySpringCGLIB$$decf1564.activateSavingPot(<generated>)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.handleSavingPotEvent(PortfolioEventProcessor.kt:90)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(PortfolioEventProcessor.kt:47)\n\t\tat jdk.internal.reflect.GeneratedMethodAccessor295.invoke(Unknown Source)\n\t\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\t\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\t\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\t\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$ba1defd9.onMessage(<generated>)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\t\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\t\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:17:59.880",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:17:59.88Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_portfolio_account_linked_events-7, groupId=deposit_portfolio_account_linked_events] Seeking to offset 82673 for partition deposit.portfolio.account.linked.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:17:59.277",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:17:59.277Z",
            "@version": "1",
            "message": "Request to retrieve account by following accountNumber: 912010110378060",
            "logger_name": "com.arbm.digibank.accounts.savingaccount.controller.SavingAccountControllerV1",
            "thread_name": "http-nio-8080-exec-2",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a00b376977fa9f1264afe50636752b",
            "spanId": "a6c8e38037f6a9c4",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:17:55.871",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:17:55.871Z",
            "@version": "1",
            "message": "validateTransition",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "3e380f5e536b3da7",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:17:55.871",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:17:55.871Z",
            "@version": "1",
            "message": "on Exit run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "3e380f5e536b3da7",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:17:55.871",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:17:55.871Z",
            "@version": "1",
            "message": "onEnter run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "3e380f5e536b3da7",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:17:55.871",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:17:55.871Z",
            "@version": "1",
            "message": "new status",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "3e380f5e536b3da7",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:17:55.871",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:17:55.871Z",
            "@version": "1",
            "message": "Produced: {\"accountId\": \"eb5ba1ee-cbea-48b9-befa-9f9f98fcdc41\"}",
            "logger_name": "com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "3e380f5e536b3da7",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:17:55.871",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:17:55.871Z",
            "@version": "1",
            "message": "Saving response under id eb5ba1ee-cbea-48b9-befa-9f9f98fcdc41",
            "logger_name": "com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "3e380f5e536b3da7",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:17:55.866",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:17:55.866Z",
            "@version": "1",
            "message": "Received portfolio to saving pot linkage event: {\"portfolioId\": \"0d98c140-0c31-4a2a-886d-88b874a368b9\", \"accountId\": \"eb5ba1ee-cbea-48b9-befa-9f9f98fcdc41\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "3e380f5e536b3da7",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:17:55.863",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:17:55.863Z",
            "@version": "1",
            "message": "Received PortfolioLinkedWithAccountEvent: {\"portfolioId\": \"0d98c140-0c31-4a2a-886d-88b874a368b9\", \"accountId\": \"eb5ba1ee-cbea-48b9-befa-9f9f98fcdc41\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "3e380f5e536b3da7",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:17:55.862",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:17:55.862Z",
            "@version": "1",
            "message": "Error handler threw an exception",
            "logger_name": "org.springframework.kafka.listener.KafkaMessageListenerContainer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Seek to current after exception; nested exception is org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:208)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2719)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2689)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t... 9 common frames omitted\nCaused by: org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\tSuppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: \nError has been observed at the following site(s):\n\t*__checkpoint ⇢ 409 from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses [DefaultWebClient]\nOriginal Stack Trace:\n\t\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\t\tat org.springframework.web.reactive.function.client.DefaultClientResponse.lambda$createException$1(DefaultClientResponse.java:207)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:106)\n\t\tat reactor.core.publisher.FluxOnErrorReturn$ReturnSubscriber.onNext(FluxOnErrorReturn.java:162)\n\t\tat reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:101)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)\n\t\tat reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)\n\t\tat reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)\n\t\tat reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1816)\n\t\tat reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:160)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat reactor.netty.channel.FluxReceive.onInboundComplete(FluxReceive.java:400)\n\t\tat reactor.netty.channel.ChannelOperations.onInboundComplete(ChannelOperations.java:419)\n\t\tat reactor.netty.channel.ChannelOperations.terminate(ChannelOperations.java:473)\n\t\tat reactor.netty.http.client.HttpClientOperations.onInboundNext(HttpClientOperations.java:702)\n\t\tat reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:113)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:336)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:308)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\n\t\tat io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe.epollInReady(AbstractEpollStreamChannel.java:800)\n\t\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\n\t\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\n\t\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\n\t\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\n\t\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n\tSuppressed: java.lang.Exception: #block terminated with an error\n\t\tat reactor.core.publisher.BlockingSingleSubscriber.blockingGet(BlockingSingleSubscriber.java:99)\n\t\tat reactor.core.publisher.Mono.block(Mono.java:1707)\n\t\tat com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl.saveAsyncResult(AsyncResponseServiceImpl.kt:17)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.produceSavingPotCreatedAsyncResult(SavingPotActiveHandler.kt:49)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:39)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:17)\n\t\tat com.arbm.digibank.accounts.common.statemachine.AccountStateMachine.transitionTo(AccountStateMachine.kt:20)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo(SavingPotService.kt:251)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo$default(SavingPotService.kt:247)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.activateSavingPot(SavingPotService.kt:117)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$FastClassBySpringCGLIB$$ece3748f.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.retry.annotation.AnnotationAwareRetryOperationsInterceptor.invoke(AnnotationAwareRetryOperationsInterceptor.java:162)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$EnhancerBySpringCGLIB$$decf1564.activateSavingPot(<generated>)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.handleSavingPotEvent(PortfolioEventProcessor.kt:90)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(PortfolioEventProcessor.kt:47)\n\t\tat jdk.internal.reflect.GeneratedMethodAccessor295.invoke(Unknown Source)\n\t\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\t\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\t\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\t\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$ba1defd9.onMessage(<generated>)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\t\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\t\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:17:55.861",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:17:55.861Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_portfolio_account_linked_events-7, groupId=deposit_portfolio_account_linked_events] Seeking to offset 82673 for partition deposit.portfolio.account.linked.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:17:53.852",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:17:53.852Z",
            "@version": "1",
            "message": "validateTransition",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "7e8d29a9d60579bd",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:17:53.852",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:17:53.852Z",
            "@version": "1",
            "message": "on Exit run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "7e8d29a9d60579bd",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:17:53.852",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:17:53.852Z",
            "@version": "1",
            "message": "onEnter run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "7e8d29a9d60579bd",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:17:53.852",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:17:53.852Z",
            "@version": "1",
            "message": "new status",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "7e8d29a9d60579bd",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:17:53.852",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:17:53.852Z",
            "@version": "1",
            "message": "Produced: {\"accountId\": \"eb5ba1ee-cbea-48b9-befa-9f9f98fcdc41\"}",
            "logger_name": "com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "7e8d29a9d60579bd",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:17:53.852",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:17:53.852Z",
            "@version": "1",
            "message": "Saving response under id eb5ba1ee-cbea-48b9-befa-9f9f98fcdc41",
            "logger_name": "com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "7e8d29a9d60579bd",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:17:53.846",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:17:53.846Z",
            "@version": "1",
            "message": "Received portfolio to saving pot linkage event: {\"portfolioId\": \"0d98c140-0c31-4a2a-886d-88b874a368b9\", \"accountId\": \"eb5ba1ee-cbea-48b9-befa-9f9f98fcdc41\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "7e8d29a9d60579bd",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:17:53.843",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:17:53.843Z",
            "@version": "1",
            "message": "Received PortfolioLinkedWithAccountEvent: {\"portfolioId\": \"0d98c140-0c31-4a2a-886d-88b874a368b9\", \"accountId\": \"eb5ba1ee-cbea-48b9-befa-9f9f98fcdc41\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "7e8d29a9d60579bd",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:17:53.358",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:17:53.358Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_portfolio_account_linked_events-7, groupId=deposit_portfolio_account_linked_events] Seeking to offset 82673 for partition deposit.portfolio.account.linked.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:17:53.347",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:17:53.347Z",
            "@version": "1",
            "message": "Illegal attempt to make transition from ACTIVE to INACTIVE",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.StateChangeHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "e05ee1f71e6f7921",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:17:53.344",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:17:53.344Z",
            "@version": "1",
            "message": "Received portfolio to account linkage event: {\"portfolioId\": \"40a7957c-d5cf-4321-8bd1-2ddedb32b6a7\", \"accountId\": \"6d855749-902b-4731-ac3b-5d16c8496476\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "e05ee1f71e6f7921",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:17:53.344",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:17:53.344Z",
            "@version": "1",
            "message": "prepare inactive saving account",
            "logger_name": "com.arbm.digibank.accounts.savingaccount.SavingAccountService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "e05ee1f71e6f7921",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:17:53.342",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:17:53.342Z",
            "@version": "1",
            "message": "Received PortfolioLinkedWithAccountEvent: {\"portfolioId\": \"40a7957c-d5cf-4321-8bd1-2ddedb32b6a7\", \"accountId\": \"6d855749-902b-4731-ac3b-5d16c8496476\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "e05ee1f71e6f7921",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:17:53.341",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:17:53.341Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_portfolio_account_linked_events-7, groupId=deposit_portfolio_account_linked_events] Seeking to offset 82672 for partition deposit.portfolio.account.linked.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:17:53.341",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:17:53.341Z",
            "@version": "1",
            "message": "Error handler threw an exception",
            "logger_name": "org.springframework.kafka.listener.KafkaMessageListenerContainer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Seek to current after exception; nested exception is org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is com.arbm.digibank.accounts.common.exception.ChangeAccountStatusException: Illegal attempt to make transition from ACTIVE to INACTIVE; nested exception is com.arbm.digibank.accounts.common.exception.ChangeAccountStatusException: Illegal attempt to make transition from ACTIVE to INACTIVE\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:208)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is com.arbm.digibank.accounts.common.exception.ChangeAccountStatusException: Illegal attempt to make transition from ACTIVE to INACTIVE; nested exception is com.arbm.digibank.accounts.common.exception.ChangeAccountStatusException: Illegal attempt to make transition from ACTIVE to INACTIVE\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2719)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2689)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t... 9 common frames omitted\nCaused by: com.arbm.digibank.accounts.common.exception.ChangeAccountStatusException: Illegal attempt to make transition from ACTIVE to INACTIVE\n\tat com.arbm.digibank.accounts.common.statemachine.StateChangeHandler.validateTransition(StateChangeHandler.kt:15)\n\tat com.arbm.digibank.accounts.common.statemachine.AccountStateMachine.transitionTo(AccountStateMachine.kt:12)\n\tat com.arbm.digibank.accounts.savingaccount.SavingAccountService.transitionTo(SavingAccountService.kt:226)\n\tat com.arbm.digibank.accounts.savingaccount.SavingAccountService.transitionTo$default(SavingAccountService.kt:222)\n\tat com.arbm.digibank.accounts.savingaccount.SavingAccountService.prepareInactiveSavingAccount(SavingAccountService.kt:136)\n\tat com.arbm.digibank.accounts.savingaccount.SavingAccountService$$FastClassBySpringCGLIB$$5e5b4b5f.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.retry.annotation.AnnotationAwareRetryOperationsInterceptor.invoke(AnnotationAwareRetryOperationsInterceptor.java:162)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat com.arbm.digibank.accounts.savingaccount.SavingAccountService$$EnhancerBySpringCGLIB$$182c9fb4.prepareInactiveSavingAccount(<generated>)\n\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.handleSavingAccountEvent(PortfolioEventProcessor.kt:85)\n\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(PortfolioEventProcessor.kt:46)\n\tat jdk.internal.reflect.GeneratedMethodAccessor295.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$ba1defd9.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\t... 11 common frames omitted\n",
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:17:49.338",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:17:49.338Z",
            "@version": "1",
            "message": "Illegal attempt to make transition from ACTIVE to INACTIVE",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.StateChangeHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "858c25014fb35698",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:17:49.335",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:17:49.335Z",
            "@version": "1",
            "message": "Received portfolio to account linkage event: {\"portfolioId\": \"40a7957c-d5cf-4321-8bd1-2ddedb32b6a7\", \"accountId\": \"6d855749-902b-4731-ac3b-5d16c8496476\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "858c25014fb35698",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:17:49.335",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:17:49.335Z",
            "@version": "1",
            "message": "prepare inactive saving account",
            "logger_name": "com.arbm.digibank.accounts.savingaccount.SavingAccountService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "858c25014fb35698",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:17:49.333",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:17:49.333Z",
            "@version": "1",
            "message": "Received PortfolioLinkedWithAccountEvent: {\"portfolioId\": \"40a7957c-d5cf-4321-8bd1-2ddedb32b6a7\", \"accountId\": \"6d855749-902b-4731-ac3b-5d16c8496476\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "858c25014fb35698",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:17:49.332",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:17:49.332Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_portfolio_account_linked_events-7, groupId=deposit_portfolio_account_linked_events] Seeking to offset 82672 for partition deposit.portfolio.account.linked.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:17:49.332",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:17:49.332Z",
            "@version": "1",
            "message": "Error handler threw an exception",
            "logger_name": "org.springframework.kafka.listener.KafkaMessageListenerContainer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Seek to current after exception; nested exception is org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is com.arbm.digibank.accounts.common.exception.ChangeAccountStatusException: Illegal attempt to make transition from ACTIVE to INACTIVE; nested exception is com.arbm.digibank.accounts.common.exception.ChangeAccountStatusException: Illegal attempt to make transition from ACTIVE to INACTIVE\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:208)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is com.arbm.digibank.accounts.common.exception.ChangeAccountStatusException: Illegal attempt to make transition from ACTIVE to INACTIVE; nested exception is com.arbm.digibank.accounts.common.exception.ChangeAccountStatusException: Illegal attempt to make transition from ACTIVE to INACTIVE\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2719)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2689)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t... 9 common frames omitted\nCaused by: com.arbm.digibank.accounts.common.exception.ChangeAccountStatusException: Illegal attempt to make transition from ACTIVE to INACTIVE\n\tat com.arbm.digibank.accounts.common.statemachine.StateChangeHandler.validateTransition(StateChangeHandler.kt:15)\n\tat com.arbm.digibank.accounts.common.statemachine.AccountStateMachine.transitionTo(AccountStateMachine.kt:12)\n\tat com.arbm.digibank.accounts.savingaccount.SavingAccountService.transitionTo(SavingAccountService.kt:226)\n\tat com.arbm.digibank.accounts.savingaccount.SavingAccountService.transitionTo$default(SavingAccountService.kt:222)\n\tat com.arbm.digibank.accounts.savingaccount.SavingAccountService.prepareInactiveSavingAccount(SavingAccountService.kt:136)\n\tat com.arbm.digibank.accounts.savingaccount.SavingAccountService$$FastClassBySpringCGLIB$$5e5b4b5f.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.retry.annotation.AnnotationAwareRetryOperationsInterceptor.invoke(AnnotationAwareRetryOperationsInterceptor.java:162)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat com.arbm.digibank.accounts.savingaccount.SavingAccountService$$EnhancerBySpringCGLIB$$182c9fb4.prepareInactiveSavingAccount(<generated>)\n\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.handleSavingAccountEvent(PortfolioEventProcessor.kt:85)\n\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(PortfolioEventProcessor.kt:46)\n\tat jdk.internal.reflect.GeneratedMethodAccessor295.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$ba1defd9.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\t... 11 common frames omitted\n",
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:17:47.330",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:17:47.33Z",
            "@version": "1",
            "message": "Illegal attempt to make transition from ACTIVE to INACTIVE",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.StateChangeHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "2c623a786eb7f40c",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:17:47.327",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:17:47.327Z",
            "@version": "1",
            "message": "Received portfolio to account linkage event: {\"portfolioId\": \"40a7957c-d5cf-4321-8bd1-2ddedb32b6a7\", \"accountId\": \"6d855749-902b-4731-ac3b-5d16c8496476\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "2c623a786eb7f40c",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:17:47.327",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:17:47.327Z",
            "@version": "1",
            "message": "prepare inactive saving account",
            "logger_name": "com.arbm.digibank.accounts.savingaccount.SavingAccountService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "2c623a786eb7f40c",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:17:47.324",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:17:47.324Z",
            "@version": "1",
            "message": "Received PortfolioLinkedWithAccountEvent: {\"portfolioId\": \"40a7957c-d5cf-4321-8bd1-2ddedb32b6a7\", \"accountId\": \"6d855749-902b-4731-ac3b-5d16c8496476\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "2c623a786eb7f40c",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:17:47.244",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:17:47.243Z",
            "@version": "1",
            "message": "Request to retrieve account by following accountNumber: 912010110412109",
            "logger_name": "com.arbm.digibank.accounts.savingaccount.controller.SavingAccountControllerV1",
            "thread_name": "http-nio-8080-exec-3",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a00b2b7ab8d63603968ffd1c886f2e",
            "spanId": "f2ceb40e38851af0",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:17:36.855",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:17:36.855Z",
            "@version": "1",
            "message": "Request to retrieve account by following accountNumber: 912010110412109",
            "logger_name": "com.arbm.digibank.accounts.savingaccount.controller.SavingAccountControllerV1",
            "thread_name": "http-nio-8080-exec-10",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a00b2035c8c58473dd2de5066ff722",
            "spanId": "22ecc516459ad7ba",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:17:23.119",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:17:23.119Z",
            "@version": "1",
            "message": "Request to retrieve account by following accountNumber: 912010110277452",
            "logger_name": "com.arbm.digibank.accounts.savingaccount.controller.SavingAccountControllerV1",
            "thread_name": "http-nio-8080-exec-10",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a00b137aee06ea46457524551af923",
            "spanId": "0178292030243fe8",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:17:17.487",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:17:17.487Z",
            "@version": "1",
            "message": "Request to retrieve account by following accountNumber: 912010110277452",
            "logger_name": "com.arbm.digibank.accounts.savingaccount.controller.SavingAccountControllerV1",
            "thread_name": "http-nio-8080-exec-5",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a00b0d063d2d4470f840b660c4ce6a",
            "spanId": "b2460de3b635604c",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:16:58.306",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:16:58.305Z",
            "@version": "1",
            "message": "Request to retrieve account by following accountNumber: 912010110277452",
            "logger_name": "com.arbm.digibank.accounts.savingaccount.controller.SavingAccountControllerV1",
            "thread_name": "http-nio-8080-exec-3",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a00afa5c80f913055ff9672b44c4bb",
            "spanId": "2a9dfcabcf3ecbd6",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:16:56.764",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:16:56.764Z",
            "@version": "1",
            "message": "Request to retrieve account by following accountNumber: 912010110029911",
            "logger_name": "com.arbm.digibank.accounts.savingaccount.controller.SavingAccountControllerV1",
            "thread_name": "http-nio-8080-exec-7",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a00af873ebe5f235429c4c259d9690",
            "spanId": "79f576085409ea36",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:16:52.001",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:16:52Z",
            "@version": "1",
            "message": "Request to retrieve account by following accountNumber: 912010110277452",
            "logger_name": "com.arbm.digibank.accounts.savingaccount.controller.SavingAccountControllerV1",
            "thread_name": "http-nio-8080-exec-8",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a00af31a082ba71ca4989e45b74d5c",
            "spanId": "4ecfb43aa8d8996d",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:16:45.197",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:16:45.197Z",
            "@version": "1",
            "message": "Request to retrieve account by following accountNumber: 912010110253370",
            "logger_name": "com.arbm.digibank.accounts.savingaccount.controller.SavingAccountControllerV1",
            "thread_name": "http-nio-8080-exec-5",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a00aed30ddc24b578295193f2387a9",
            "spanId": "4ea8be55d967f284",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:16:40.728",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:16:40.728Z",
            "@version": "1",
            "message": "Request to retrieve account by following accountNumber: 912010110412109",
            "logger_name": "com.arbm.digibank.accounts.savingaccount.controller.SavingAccountControllerV1",
            "thread_name": "http-nio-8080-exec-7",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a00ae86a7afc0507a4158a0492337f",
            "spanId": "20f1409db138da73",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:16:40.711",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:16:40.71Z",
            "@version": "1",
            "message": "Request to retrieve account by following accountNumber: 912010110029911",
            "logger_name": "com.arbm.digibank.accounts.savingaccount.controller.SavingAccountControllerV1",
            "thread_name": "http-nio-8080-exec-6",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a00ae83a3e746e7a2520a745bbdd13",
            "spanId": "edfb5820d4876e4f",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:16:37.452",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:16:37.452Z",
            "@version": "1",
            "message": "Received request to fetch no of saving pots",
            "logger_name": "com.arbm.digibank.accounts.savingpot.controller.NoOfSavingPotController",
            "thread_name": "http-nio-8080-exec-2",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a00ae55803e81027f119b1298dcc16",
            "spanId": "8ee6b0eef344f06b",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:16:30.708",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:16:30.708Z",
            "@version": "1",
            "message": "Request to retrieve account by following accountNumber: 912010110253370",
            "logger_name": "com.arbm.digibank.accounts.savingaccount.controller.SavingAccountControllerV1",
            "thread_name": "http-nio-8080-exec-7",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a00ade501ce8573e8f54061b610f39",
            "spanId": "4a2d6e7a6dc7b317",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:16:24.670",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:16:24.67Z",
            "@version": "1",
            "message": "Request to retrieve account by following accountNumber: 912010110412109",
            "logger_name": "com.arbm.digibank.accounts.savingaccount.controller.SavingAccountControllerV1",
            "thread_name": "http-nio-8080-exec-8",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a00ad85b42c16212f8fd961fb2da79",
            "spanId": "65f33e15623c3e8d",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:16:15.168",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:16:15.168Z",
            "@version": "1",
            "message": "Request to retrieve account by following accountNumber: 912010110029911",
            "logger_name": "com.arbm.digibank.accounts.savingaccount.controller.SavingAccountControllerV1",
            "thread_name": "http-nio-8080-exec-5",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a00acf57af41df27a57a5e10a3c72e",
            "spanId": "174c1005cc947772",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:16:12.644",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:16:12.643Z",
            "@version": "1",
            "message": "validateTransition",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "7ecdb01edda7e4b0",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:16:12.644",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:16:12.643Z",
            "@version": "1",
            "message": "on Exit run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "7ecdb01edda7e4b0",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:16:12.644",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:16:12.643Z",
            "@version": "1",
            "message": "onEnter run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "7ecdb01edda7e4b0",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:16:12.644",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:16:12.643Z",
            "@version": "1",
            "message": "new status",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "7ecdb01edda7e4b0",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:16:12.644",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:16:12.644Z",
            "@version": "1",
            "message": "Produced: {\"accountId\": \"3f40eb18-437c-49c7-9750-c5acfc34bf53\"}",
            "logger_name": "com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "7ecdb01edda7e4b0",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:16:12.644",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:16:12.644Z",
            "@version": "1",
            "message": "Saving response under id 3f40eb18-437c-49c7-9750-c5acfc34bf53",
            "logger_name": "com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "7ecdb01edda7e4b0",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:16:12.638",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:16:12.638Z",
            "@version": "1",
            "message": "Received portfolio to saving pot linkage event: {\"portfolioId\": \"04d26069-20e6-40d6-8bbb-8768db6f20a9\", \"accountId\": \"3f40eb18-437c-49c7-9750-c5acfc34bf53\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "7ecdb01edda7e4b0",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:16:12.634",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:16:12.634Z",
            "@version": "1",
            "message": "Received PortfolioLinkedWithAccountEvent: {\"portfolioId\": \"04d26069-20e6-40d6-8bbb-8768db6f20a9\", \"accountId\": \"3f40eb18-437c-49c7-9750-c5acfc34bf53\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "7ecdb01edda7e4b0",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:16:12.634",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:16:12.633Z",
            "@version": "1",
            "message": "Error handler threw an exception",
            "logger_name": "org.springframework.kafka.listener.KafkaMessageListenerContainer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Seek to current after exception; nested exception is org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:208)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2719)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2689)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t... 9 common frames omitted\nCaused by: org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\tSuppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: \nError has been observed at the following site(s):\n\t*__checkpoint ⇢ 409 from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses [DefaultWebClient]\nOriginal Stack Trace:\n\t\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\t\tat org.springframework.web.reactive.function.client.DefaultClientResponse.lambda$createException$1(DefaultClientResponse.java:207)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:106)\n\t\tat reactor.core.publisher.FluxOnErrorReturn$ReturnSubscriber.onNext(FluxOnErrorReturn.java:162)\n\t\tat reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:101)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)\n\t\tat reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)\n\t\tat reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)\n\t\tat reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1816)\n\t\tat reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:160)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat reactor.netty.channel.FluxReceive.onInboundComplete(FluxReceive.java:400)\n\t\tat reactor.netty.channel.ChannelOperations.onInboundComplete(ChannelOperations.java:419)\n\t\tat reactor.netty.channel.ChannelOperations.terminate(ChannelOperations.java:473)\n\t\tat reactor.netty.http.client.HttpClientOperations.onInboundNext(HttpClientOperations.java:702)\n\t\tat reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:113)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:336)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:308)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\n\t\tat io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe.epollInReady(AbstractEpollStreamChannel.java:800)\n\t\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\n\t\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\n\t\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\n\t\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\n\t\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n\tSuppressed: java.lang.Exception: #block terminated with an error\n\t\tat reactor.core.publisher.BlockingSingleSubscriber.blockingGet(BlockingSingleSubscriber.java:99)\n\t\tat reactor.core.publisher.Mono.block(Mono.java:1707)\n\t\tat com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl.saveAsyncResult(AsyncResponseServiceImpl.kt:17)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.produceSavingPotCreatedAsyncResult(SavingPotActiveHandler.kt:49)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:39)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:17)\n\t\tat com.arbm.digibank.accounts.common.statemachine.AccountStateMachine.transitionTo(AccountStateMachine.kt:20)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo(SavingPotService.kt:251)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo$default(SavingPotService.kt:247)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.activateSavingPot(SavingPotService.kt:117)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$FastClassBySpringCGLIB$$ece3748f.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.retry.annotation.AnnotationAwareRetryOperationsInterceptor.invoke(AnnotationAwareRetryOperationsInterceptor.java:162)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$EnhancerBySpringCGLIB$$decf1564.activateSavingPot(<generated>)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.handleSavingPotEvent(PortfolioEventProcessor.kt:90)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(PortfolioEventProcessor.kt:47)\n\t\tat jdk.internal.reflect.GeneratedMethodAccessor295.invoke(Unknown Source)\n\t\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\t\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\t\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\t\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$ba1defd9.onMessage(<generated>)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\t\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\t\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:16:12.633",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:16:12.633Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_portfolio_account_linked_events-7, groupId=deposit_portfolio_account_linked_events] Seeking to offset 82671 for partition deposit.portfolio.account.linked.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:16:09.924",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:16:09.924Z",
            "@version": "1",
            "message": "Request to retrieve account by following accountNumber: 912010110069941",
            "logger_name": "com.arbm.digibank.accounts.savingaccount.controller.SavingAccountControllerV1",
            "thread_name": "http-nio-8080-exec-6",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a00ac93e72f7965cc8faee6a235f92",
            "spanId": "24ca8d10c0082229",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:16:08.623",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:16:08.623Z",
            "@version": "1",
            "message": "validateTransition",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "ca86aa0e313cca86",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:16:08.623",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:16:08.623Z",
            "@version": "1",
            "message": "on Exit run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "ca86aa0e313cca86",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:16:08.623",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:16:08.623Z",
            "@version": "1",
            "message": "onEnter run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "ca86aa0e313cca86",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:16:08.623",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:16:08.623Z",
            "@version": "1",
            "message": "new status",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "ca86aa0e313cca86",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:16:08.623",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:16:08.623Z",
            "@version": "1",
            "message": "Produced: {\"accountId\": \"3f40eb18-437c-49c7-9750-c5acfc34bf53\"}",
            "logger_name": "com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "ca86aa0e313cca86",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:16:08.623",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:16:08.623Z",
            "@version": "1",
            "message": "Saving response under id 3f40eb18-437c-49c7-9750-c5acfc34bf53",
            "logger_name": "com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "ca86aa0e313cca86",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:16:08.617",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:16:08.617Z",
            "@version": "1",
            "message": "Received portfolio to saving pot linkage event: {\"portfolioId\": \"04d26069-20e6-40d6-8bbb-8768db6f20a9\", \"accountId\": \"3f40eb18-437c-49c7-9750-c5acfc34bf53\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "ca86aa0e313cca86",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:16:08.613",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:16:08.613Z",
            "@version": "1",
            "message": "Received PortfolioLinkedWithAccountEvent: {\"portfolioId\": \"04d26069-20e6-40d6-8bbb-8768db6f20a9\", \"accountId\": \"3f40eb18-437c-49c7-9750-c5acfc34bf53\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "ca86aa0e313cca86",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:16:08.612",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:16:08.612Z",
            "@version": "1",
            "message": "Error handler threw an exception",
            "logger_name": "org.springframework.kafka.listener.KafkaMessageListenerContainer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Seek to current after exception; nested exception is org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:208)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2719)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2689)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t... 9 common frames omitted\nCaused by: org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\tSuppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: \nError has been observed at the following site(s):\n\t*__checkpoint ⇢ 409 from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses [DefaultWebClient]\nOriginal Stack Trace:\n\t\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\t\tat org.springframework.web.reactive.function.client.DefaultClientResponse.lambda$createException$1(DefaultClientResponse.java:207)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:106)\n\t\tat reactor.core.publisher.FluxOnErrorReturn$ReturnSubscriber.onNext(FluxOnErrorReturn.java:162)\n\t\tat reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:101)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)\n\t\tat reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)\n\t\tat reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)\n\t\tat reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1816)\n\t\tat reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:160)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat reactor.netty.channel.FluxReceive.onInboundComplete(FluxReceive.java:400)\n\t\tat reactor.netty.channel.ChannelOperations.onInboundComplete(ChannelOperations.java:419)\n\t\tat reactor.netty.channel.ChannelOperations.terminate(ChannelOperations.java:473)\n\t\tat reactor.netty.http.client.HttpClientOperations.onInboundNext(HttpClientOperations.java:702)\n\t\tat reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:113)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:336)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:308)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\n\t\tat io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe.epollInReady(AbstractEpollStreamChannel.java:800)\n\t\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\n\t\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\n\t\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\n\t\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\n\t\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n\tSuppressed: java.lang.Exception: #block terminated with an error\n\t\tat reactor.core.publisher.BlockingSingleSubscriber.blockingGet(BlockingSingleSubscriber.java:99)\n\t\tat reactor.core.publisher.Mono.block(Mono.java:1707)\n\t\tat com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl.saveAsyncResult(AsyncResponseServiceImpl.kt:17)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.produceSavingPotCreatedAsyncResult(SavingPotActiveHandler.kt:49)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:39)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:17)\n\t\tat com.arbm.digibank.accounts.common.statemachine.AccountStateMachine.transitionTo(AccountStateMachine.kt:20)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo(SavingPotService.kt:251)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo$default(SavingPotService.kt:247)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.activateSavingPot(SavingPotService.kt:117)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$FastClassBySpringCGLIB$$ece3748f.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.retry.annotation.AnnotationAwareRetryOperationsInterceptor.invoke(AnnotationAwareRetryOperationsInterceptor.java:162)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$EnhancerBySpringCGLIB$$decf1564.activateSavingPot(<generated>)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.handleSavingPotEvent(PortfolioEventProcessor.kt:90)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(PortfolioEventProcessor.kt:47)\n\t\tat jdk.internal.reflect.GeneratedMethodAccessor295.invoke(Unknown Source)\n\t\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\t\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\t\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\t\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$ba1defd9.onMessage(<generated>)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\t\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\t\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:16:08.611",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:16:08.611Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_portfolio_account_linked_events-7, groupId=deposit_portfolio_account_linked_events] Seeking to offset 82671 for partition deposit.portfolio.account.linked.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:16:06.910",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:16:06.91Z",
            "@version": "1",
            "message": "Request to retrieve account by following accountNumber: 912010110069941",
            "logger_name": "com.arbm.digibank.accounts.savingaccount.controller.SavingAccountControllerV1",
            "thread_name": "http-nio-8080-exec-2",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a00ac629f03d680c07112d3b5493bf",
            "spanId": "d6cd0df9e630f41a",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:16:06.604",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:16:06.603Z",
            "@version": "1",
            "message": "Produced: {\"accountId\": \"3f40eb18-437c-49c7-9750-c5acfc34bf53\"}",
            "logger_name": "com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "7eb00940f0e503ae",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:16:06.604",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:16:06.603Z",
            "@version": "1",
            "message": "Saving response under id 3f40eb18-437c-49c7-9750-c5acfc34bf53",
            "logger_name": "com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "7eb00940f0e503ae",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:16:06.603",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:16:06.603Z",
            "@version": "1",
            "message": "validateTransition",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "7eb00940f0e503ae",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:16:06.603",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:16:06.603Z",
            "@version": "1",
            "message": "on Exit run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "7eb00940f0e503ae",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:16:06.603",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:16:06.603Z",
            "@version": "1",
            "message": "onEnter run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "7eb00940f0e503ae",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:16:06.603",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:16:06.603Z",
            "@version": "1",
            "message": "new status",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "7eb00940f0e503ae",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:16:06.598",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:16:06.598Z",
            "@version": "1",
            "message": "Received portfolio to saving pot linkage event: {\"portfolioId\": \"04d26069-20e6-40d6-8bbb-8768db6f20a9\", \"accountId\": \"3f40eb18-437c-49c7-9750-c5acfc34bf53\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "7eb00940f0e503ae",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:16:06.596",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:16:06.595Z",
            "@version": "1",
            "message": "Received PortfolioLinkedWithAccountEvent: {\"portfolioId\": \"04d26069-20e6-40d6-8bbb-8768db6f20a9\", \"accountId\": \"3f40eb18-437c-49c7-9750-c5acfc34bf53\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "7eb00940f0e503ae",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:16:06.116",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:16:06.116Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_portfolio_account_linked_events-7, groupId=deposit_portfolio_account_linked_events] Seeking to offset 82671 for partition deposit.portfolio.account.linked.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:16:06.104",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:16:06.104Z",
            "@version": "1",
            "message": "Produced: {\"accountId\": \"add20b62-73b3-4842-b740-951d9ec6078c\"}",
            "logger_name": "com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "28d4df46c36e75a7",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:16:06.104",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:16:06.104Z",
            "@version": "1",
            "message": "Saving response under id add20b62-73b3-4842-b740-951d9ec6078c",
            "logger_name": "com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "28d4df46c36e75a7",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:16:06.103",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:16:06.103Z",
            "@version": "1",
            "message": "validateTransition",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "28d4df46c36e75a7",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:16:06.103",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:16:06.103Z",
            "@version": "1",
            "message": "on Exit run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "28d4df46c36e75a7",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:16:06.103",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:16:06.103Z",
            "@version": "1",
            "message": "onEnter run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "28d4df46c36e75a7",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:16:06.103",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:16:06.103Z",
            "@version": "1",
            "message": "new status",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "28d4df46c36e75a7",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:16:06.098",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:16:06.098Z",
            "@version": "1",
            "message": "Received portfolio to saving pot linkage event: {\"portfolioId\": \"40a7957c-d5cf-4321-8bd1-2ddedb32b6a7\", \"accountId\": \"add20b62-73b3-4842-b740-951d9ec6078c\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "28d4df46c36e75a7",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:16:06.094",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:16:06.093Z",
            "@version": "1",
            "message": "Error handler threw an exception",
            "logger_name": "org.springframework.kafka.listener.KafkaMessageListenerContainer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Seek to current after exception; nested exception is org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:208)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2719)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2689)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t... 9 common frames omitted\nCaused by: org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\tSuppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: \nError has been observed at the following site(s):\n\t*__checkpoint ⇢ 409 from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses [DefaultWebClient]\nOriginal Stack Trace:\n\t\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\t\tat org.springframework.web.reactive.function.client.DefaultClientResponse.lambda$createException$1(DefaultClientResponse.java:207)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:106)\n\t\tat reactor.core.publisher.FluxOnErrorReturn$ReturnSubscriber.onNext(FluxOnErrorReturn.java:162)\n\t\tat reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:101)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)\n\t\tat reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)\n\t\tat reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)\n\t\tat reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1816)\n\t\tat reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:160)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat reactor.netty.channel.FluxReceive.onInboundComplete(FluxReceive.java:400)\n\t\tat reactor.netty.channel.ChannelOperations.onInboundComplete(ChannelOperations.java:419)\n\t\tat reactor.netty.channel.ChannelOperations.terminate(ChannelOperations.java:473)\n\t\tat reactor.netty.http.client.HttpClientOperations.onInboundNext(HttpClientOperations.java:702)\n\t\tat reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:113)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:336)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:308)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\n\t\tat io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe.epollInReady(AbstractEpollStreamChannel.java:800)\n\t\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\n\t\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\n\t\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\n\t\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\n\t\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n\tSuppressed: java.lang.Exception: #block terminated with an error\n\t\tat reactor.core.publisher.BlockingSingleSubscriber.blockingGet(BlockingSingleSubscriber.java:99)\n\t\tat reactor.core.publisher.Mono.block(Mono.java:1707)\n\t\tat com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl.saveAsyncResult(AsyncResponseServiceImpl.kt:17)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.produceSavingPotCreatedAsyncResult(SavingPotActiveHandler.kt:49)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:39)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:17)\n\t\tat com.arbm.digibank.accounts.common.statemachine.AccountStateMachine.transitionTo(AccountStateMachine.kt:20)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo(SavingPotService.kt:251)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo$default(SavingPotService.kt:247)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.activateSavingPot(SavingPotService.kt:117)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$FastClassBySpringCGLIB$$ece3748f.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.retry.annotation.AnnotationAwareRetryOperationsInterceptor.invoke(AnnotationAwareRetryOperationsInterceptor.java:162)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$EnhancerBySpringCGLIB$$decf1564.activateSavingPot(<generated>)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.handleSavingPotEvent(PortfolioEventProcessor.kt:90)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(PortfolioEventProcessor.kt:47)\n\t\tat jdk.internal.reflect.GeneratedMethodAccessor295.invoke(Unknown Source)\n\t\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\t\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\t\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\t\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$ba1defd9.onMessage(<generated>)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\t\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\t\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:16:06.094",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:16:06.094Z",
            "@version": "1",
            "message": "Received PortfolioLinkedWithAccountEvent: {\"portfolioId\": \"40a7957c-d5cf-4321-8bd1-2ddedb32b6a7\", \"accountId\": \"add20b62-73b3-4842-b740-951d9ec6078c\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "28d4df46c36e75a7",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:16:06.093",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:16:06.093Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_portfolio_account_linked_events-7, groupId=deposit_portfolio_account_linked_events] Seeking to offset 82670 for partition deposit.portfolio.account.linked.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:16:02.083",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:16:02.083Z",
            "@version": "1",
            "message": "Saving response under id add20b62-73b3-4842-b740-951d9ec6078c",
            "logger_name": "com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "cde213eba5c7c26f",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:16:02.083",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:16:02.083Z",
            "@version": "1",
            "message": "Produced: {\"accountId\": \"add20b62-73b3-4842-b740-951d9ec6078c\"}",
            "logger_name": "com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "cde213eba5c7c26f",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:16:02.083",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:16:02.083Z",
            "@version": "1",
            "message": "new status",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "cde213eba5c7c26f",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:16:02.083",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:16:02.083Z",
            "@version": "1",
            "message": "onEnter run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "cde213eba5c7c26f",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:16:02.083",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:16:02.083Z",
            "@version": "1",
            "message": "on Exit run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "cde213eba5c7c26f",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:16:02.083",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:16:02.083Z",
            "@version": "1",
            "message": "validateTransition",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "cde213eba5c7c26f",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:16:02.067",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:16:02.067Z",
            "@version": "1",
            "message": "Received portfolio to saving pot linkage event: {\"portfolioId\": \"40a7957c-d5cf-4321-8bd1-2ddedb32b6a7\", \"accountId\": \"add20b62-73b3-4842-b740-951d9ec6078c\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "cde213eba5c7c26f",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:16:02.064",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:16:02.064Z",
            "@version": "1",
            "message": "Received PortfolioLinkedWithAccountEvent: {\"portfolioId\": \"40a7957c-d5cf-4321-8bd1-2ddedb32b6a7\", \"accountId\": \"add20b62-73b3-4842-b740-951d9ec6078c\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "cde213eba5c7c26f",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:16:02.063",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:16:02.063Z",
            "@version": "1",
            "message": "Error handler threw an exception",
            "logger_name": "org.springframework.kafka.listener.KafkaMessageListenerContainer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Seek to current after exception; nested exception is org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:208)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2719)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2689)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t... 9 common frames omitted\nCaused by: org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\tSuppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: \nError has been observed at the following site(s):\n\t*__checkpoint ⇢ 409 from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses [DefaultWebClient]\nOriginal Stack Trace:\n\t\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\t\tat org.springframework.web.reactive.function.client.DefaultClientResponse.lambda$createException$1(DefaultClientResponse.java:207)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:106)\n\t\tat reactor.core.publisher.FluxOnErrorReturn$ReturnSubscriber.onNext(FluxOnErrorReturn.java:162)\n\t\tat reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:101)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)\n\t\tat reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)\n\t\tat reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)\n\t\tat reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1816)\n\t\tat reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:160)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat reactor.netty.channel.FluxReceive.onInboundComplete(FluxReceive.java:400)\n\t\tat reactor.netty.channel.ChannelOperations.onInboundComplete(ChannelOperations.java:419)\n\t\tat reactor.netty.channel.ChannelOperations.terminate(ChannelOperations.java:473)\n\t\tat reactor.netty.http.client.HttpClientOperations.onInboundNext(HttpClientOperations.java:702)\n\t\tat reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:113)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:336)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:308)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\n\t\tat io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe.epollInReady(AbstractEpollStreamChannel.java:800)\n\t\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\n\t\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\n\t\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\n\t\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\n\t\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n\tSuppressed: java.lang.Exception: #block terminated with an error\n\t\tat reactor.core.publisher.BlockingSingleSubscriber.blockingGet(BlockingSingleSubscriber.java:99)\n\t\tat reactor.core.publisher.Mono.block(Mono.java:1707)\n\t\tat com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl.saveAsyncResult(AsyncResponseServiceImpl.kt:17)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.produceSavingPotCreatedAsyncResult(SavingPotActiveHandler.kt:49)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:39)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:17)\n\t\tat com.arbm.digibank.accounts.common.statemachine.AccountStateMachine.transitionTo(AccountStateMachine.kt:20)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo(SavingPotService.kt:251)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo$default(SavingPotService.kt:247)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.activateSavingPot(SavingPotService.kt:117)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$FastClassBySpringCGLIB$$ece3748f.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.retry.annotation.AnnotationAwareRetryOperationsInterceptor.invoke(AnnotationAwareRetryOperationsInterceptor.java:162)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$EnhancerBySpringCGLIB$$decf1564.activateSavingPot(<generated>)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.handleSavingPotEvent(PortfolioEventProcessor.kt:90)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(PortfolioEventProcessor.kt:47)\n\t\tat jdk.internal.reflect.GeneratedMethodAccessor295.invoke(Unknown Source)\n\t\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\t\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\t\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\t\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$ba1defd9.onMessage(<generated>)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\t\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\t\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:16:02.062",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:16:02.061Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_portfolio_account_linked_events-7, groupId=deposit_portfolio_account_linked_events] Seeking to offset 82670 for partition deposit.portfolio.account.linked.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:16:00.054",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:16:00.054Z",
            "@version": "1",
            "message": "Saving response under id add20b62-73b3-4842-b740-951d9ec6078c",
            "logger_name": "com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "dd7c2a57213b9f11",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:16:00.054",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:16:00.054Z",
            "@version": "1",
            "message": "Produced: {\"accountId\": \"add20b62-73b3-4842-b740-951d9ec6078c\"}",
            "logger_name": "com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "dd7c2a57213b9f11",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:16:00.054",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:16:00.053Z",
            "@version": "1",
            "message": "new status",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "dd7c2a57213b9f11",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:16:00.053",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:16:00.053Z",
            "@version": "1",
            "message": "onEnter run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "dd7c2a57213b9f11",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:16:00.053",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:16:00.053Z",
            "@version": "1",
            "message": "on Exit run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "dd7c2a57213b9f11",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:16:00.053",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:16:00.053Z",
            "@version": "1",
            "message": "validateTransition",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "dd7c2a57213b9f11",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:16:00.048",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:16:00.048Z",
            "@version": "1",
            "message": "Received portfolio to saving pot linkage event: {\"portfolioId\": \"40a7957c-d5cf-4321-8bd1-2ddedb32b6a7\", \"accountId\": \"add20b62-73b3-4842-b740-951d9ec6078c\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "dd7c2a57213b9f11",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:16:00.046",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:16:00.045Z",
            "@version": "1",
            "message": "Received PortfolioLinkedWithAccountEvent: {\"portfolioId\": \"40a7957c-d5cf-4321-8bd1-2ddedb32b6a7\", \"accountId\": \"add20b62-73b3-4842-b740-951d9ec6078c\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "dd7c2a57213b9f11",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:15:59.728",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:15:59.566Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_portfolio_account_linked_events-7, groupId=deposit_portfolio_account_linked_events] Seeking to offset 82670 for partition deposit.portfolio.account.linked.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:15:59.728",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:15:59.552Z",
            "@version": "1",
            "message": "Saving response under id 626098d1-ab7f-42da-b0f7-2fd285b1fa5b",
            "logger_name": "com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "e865428b6dcee2d1",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:15:59.728",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:15:59.552Z",
            "@version": "1",
            "message": "Produced: {\"accountId\": \"626098d1-ab7f-42da-b0f7-2fd285b1fa5b\"}",
            "logger_name": "com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "e865428b6dcee2d1",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:15:59.728",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:15:59.552Z",
            "@version": "1",
            "message": "new status",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "e865428b6dcee2d1",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:15:59.728",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:15:59.552Z",
            "@version": "1",
            "message": "onEnter run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "e865428b6dcee2d1",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:15:59.728",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:15:59.552Z",
            "@version": "1",
            "message": "on Exit run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "e865428b6dcee2d1",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:15:59.728",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:15:59.552Z",
            "@version": "1",
            "message": "validateTransition",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "e865428b6dcee2d1",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:15:59.728",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:15:59.545Z",
            "@version": "1",
            "message": "Received portfolio to saving pot linkage event: {\"portfolioId\": \"23bcdb37-b50e-4186-80e3-cca38d138d32\", \"accountId\": \"626098d1-ab7f-42da-b0f7-2fd285b1fa5b\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "e865428b6dcee2d1",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:15:59.728",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:15:59.541Z",
            "@version": "1",
            "message": "Received PortfolioLinkedWithAccountEvent: {\"portfolioId\": \"23bcdb37-b50e-4186-80e3-cca38d138d32\", \"accountId\": \"626098d1-ab7f-42da-b0f7-2fd285b1fa5b\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "e865428b6dcee2d1",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:15:59.516",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:15:59.516Z",
            "@version": "1",
            "message": "Error handler threw an exception",
            "logger_name": "org.springframework.kafka.listener.KafkaMessageListenerContainer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Seek to current after exception; nested exception is org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:208)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2719)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2689)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t... 9 common frames omitted\nCaused by: org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\tSuppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: \nError has been observed at the following site(s):\n\t*__checkpoint ⇢ 409 from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses [DefaultWebClient]\nOriginal Stack Trace:\n\t\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\t\tat org.springframework.web.reactive.function.client.DefaultClientResponse.lambda$createException$1(DefaultClientResponse.java:207)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:106)\n\t\tat reactor.core.publisher.FluxOnErrorReturn$ReturnSubscriber.onNext(FluxOnErrorReturn.java:162)\n\t\tat reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:101)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)\n\t\tat reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)\n\t\tat reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)\n\t\tat reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1816)\n\t\tat reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:160)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat reactor.netty.channel.FluxReceive.onInboundComplete(FluxReceive.java:400)\n\t\tat reactor.netty.channel.ChannelOperations.onInboundComplete(ChannelOperations.java:419)\n\t\tat reactor.netty.channel.ChannelOperations.terminate(ChannelOperations.java:473)\n\t\tat reactor.netty.http.client.HttpClientOperations.onInboundNext(HttpClientOperations.java:702)\n\t\tat reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:113)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:336)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:308)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\n\t\tat io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe.epollInReady(AbstractEpollStreamChannel.java:800)\n\t\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\n\t\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\n\t\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\n\t\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\n\t\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n\tSuppressed: java.lang.Exception: #block terminated with an error\n\t\tat reactor.core.publisher.BlockingSingleSubscriber.blockingGet(BlockingSingleSubscriber.java:99)\n\t\tat reactor.core.publisher.Mono.block(Mono.java:1707)\n\t\tat com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl.saveAsyncResult(AsyncResponseServiceImpl.kt:17)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.produceSavingPotCreatedAsyncResult(SavingPotActiveHandler.kt:49)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:39)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:17)\n\t\tat com.arbm.digibank.accounts.common.statemachine.AccountStateMachine.transitionTo(AccountStateMachine.kt:20)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo(SavingPotService.kt:251)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo$default(SavingPotService.kt:247)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.activateSavingPot(SavingPotService.kt:117)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$FastClassBySpringCGLIB$$ece3748f.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.retry.annotation.AnnotationAwareRetryOperationsInterceptor.invoke(AnnotationAwareRetryOperationsInterceptor.java:162)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$EnhancerBySpringCGLIB$$decf1564.activateSavingPot(<generated>)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.handleSavingPotEvent(PortfolioEventProcessor.kt:90)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(PortfolioEventProcessor.kt:47)\n\t\tat jdk.internal.reflect.GeneratedMethodAccessor295.invoke(Unknown Source)\n\t\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\t\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\t\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\t\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$ba1defd9.onMessage(<generated>)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\t\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\t\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:15:59.516",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:15:59.516Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_portfolio_account_linked_events-7, groupId=deposit_portfolio_account_linked_events] Seeking to offset 82669 for partition deposit.portfolio.account.linked.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:15:55.506",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:15:55.506Z",
            "@version": "1",
            "message": "Saving response under id 626098d1-ab7f-42da-b0f7-2fd285b1fa5b",
            "logger_name": "com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "299b3907fec8082e",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:15:55.506",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:15:55.506Z",
            "@version": "1",
            "message": "Produced: {\"accountId\": \"626098d1-ab7f-42da-b0f7-2fd285b1fa5b\"}",
            "logger_name": "com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "299b3907fec8082e",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:15:55.506",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:15:55.506Z",
            "@version": "1",
            "message": "new status",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "299b3907fec8082e",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:15:55.506",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:15:55.506Z",
            "@version": "1",
            "message": "onEnter run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "299b3907fec8082e",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:15:55.506",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:15:55.506Z",
            "@version": "1",
            "message": "on Exit run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "299b3907fec8082e",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:15:55.506",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:15:55.506Z",
            "@version": "1",
            "message": "validateTransition",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "299b3907fec8082e",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:15:55.501",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:15:55.501Z",
            "@version": "1",
            "message": "Received portfolio to saving pot linkage event: {\"portfolioId\": \"23bcdb37-b50e-4186-80e3-cca38d138d32\", \"accountId\": \"626098d1-ab7f-42da-b0f7-2fd285b1fa5b\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "299b3907fec8082e",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:15:55.497",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:15:55.497Z",
            "@version": "1",
            "message": "Received PortfolioLinkedWithAccountEvent: {\"portfolioId\": \"23bcdb37-b50e-4186-80e3-cca38d138d32\", \"accountId\": \"626098d1-ab7f-42da-b0f7-2fd285b1fa5b\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "299b3907fec8082e",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:15:55.496",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:15:55.496Z",
            "@version": "1",
            "message": "Error handler threw an exception",
            "logger_name": "org.springframework.kafka.listener.KafkaMessageListenerContainer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Seek to current after exception; nested exception is org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:208)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2719)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2689)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t... 9 common frames omitted\nCaused by: org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\tSuppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: \nError has been observed at the following site(s):\n\t*__checkpoint ⇢ 409 from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses [DefaultWebClient]\nOriginal Stack Trace:\n\t\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\t\tat org.springframework.web.reactive.function.client.DefaultClientResponse.lambda$createException$1(DefaultClientResponse.java:207)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:106)\n\t\tat reactor.core.publisher.FluxOnErrorReturn$ReturnSubscriber.onNext(FluxOnErrorReturn.java:162)\n\t\tat reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:101)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)\n\t\tat reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)\n\t\tat reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)\n\t\tat reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1816)\n\t\tat reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:160)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat reactor.netty.channel.FluxReceive.onInboundComplete(FluxReceive.java:400)\n\t\tat reactor.netty.channel.ChannelOperations.onInboundComplete(ChannelOperations.java:419)\n\t\tat reactor.netty.channel.ChannelOperations.terminate(ChannelOperations.java:473)\n\t\tat reactor.netty.http.client.HttpClientOperations.onInboundNext(HttpClientOperations.java:702)\n\t\tat reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:113)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:336)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:308)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\n\t\tat io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe.epollInReady(AbstractEpollStreamChannel.java:800)\n\t\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\n\t\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\n\t\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\n\t\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\n\t\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n\tSuppressed: java.lang.Exception: #block terminated with an error\n\t\tat reactor.core.publisher.BlockingSingleSubscriber.blockingGet(BlockingSingleSubscriber.java:99)\n\t\tat reactor.core.publisher.Mono.block(Mono.java:1707)\n\t\tat com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl.saveAsyncResult(AsyncResponseServiceImpl.kt:17)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.produceSavingPotCreatedAsyncResult(SavingPotActiveHandler.kt:49)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:39)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:17)\n\t\tat com.arbm.digibank.accounts.common.statemachine.AccountStateMachine.transitionTo(AccountStateMachine.kt:20)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo(SavingPotService.kt:251)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo$default(SavingPotService.kt:247)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.activateSavingPot(SavingPotService.kt:117)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$FastClassBySpringCGLIB$$ece3748f.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.retry.annotation.AnnotationAwareRetryOperationsInterceptor.invoke(AnnotationAwareRetryOperationsInterceptor.java:162)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$EnhancerBySpringCGLIB$$decf1564.activateSavingPot(<generated>)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.handleSavingPotEvent(PortfolioEventProcessor.kt:90)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(PortfolioEventProcessor.kt:47)\n\t\tat jdk.internal.reflect.GeneratedMethodAccessor295.invoke(Unknown Source)\n\t\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\t\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\t\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\t\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$ba1defd9.onMessage(<generated>)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\t\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\t\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:15:55.496",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:15:55.496Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_portfolio_account_linked_events-7, groupId=deposit_portfolio_account_linked_events] Seeking to offset 82669 for partition deposit.portfolio.account.linked.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:15:53.484",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:15:53.483Z",
            "@version": "1",
            "message": "validateTransition",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "f9b79c51c42944d4",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:15:53.484",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:15:53.483Z",
            "@version": "1",
            "message": "on Exit run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "f9b79c51c42944d4",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:15:53.484",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:15:53.483Z",
            "@version": "1",
            "message": "onEnter run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "f9b79c51c42944d4",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:15:53.484",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:15:53.483Z",
            "@version": "1",
            "message": "new status",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "f9b79c51c42944d4",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:15:53.484",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:15:53.484Z",
            "@version": "1",
            "message": "Produced: {\"accountId\": \"626098d1-ab7f-42da-b0f7-2fd285b1fa5b\"}",
            "logger_name": "com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "f9b79c51c42944d4",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:15:53.484",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:15:53.484Z",
            "@version": "1",
            "message": "Saving response under id 626098d1-ab7f-42da-b0f7-2fd285b1fa5b",
            "logger_name": "com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "f9b79c51c42944d4",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:15:53.478",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:15:53.477Z",
            "@version": "1",
            "message": "Received portfolio to saving pot linkage event: {\"portfolioId\": \"23bcdb37-b50e-4186-80e3-cca38d138d32\", \"accountId\": \"626098d1-ab7f-42da-b0f7-2fd285b1fa5b\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "f9b79c51c42944d4",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:15:53.474",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:15:53.474Z",
            "@version": "1",
            "message": "Received PortfolioLinkedWithAccountEvent: {\"portfolioId\": \"23bcdb37-b50e-4186-80e3-cca38d138d32\", \"accountId\": \"626098d1-ab7f-42da-b0f7-2fd285b1fa5b\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "f9b79c51c42944d4",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:15:12.079",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:15:12.079Z",
            "@version": "1",
            "message": "Saving response under id 5e7d9b64-724e-483a-ae7a-2f361b352afc",
            "logger_name": "com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "301c412c3063c392",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:15:12.079",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:15:12.079Z",
            "@version": "1",
            "message": "Produced: {\"accountId\": \"5e7d9b64-724e-483a-ae7a-2f361b352afc\"}",
            "logger_name": "com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "301c412c3063c392",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:15:12.079",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:15:12.079Z",
            "@version": "1",
            "message": "new status",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "301c412c3063c392",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:15:12.079",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:15:12.079Z",
            "@version": "1",
            "message": "onEnter run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "301c412c3063c392",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:15:12.079",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:15:12.079Z",
            "@version": "1",
            "message": "on Exit run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "301c412c3063c392",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:15:12.079",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:15:12.079Z",
            "@version": "1",
            "message": "validateTransition",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "301c412c3063c392",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:15:12.074",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:15:12.073Z",
            "@version": "1",
            "message": "Received portfolio to saving pot linkage event: {\"portfolioId\": \"0d98c140-0c31-4a2a-886d-88b874a368b9\", \"accountId\": \"5e7d9b64-724e-483a-ae7a-2f361b352afc\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "301c412c3063c392",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:15:12.070",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:15:12.07Z",
            "@version": "1",
            "message": "Received PortfolioLinkedWithAccountEvent: {\"portfolioId\": \"0d98c140-0c31-4a2a-886d-88b874a368b9\", \"accountId\": \"5e7d9b64-724e-483a-ae7a-2f361b352afc\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "301c412c3063c392",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:15:12.069",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:15:12.069Z",
            "@version": "1",
            "message": "Error handler threw an exception",
            "logger_name": "org.springframework.kafka.listener.KafkaMessageListenerContainer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Seek to current after exception; nested exception is org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:208)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2719)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2689)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t... 9 common frames omitted\nCaused by: org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\tSuppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: \nError has been observed at the following site(s):\n\t*__checkpoint ⇢ 409 from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses [DefaultWebClient]\nOriginal Stack Trace:\n\t\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\t\tat org.springframework.web.reactive.function.client.DefaultClientResponse.lambda$createException$1(DefaultClientResponse.java:207)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:106)\n\t\tat reactor.core.publisher.FluxOnErrorReturn$ReturnSubscriber.onNext(FluxOnErrorReturn.java:162)\n\t\tat reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:101)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)\n\t\tat reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)\n\t\tat reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)\n\t\tat reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1816)\n\t\tat reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:160)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat reactor.netty.channel.FluxReceive.onInboundComplete(FluxReceive.java:400)\n\t\tat reactor.netty.channel.ChannelOperations.onInboundComplete(ChannelOperations.java:419)\n\t\tat reactor.netty.channel.ChannelOperations.terminate(ChannelOperations.java:473)\n\t\tat reactor.netty.http.client.HttpClientOperations.onInboundNext(HttpClientOperations.java:702)\n\t\tat reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:113)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:336)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:308)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\n\t\tat io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe.epollInReady(AbstractEpollStreamChannel.java:800)\n\t\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\n\t\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\n\t\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\n\t\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\n\t\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n\tSuppressed: java.lang.Exception: #block terminated with an error\n\t\tat reactor.core.publisher.BlockingSingleSubscriber.blockingGet(BlockingSingleSubscriber.java:99)\n\t\tat reactor.core.publisher.Mono.block(Mono.java:1707)\n\t\tat com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl.saveAsyncResult(AsyncResponseServiceImpl.kt:17)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.produceSavingPotCreatedAsyncResult(SavingPotActiveHandler.kt:49)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:39)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:17)\n\t\tat com.arbm.digibank.accounts.common.statemachine.AccountStateMachine.transitionTo(AccountStateMachine.kt:20)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo(SavingPotService.kt:251)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo$default(SavingPotService.kt:247)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.activateSavingPot(SavingPotService.kt:117)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$FastClassBySpringCGLIB$$ece3748f.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.retry.annotation.AnnotationAwareRetryOperationsInterceptor.invoke(AnnotationAwareRetryOperationsInterceptor.java:162)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$EnhancerBySpringCGLIB$$decf1564.activateSavingPot(<generated>)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.handleSavingPotEvent(PortfolioEventProcessor.kt:90)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(PortfolioEventProcessor.kt:47)\n\t\tat jdk.internal.reflect.GeneratedMethodAccessor295.invoke(Unknown Source)\n\t\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\t\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\t\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\t\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$ba1defd9.onMessage(<generated>)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\t\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\t\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:15:12.069",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:15:12.069Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_portfolio_account_linked_events-7, groupId=deposit_portfolio_account_linked_events] Seeking to offset 82668 for partition deposit.portfolio.account.linked.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:15:08.060",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:15:08.06Z",
            "@version": "1",
            "message": "validateTransition",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "1212b265005568b7",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:15:08.060",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:15:08.06Z",
            "@version": "1",
            "message": "on Exit run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "1212b265005568b7",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:15:08.060",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:15:08.06Z",
            "@version": "1",
            "message": "onEnter run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "1212b265005568b7",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:15:08.060",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:15:08.06Z",
            "@version": "1",
            "message": "new status",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "1212b265005568b7",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:15:08.060",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:15:08.06Z",
            "@version": "1",
            "message": "Produced: {\"accountId\": \"5e7d9b64-724e-483a-ae7a-2f361b352afc\"}",
            "logger_name": "com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "1212b265005568b7",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:15:08.060",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:15:08.06Z",
            "@version": "1",
            "message": "Saving response under id 5e7d9b64-724e-483a-ae7a-2f361b352afc",
            "logger_name": "com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "1212b265005568b7",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:15:08.054",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:15:08.054Z",
            "@version": "1",
            "message": "Received portfolio to saving pot linkage event: {\"portfolioId\": \"0d98c140-0c31-4a2a-886d-88b874a368b9\", \"accountId\": \"5e7d9b64-724e-483a-ae7a-2f361b352afc\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "1212b265005568b7",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:15:08.051",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:15:08.051Z",
            "@version": "1",
            "message": "Received PortfolioLinkedWithAccountEvent: {\"portfolioId\": \"0d98c140-0c31-4a2a-886d-88b874a368b9\", \"accountId\": \"5e7d9b64-724e-483a-ae7a-2f361b352afc\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "1212b265005568b7",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:15:08.050",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:15:08.05Z",
            "@version": "1",
            "message": "Error handler threw an exception",
            "logger_name": "org.springframework.kafka.listener.KafkaMessageListenerContainer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Seek to current after exception; nested exception is org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:208)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2719)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2689)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t... 9 common frames omitted\nCaused by: org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\tSuppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: \nError has been observed at the following site(s):\n\t*__checkpoint ⇢ 409 from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses [DefaultWebClient]\nOriginal Stack Trace:\n\t\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\t\tat org.springframework.web.reactive.function.client.DefaultClientResponse.lambda$createException$1(DefaultClientResponse.java:207)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:106)\n\t\tat reactor.core.publisher.FluxOnErrorReturn$ReturnSubscriber.onNext(FluxOnErrorReturn.java:162)\n\t\tat reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:101)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)\n\t\tat reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)\n\t\tat reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)\n\t\tat reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1816)\n\t\tat reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:160)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat reactor.netty.channel.FluxReceive.onInboundComplete(FluxReceive.java:400)\n\t\tat reactor.netty.channel.ChannelOperations.onInboundComplete(ChannelOperations.java:419)\n\t\tat reactor.netty.channel.ChannelOperations.terminate(ChannelOperations.java:473)\n\t\tat reactor.netty.http.client.HttpClientOperations.onInboundNext(HttpClientOperations.java:702)\n\t\tat reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:113)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:336)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:308)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\n\t\tat io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe.epollInReady(AbstractEpollStreamChannel.java:800)\n\t\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\n\t\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\n\t\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\n\t\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\n\t\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n\tSuppressed: java.lang.Exception: #block terminated with an error\n\t\tat reactor.core.publisher.BlockingSingleSubscriber.blockingGet(BlockingSingleSubscriber.java:99)\n\t\tat reactor.core.publisher.Mono.block(Mono.java:1707)\n\t\tat com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl.saveAsyncResult(AsyncResponseServiceImpl.kt:17)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.produceSavingPotCreatedAsyncResult(SavingPotActiveHandler.kt:49)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:39)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:17)\n\t\tat com.arbm.digibank.accounts.common.statemachine.AccountStateMachine.transitionTo(AccountStateMachine.kt:20)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo(SavingPotService.kt:251)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo$default(SavingPotService.kt:247)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.activateSavingPot(SavingPotService.kt:117)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$FastClassBySpringCGLIB$$ece3748f.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.retry.annotation.AnnotationAwareRetryOperationsInterceptor.invoke(AnnotationAwareRetryOperationsInterceptor.java:162)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$EnhancerBySpringCGLIB$$decf1564.activateSavingPot(<generated>)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.handleSavingPotEvent(PortfolioEventProcessor.kt:90)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(PortfolioEventProcessor.kt:47)\n\t\tat jdk.internal.reflect.GeneratedMethodAccessor295.invoke(Unknown Source)\n\t\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\t\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\t\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\t\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$ba1defd9.onMessage(<generated>)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\t\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\t\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:15:08.049",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:15:08.049Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_portfolio_account_linked_events-7, groupId=deposit_portfolio_account_linked_events] Seeking to offset 82668 for partition deposit.portfolio.account.linked.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:15:06.041",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:15:06.04Z",
            "@version": "1",
            "message": "Produced: {\"accountId\": \"5e7d9b64-724e-483a-ae7a-2f361b352afc\"}",
            "logger_name": "com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "5d0a238fc231ec17",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:15:06.041",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:15:06.04Z",
            "@version": "1",
            "message": "Saving response under id 5e7d9b64-724e-483a-ae7a-2f361b352afc",
            "logger_name": "com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "5d0a238fc231ec17",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:15:06.040",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:15:06.04Z",
            "@version": "1",
            "message": "validateTransition",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "5d0a238fc231ec17",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:15:06.040",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:15:06.04Z",
            "@version": "1",
            "message": "on Exit run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "5d0a238fc231ec17",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:15:06.040",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:15:06.04Z",
            "@version": "1",
            "message": "onEnter run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "5d0a238fc231ec17",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:15:06.040",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:15:06.04Z",
            "@version": "1",
            "message": "new status",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "5d0a238fc231ec17",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:15:06.025",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:15:06.025Z",
            "@version": "1",
            "message": "Received portfolio to saving pot linkage event: {\"portfolioId\": \"0d98c140-0c31-4a2a-886d-88b874a368b9\", \"accountId\": \"5e7d9b64-724e-483a-ae7a-2f361b352afc\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "5d0a238fc231ec17",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:15:06.022",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:15:06.022Z",
            "@version": "1",
            "message": "Received PortfolioLinkedWithAccountEvent: {\"portfolioId\": \"0d98c140-0c31-4a2a-886d-88b874a368b9\", \"accountId\": \"5e7d9b64-724e-483a-ae7a-2f361b352afc\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "5d0a238fc231ec17",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:15:05.546",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:15:05.545Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_portfolio_account_linked_events-7, groupId=deposit_portfolio_account_linked_events] Seeking to offset 82668 for partition deposit.portfolio.account.linked.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:15:05.530",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:15:05.529Z",
            "@version": "1",
            "message": "Saving response under id cc96472f-92e9-4e4f-8945-7ef0cc3558e3",
            "logger_name": "com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "fc7169f244717c9f",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:15:05.529",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:15:05.529Z",
            "@version": "1",
            "message": "validateTransition",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "fc7169f244717c9f",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:15:05.529",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:15:05.529Z",
            "@version": "1",
            "message": "on Exit run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "fc7169f244717c9f",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:15:05.529",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:15:05.529Z",
            "@version": "1",
            "message": "onEnter run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "fc7169f244717c9f",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:15:05.529",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:15:05.529Z",
            "@version": "1",
            "message": "new status",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "fc7169f244717c9f",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:15:05.529",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:15:05.529Z",
            "@version": "1",
            "message": "Produced: {\"accountId\": \"cc96472f-92e9-4e4f-8945-7ef0cc3558e3\"}",
            "logger_name": "com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "fc7169f244717c9f",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:15:05.524",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:15:05.524Z",
            "@version": "1",
            "message": "Received portfolio to saving pot linkage event: {\"portfolioId\": \"40a7957c-d5cf-4321-8bd1-2ddedb32b6a7\", \"accountId\": \"cc96472f-92e9-4e4f-8945-7ef0cc3558e3\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "fc7169f244717c9f",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:15:05.520",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:15:05.52Z",
            "@version": "1",
            "message": "Received PortfolioLinkedWithAccountEvent: {\"portfolioId\": \"40a7957c-d5cf-4321-8bd1-2ddedb32b6a7\", \"accountId\": \"cc96472f-92e9-4e4f-8945-7ef0cc3558e3\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "fc7169f244717c9f",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:15:05.519",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:15:05.519Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_portfolio_account_linked_events-7, groupId=deposit_portfolio_account_linked_events] Seeking to offset 82667 for partition deposit.portfolio.account.linked.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:15:05.519",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:15:05.519Z",
            "@version": "1",
            "message": "Error handler threw an exception",
            "logger_name": "org.springframework.kafka.listener.KafkaMessageListenerContainer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Seek to current after exception; nested exception is org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:208)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2719)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2689)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t... 9 common frames omitted\nCaused by: org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\tSuppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: \nError has been observed at the following site(s):\n\t*__checkpoint ⇢ 409 from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses [DefaultWebClient]\nOriginal Stack Trace:\n\t\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\t\tat org.springframework.web.reactive.function.client.DefaultClientResponse.lambda$createException$1(DefaultClientResponse.java:207)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:106)\n\t\tat reactor.core.publisher.FluxOnErrorReturn$ReturnSubscriber.onNext(FluxOnErrorReturn.java:162)\n\t\tat reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:101)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)\n\t\tat reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)\n\t\tat reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)\n\t\tat reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1816)\n\t\tat reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:160)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat reactor.netty.channel.FluxReceive.onInboundComplete(FluxReceive.java:400)\n\t\tat reactor.netty.channel.ChannelOperations.onInboundComplete(ChannelOperations.java:419)\n\t\tat reactor.netty.channel.ChannelOperations.terminate(ChannelOperations.java:473)\n\t\tat reactor.netty.http.client.HttpClientOperations.onInboundNext(HttpClientOperations.java:702)\n\t\tat reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:113)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:336)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:308)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\n\t\tat io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe.epollInReady(AbstractEpollStreamChannel.java:800)\n\t\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\n\t\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\n\t\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\n\t\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\n\t\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n\tSuppressed: java.lang.Exception: #block terminated with an error\n\t\tat reactor.core.publisher.BlockingSingleSubscriber.blockingGet(BlockingSingleSubscriber.java:99)\n\t\tat reactor.core.publisher.Mono.block(Mono.java:1707)\n\t\tat com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl.saveAsyncResult(AsyncResponseServiceImpl.kt:17)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.produceSavingPotCreatedAsyncResult(SavingPotActiveHandler.kt:49)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:39)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:17)\n\t\tat com.arbm.digibank.accounts.common.statemachine.AccountStateMachine.transitionTo(AccountStateMachine.kt:20)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo(SavingPotService.kt:251)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo$default(SavingPotService.kt:247)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.activateSavingPot(SavingPotService.kt:117)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$FastClassBySpringCGLIB$$ece3748f.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.retry.annotation.AnnotationAwareRetryOperationsInterceptor.invoke(AnnotationAwareRetryOperationsInterceptor.java:162)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$EnhancerBySpringCGLIB$$decf1564.activateSavingPot(<generated>)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.handleSavingPotEvent(PortfolioEventProcessor.kt:90)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(PortfolioEventProcessor.kt:47)\n\t\tat jdk.internal.reflect.GeneratedMethodAccessor295.invoke(Unknown Source)\n\t\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\t\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\t\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\t\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$ba1defd9.onMessage(<generated>)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\t\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\t\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:15:01.509",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:15:01.509Z",
            "@version": "1",
            "message": "validateTransition",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "f74d4f46a3332de9",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:15:01.509",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:15:01.509Z",
            "@version": "1",
            "message": "on Exit run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "f74d4f46a3332de9",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:15:01.509",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:15:01.509Z",
            "@version": "1",
            "message": "Saving response under id cc96472f-92e9-4e4f-8945-7ef0cc3558e3",
            "logger_name": "com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "f74d4f46a3332de9",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:15:01.509",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:15:01.509Z",
            "@version": "1",
            "message": "Produced: {\"accountId\": \"cc96472f-92e9-4e4f-8945-7ef0cc3558e3\"}",
            "logger_name": "com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "f74d4f46a3332de9",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:15:01.509",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:15:01.509Z",
            "@version": "1",
            "message": "new status",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "f74d4f46a3332de9",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:15:01.509",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:15:01.509Z",
            "@version": "1",
            "message": "onEnter run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "f74d4f46a3332de9",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:15:01.504",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:15:01.503Z",
            "@version": "1",
            "message": "Received portfolio to saving pot linkage event: {\"portfolioId\": \"40a7957c-d5cf-4321-8bd1-2ddedb32b6a7\", \"accountId\": \"cc96472f-92e9-4e4f-8945-7ef0cc3558e3\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "f74d4f46a3332de9",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:15:01.500",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:15:01.5Z",
            "@version": "1",
            "message": "Received PortfolioLinkedWithAccountEvent: {\"portfolioId\": \"40a7957c-d5cf-4321-8bd1-2ddedb32b6a7\", \"accountId\": \"cc96472f-92e9-4e4f-8945-7ef0cc3558e3\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "f74d4f46a3332de9",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:15:01.499",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:15:01.498Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_portfolio_account_linked_events-7, groupId=deposit_portfolio_account_linked_events] Seeking to offset 82667 for partition deposit.portfolio.account.linked.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:15:01.499",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:15:01.499Z",
            "@version": "1",
            "message": "Error handler threw an exception",
            "logger_name": "org.springframework.kafka.listener.KafkaMessageListenerContainer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Seek to current after exception; nested exception is org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:208)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2719)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2689)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t... 9 common frames omitted\nCaused by: org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\tSuppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: \nError has been observed at the following site(s):\n\t*__checkpoint ⇢ 409 from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses [DefaultWebClient]\nOriginal Stack Trace:\n\t\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\t\tat org.springframework.web.reactive.function.client.DefaultClientResponse.lambda$createException$1(DefaultClientResponse.java:207)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:106)\n\t\tat reactor.core.publisher.FluxOnErrorReturn$ReturnSubscriber.onNext(FluxOnErrorReturn.java:162)\n\t\tat reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:101)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)\n\t\tat reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)\n\t\tat reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)\n\t\tat reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1816)\n\t\tat reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:160)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat reactor.netty.channel.FluxReceive.onInboundComplete(FluxReceive.java:400)\n\t\tat reactor.netty.channel.ChannelOperations.onInboundComplete(ChannelOperations.java:419)\n\t\tat reactor.netty.channel.ChannelOperations.terminate(ChannelOperations.java:473)\n\t\tat reactor.netty.http.client.HttpClientOperations.onInboundNext(HttpClientOperations.java:702)\n\t\tat reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:113)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:336)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:308)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\n\t\tat io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe.epollInReady(AbstractEpollStreamChannel.java:800)\n\t\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\n\t\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\n\t\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\n\t\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\n\t\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n\tSuppressed: java.lang.Exception: #block terminated with an error\n\t\tat reactor.core.publisher.BlockingSingleSubscriber.blockingGet(BlockingSingleSubscriber.java:99)\n\t\tat reactor.core.publisher.Mono.block(Mono.java:1707)\n\t\tat com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl.saveAsyncResult(AsyncResponseServiceImpl.kt:17)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.produceSavingPotCreatedAsyncResult(SavingPotActiveHandler.kt:49)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:39)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:17)\n\t\tat com.arbm.digibank.accounts.common.statemachine.AccountStateMachine.transitionTo(AccountStateMachine.kt:20)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo(SavingPotService.kt:251)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo$default(SavingPotService.kt:247)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.activateSavingPot(SavingPotService.kt:117)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$FastClassBySpringCGLIB$$ece3748f.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.retry.annotation.AnnotationAwareRetryOperationsInterceptor.invoke(AnnotationAwareRetryOperationsInterceptor.java:162)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$EnhancerBySpringCGLIB$$decf1564.activateSavingPot(<generated>)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.handleSavingPotEvent(PortfolioEventProcessor.kt:90)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(PortfolioEventProcessor.kt:47)\n\t\tat jdk.internal.reflect.GeneratedMethodAccessor295.invoke(Unknown Source)\n\t\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\t\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\t\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\t\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$ba1defd9.onMessage(<generated>)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\t\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\t\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:14:59.490",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:14:59.49Z",
            "@version": "1",
            "message": "validateTransition",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "e52f2f9cd0886873",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:14:59.490",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:14:59.49Z",
            "@version": "1",
            "message": "on Exit run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "e52f2f9cd0886873",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:14:59.490",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:14:59.49Z",
            "@version": "1",
            "message": "onEnter run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "e52f2f9cd0886873",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:14:59.490",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:14:59.49Z",
            "@version": "1",
            "message": "new status",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "e52f2f9cd0886873",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:14:59.490",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:14:59.49Z",
            "@version": "1",
            "message": "Produced: {\"accountId\": \"cc96472f-92e9-4e4f-8945-7ef0cc3558e3\"}",
            "logger_name": "com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "e52f2f9cd0886873",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:14:59.490",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:14:59.49Z",
            "@version": "1",
            "message": "Saving response under id cc96472f-92e9-4e4f-8945-7ef0cc3558e3",
            "logger_name": "com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "e52f2f9cd0886873",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:14:59.485",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:14:59.485Z",
            "@version": "1",
            "message": "Received portfolio to saving pot linkage event: {\"portfolioId\": \"40a7957c-d5cf-4321-8bd1-2ddedb32b6a7\", \"accountId\": \"cc96472f-92e9-4e4f-8945-7ef0cc3558e3\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "e52f2f9cd0886873",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:14:59.482",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:14:59.482Z",
            "@version": "1",
            "message": "Received PortfolioLinkedWithAccountEvent: {\"portfolioId\": \"40a7957c-d5cf-4321-8bd1-2ddedb32b6a7\", \"accountId\": \"cc96472f-92e9-4e4f-8945-7ef0cc3558e3\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "e52f2f9cd0886873",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:14:59.003",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:14:59.003Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_portfolio_account_linked_events-7, groupId=deposit_portfolio_account_linked_events] Seeking to offset 82667 for partition deposit.portfolio.account.linked.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:14:58.991",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:14:58.99Z",
            "@version": "1",
            "message": "new status",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "e14b3f50311cb9c9",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:14:58.991",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:14:58.991Z",
            "@version": "1",
            "message": "Produced: {\"accountId\": \"3f97c1ca-bd5a-4a4d-8c17-a16d5711379b\"}",
            "logger_name": "com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "e14b3f50311cb9c9",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:14:58.991",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:14:58.991Z",
            "@version": "1",
            "message": "Saving response under id 3f97c1ca-bd5a-4a4d-8c17-a16d5711379b",
            "logger_name": "com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "e14b3f50311cb9c9",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:14:58.990",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:14:58.99Z",
            "@version": "1",
            "message": "validateTransition",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "e14b3f50311cb9c9",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:14:58.990",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:14:58.99Z",
            "@version": "1",
            "message": "on Exit run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "e14b3f50311cb9c9",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:14:58.990",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:14:58.99Z",
            "@version": "1",
            "message": "onEnter run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "e14b3f50311cb9c9",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:14:58.984",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:14:58.984Z",
            "@version": "1",
            "message": "Received portfolio to saving pot linkage event: {\"portfolioId\": \"0d98c140-0c31-4a2a-886d-88b874a368b9\", \"accountId\": \"3f97c1ca-bd5a-4a4d-8c17-a16d5711379b\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "e14b3f50311cb9c9",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:14:58.980",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:14:58.98Z",
            "@version": "1",
            "message": "Received PortfolioLinkedWithAccountEvent: {\"portfolioId\": \"0d98c140-0c31-4a2a-886d-88b874a368b9\", \"accountId\": \"3f97c1ca-bd5a-4a4d-8c17-a16d5711379b\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "e14b3f50311cb9c9",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:14:58.979",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:14:58.979Z",
            "@version": "1",
            "message": "Error handler threw an exception",
            "logger_name": "org.springframework.kafka.listener.KafkaMessageListenerContainer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Seek to current after exception; nested exception is org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:208)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2719)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2689)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t... 9 common frames omitted\nCaused by: org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\tSuppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: \nError has been observed at the following site(s):\n\t*__checkpoint ⇢ 409 from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses [DefaultWebClient]\nOriginal Stack Trace:\n\t\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\t\tat org.springframework.web.reactive.function.client.DefaultClientResponse.lambda$createException$1(DefaultClientResponse.java:207)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:106)\n\t\tat reactor.core.publisher.FluxOnErrorReturn$ReturnSubscriber.onNext(FluxOnErrorReturn.java:162)\n\t\tat reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:101)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)\n\t\tat reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)\n\t\tat reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)\n\t\tat reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1816)\n\t\tat reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:160)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat reactor.netty.channel.FluxReceive.onInboundComplete(FluxReceive.java:400)\n\t\tat reactor.netty.channel.ChannelOperations.onInboundComplete(ChannelOperations.java:419)\n\t\tat reactor.netty.channel.ChannelOperations.terminate(ChannelOperations.java:473)\n\t\tat reactor.netty.http.client.HttpClientOperations.onInboundNext(HttpClientOperations.java:702)\n\t\tat reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:113)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:336)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:308)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\n\t\tat io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe.epollInReady(AbstractEpollStreamChannel.java:800)\n\t\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\n\t\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\n\t\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\n\t\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\n\t\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n\tSuppressed: java.lang.Exception: #block terminated with an error\n\t\tat reactor.core.publisher.BlockingSingleSubscriber.blockingGet(BlockingSingleSubscriber.java:99)\n\t\tat reactor.core.publisher.Mono.block(Mono.java:1707)\n\t\tat com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl.saveAsyncResult(AsyncResponseServiceImpl.kt:17)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.produceSavingPotCreatedAsyncResult(SavingPotActiveHandler.kt:49)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:39)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:17)\n\t\tat com.arbm.digibank.accounts.common.statemachine.AccountStateMachine.transitionTo(AccountStateMachine.kt:20)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo(SavingPotService.kt:251)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo$default(SavingPotService.kt:247)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.activateSavingPot(SavingPotService.kt:117)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$FastClassBySpringCGLIB$$ece3748f.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.retry.annotation.AnnotationAwareRetryOperationsInterceptor.invoke(AnnotationAwareRetryOperationsInterceptor.java:162)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$EnhancerBySpringCGLIB$$decf1564.activateSavingPot(<generated>)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.handleSavingPotEvent(PortfolioEventProcessor.kt:90)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(PortfolioEventProcessor.kt:47)\n\t\tat jdk.internal.reflect.GeneratedMethodAccessor295.invoke(Unknown Source)\n\t\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\t\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\t\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\t\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$ba1defd9.onMessage(<generated>)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\t\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\t\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:14:58.978",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:14:58.978Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_portfolio_account_linked_events-7, groupId=deposit_portfolio_account_linked_events] Seeking to offset 82666 for partition deposit.portfolio.account.linked.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:14:54.968",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:14:54.967Z",
            "@version": "1",
            "message": "validateTransition",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "20de5184a5d72fb5",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:14:54.968",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:14:54.967Z",
            "@version": "1",
            "message": "on Exit run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "20de5184a5d72fb5",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:14:54.968",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:14:54.967Z",
            "@version": "1",
            "message": "onEnter run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "20de5184a5d72fb5",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:14:54.968",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:14:54.967Z",
            "@version": "1",
            "message": "new status",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "20de5184a5d72fb5",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:14:54.968",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:14:54.968Z",
            "@version": "1",
            "message": "Produced: {\"accountId\": \"3f97c1ca-bd5a-4a4d-8c17-a16d5711379b\"}",
            "logger_name": "com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "20de5184a5d72fb5",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:14:54.968",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:14:54.968Z",
            "@version": "1",
            "message": "Saving response under id 3f97c1ca-bd5a-4a4d-8c17-a16d5711379b",
            "logger_name": "com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "20de5184a5d72fb5",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:14:54.962",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:14:54.962Z",
            "@version": "1",
            "message": "Received portfolio to saving pot linkage event: {\"portfolioId\": \"0d98c140-0c31-4a2a-886d-88b874a368b9\", \"accountId\": \"3f97c1ca-bd5a-4a4d-8c17-a16d5711379b\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "20de5184a5d72fb5",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:14:54.958",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:14:54.958Z",
            "@version": "1",
            "message": "Received PortfolioLinkedWithAccountEvent: {\"portfolioId\": \"0d98c140-0c31-4a2a-886d-88b874a368b9\", \"accountId\": \"3f97c1ca-bd5a-4a4d-8c17-a16d5711379b\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "20de5184a5d72fb5",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:14:54.957",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:14:54.957Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_portfolio_account_linked_events-7, groupId=deposit_portfolio_account_linked_events] Seeking to offset 82666 for partition deposit.portfolio.account.linked.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:14:54.957",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:14:54.957Z",
            "@version": "1",
            "message": "Error handler threw an exception",
            "logger_name": "org.springframework.kafka.listener.KafkaMessageListenerContainer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Seek to current after exception; nested exception is org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:208)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2719)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2689)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t... 9 common frames omitted\nCaused by: org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\tSuppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: \nError has been observed at the following site(s):\n\t*__checkpoint ⇢ 409 from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses [DefaultWebClient]\nOriginal Stack Trace:\n\t\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\t\tat org.springframework.web.reactive.function.client.DefaultClientResponse.lambda$createException$1(DefaultClientResponse.java:207)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:106)\n\t\tat reactor.core.publisher.FluxOnErrorReturn$ReturnSubscriber.onNext(FluxOnErrorReturn.java:162)\n\t\tat reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:101)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)\n\t\tat reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)\n\t\tat reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)\n\t\tat reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1816)\n\t\tat reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:160)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat reactor.netty.channel.FluxReceive.onInboundComplete(FluxReceive.java:400)\n\t\tat reactor.netty.channel.ChannelOperations.onInboundComplete(ChannelOperations.java:419)\n\t\tat reactor.netty.channel.ChannelOperations.terminate(ChannelOperations.java:473)\n\t\tat reactor.netty.http.client.HttpClientOperations.onInboundNext(HttpClientOperations.java:702)\n\t\tat reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:113)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:336)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:308)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\n\t\tat io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe.epollInReady(AbstractEpollStreamChannel.java:800)\n\t\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\n\t\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\n\t\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\n\t\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\n\t\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n\tSuppressed: java.lang.Exception: #block terminated with an error\n\t\tat reactor.core.publisher.BlockingSingleSubscriber.blockingGet(BlockingSingleSubscriber.java:99)\n\t\tat reactor.core.publisher.Mono.block(Mono.java:1707)\n\t\tat com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl.saveAsyncResult(AsyncResponseServiceImpl.kt:17)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.produceSavingPotCreatedAsyncResult(SavingPotActiveHandler.kt:49)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:39)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:17)\n\t\tat com.arbm.digibank.accounts.common.statemachine.AccountStateMachine.transitionTo(AccountStateMachine.kt:20)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo(SavingPotService.kt:251)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo$default(SavingPotService.kt:247)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.activateSavingPot(SavingPotService.kt:117)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$FastClassBySpringCGLIB$$ece3748f.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.retry.annotation.AnnotationAwareRetryOperationsInterceptor.invoke(AnnotationAwareRetryOperationsInterceptor.java:162)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$EnhancerBySpringCGLIB$$decf1564.activateSavingPot(<generated>)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.handleSavingPotEvent(PortfolioEventProcessor.kt:90)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(PortfolioEventProcessor.kt:47)\n\t\tat jdk.internal.reflect.GeneratedMethodAccessor295.invoke(Unknown Source)\n\t\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\t\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\t\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\t\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$ba1defd9.onMessage(<generated>)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\t\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\t\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:14:52.948",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:14:52.948Z",
            "@version": "1",
            "message": "validateTransition",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "52e95efc15a62c52",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:14:52.948",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:14:52.948Z",
            "@version": "1",
            "message": "on Exit run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "52e95efc15a62c52",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:14:52.948",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:14:52.948Z",
            "@version": "1",
            "message": "onEnter run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "52e95efc15a62c52",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:14:52.948",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:14:52.948Z",
            "@version": "1",
            "message": "new status",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "52e95efc15a62c52",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:14:52.948",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:14:52.948Z",
            "@version": "1",
            "message": "Produced: {\"accountId\": \"3f97c1ca-bd5a-4a4d-8c17-a16d5711379b\"}",
            "logger_name": "com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "52e95efc15a62c52",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:14:52.948",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:14:52.948Z",
            "@version": "1",
            "message": "Saving response under id 3f97c1ca-bd5a-4a4d-8c17-a16d5711379b",
            "logger_name": "com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "52e95efc15a62c52",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:14:52.943",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:14:52.943Z",
            "@version": "1",
            "message": "Received portfolio to saving pot linkage event: {\"portfolioId\": \"0d98c140-0c31-4a2a-886d-88b874a368b9\", \"accountId\": \"3f97c1ca-bd5a-4a4d-8c17-a16d5711379b\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "52e95efc15a62c52",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:14:52.940",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:14:52.94Z",
            "@version": "1",
            "message": "Received PortfolioLinkedWithAccountEvent: {\"portfolioId\": \"0d98c140-0c31-4a2a-886d-88b874a368b9\", \"accountId\": \"3f97c1ca-bd5a-4a4d-8c17-a16d5711379b\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "52e95efc15a62c52",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:14:52.460",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:14:52.46Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_portfolio_account_linked_events-7, groupId=deposit_portfolio_account_linked_events] Seeking to offset 82666 for partition deposit.portfolio.account.linked.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:14:52.448",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:14:52.448Z",
            "@version": "1",
            "message": "validateTransition",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "ca60b9f1171004d0",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:14:52.448",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:14:52.448Z",
            "@version": "1",
            "message": "on Exit run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "ca60b9f1171004d0",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:14:52.448",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:14:52.448Z",
            "@version": "1",
            "message": "onEnter run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "ca60b9f1171004d0",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:14:52.448",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:14:52.448Z",
            "@version": "1",
            "message": "new status",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "ca60b9f1171004d0",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:14:52.448",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:14:52.448Z",
            "@version": "1",
            "message": "Produced: {\"accountId\": \"6a543854-abc3-4604-a4a6-3ce3ed17e540\"}",
            "logger_name": "com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "ca60b9f1171004d0",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:14:52.448",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:14:52.448Z",
            "@version": "1",
            "message": "Saving response under id 6a543854-abc3-4604-a4a6-3ce3ed17e540",
            "logger_name": "com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "ca60b9f1171004d0",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:14:52.442",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:14:52.442Z",
            "@version": "1",
            "message": "Received portfolio to saving pot linkage event: {\"portfolioId\": \"6cb9a02d-02c8-ae76-9781-3d96faec8f9d\", \"accountId\": \"6a543854-abc3-4604-a4a6-3ce3ed17e540\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "ca60b9f1171004d0",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:14:52.439",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:14:52.438Z",
            "@version": "1",
            "message": "Received PortfolioLinkedWithAccountEvent: {\"portfolioId\": \"6cb9a02d-02c8-ae76-9781-3d96faec8f9d\", \"accountId\": \"6a543854-abc3-4604-a4a6-3ce3ed17e540\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "ca60b9f1171004d0",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:14:52.437",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:14:52.436Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_portfolio_account_linked_events-7, groupId=deposit_portfolio_account_linked_events] Seeking to offset 82665 for partition deposit.portfolio.account.linked.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:14:52.437",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:14:52.437Z",
            "@version": "1",
            "message": "Error handler threw an exception",
            "logger_name": "org.springframework.kafka.listener.KafkaMessageListenerContainer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Seek to current after exception; nested exception is org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:208)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2719)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2689)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t... 9 common frames omitted\nCaused by: org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\tSuppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: \nError has been observed at the following site(s):\n\t*__checkpoint ⇢ 409 from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses [DefaultWebClient]\nOriginal Stack Trace:\n\t\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\t\tat org.springframework.web.reactive.function.client.DefaultClientResponse.lambda$createException$1(DefaultClientResponse.java:207)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:106)\n\t\tat reactor.core.publisher.FluxOnErrorReturn$ReturnSubscriber.onNext(FluxOnErrorReturn.java:162)\n\t\tat reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:101)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)\n\t\tat reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)\n\t\tat reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)\n\t\tat reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1816)\n\t\tat reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:160)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat reactor.netty.channel.FluxReceive.onInboundComplete(FluxReceive.java:400)\n\t\tat reactor.netty.channel.ChannelOperations.onInboundComplete(ChannelOperations.java:419)\n\t\tat reactor.netty.channel.ChannelOperations.terminate(ChannelOperations.java:473)\n\t\tat reactor.netty.http.client.HttpClientOperations.onInboundNext(HttpClientOperations.java:702)\n\t\tat reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:113)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:336)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:308)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\n\t\tat io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe.epollInReady(AbstractEpollStreamChannel.java:800)\n\t\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\n\t\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\n\t\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\n\t\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\n\t\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n\tSuppressed: java.lang.Exception: #block terminated with an error\n\t\tat reactor.core.publisher.BlockingSingleSubscriber.blockingGet(BlockingSingleSubscriber.java:99)\n\t\tat reactor.core.publisher.Mono.block(Mono.java:1707)\n\t\tat com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl.saveAsyncResult(AsyncResponseServiceImpl.kt:17)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.produceSavingPotCreatedAsyncResult(SavingPotActiveHandler.kt:49)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:39)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:17)\n\t\tat com.arbm.digibank.accounts.common.statemachine.AccountStateMachine.transitionTo(AccountStateMachine.kt:20)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo(SavingPotService.kt:251)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo$default(SavingPotService.kt:247)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.activateSavingPot(SavingPotService.kt:117)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$FastClassBySpringCGLIB$$ece3748f.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.retry.annotation.AnnotationAwareRetryOperationsInterceptor.invoke(AnnotationAwareRetryOperationsInterceptor.java:162)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$EnhancerBySpringCGLIB$$decf1564.activateSavingPot(<generated>)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.handleSavingPotEvent(PortfolioEventProcessor.kt:90)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(PortfolioEventProcessor.kt:47)\n\t\tat jdk.internal.reflect.GeneratedMethodAccessor295.invoke(Unknown Source)\n\t\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\t\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\t\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\t\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$ba1defd9.onMessage(<generated>)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\t\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\t\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:14:52.188",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:14:52.188Z",
            "@version": "1",
            "message": "Request to retrieve account by following accountNumber: 912010110421217",
            "logger_name": "com.arbm.digibank.accounts.savingaccount.controller.SavingAccountControllerV1",
            "thread_name": "http-nio-8080-exec-2",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a00a7c48c2ccae4093c93002b340bf",
            "spanId": "9e0d72b253f9b3bd",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:14:49.391",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:14:49.391Z",
            "@version": "1",
            "message": "Request to retrieve account by following accountNumber: 912010110421217",
            "logger_name": "com.arbm.digibank.accounts.savingaccount.controller.SavingAccountControllerV1",
            "thread_name": "http-nio-8080-exec-4",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a00a794dce6c5731a51cb776434fb1",
            "spanId": "fa0681ca54b620ec",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:14:48.425",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:14:48.425Z",
            "@version": "1",
            "message": "Saving response under id 6a543854-abc3-4604-a4a6-3ce3ed17e540",
            "logger_name": "com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "5fbdadcac4e94090",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:14:48.425",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:14:48.425Z",
            "@version": "1",
            "message": "Produced: {\"accountId\": \"6a543854-abc3-4604-a4a6-3ce3ed17e540\"}",
            "logger_name": "com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "5fbdadcac4e94090",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:14:48.425",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:14:48.425Z",
            "@version": "1",
            "message": "new status",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "5fbdadcac4e94090",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:14:48.425",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:14:48.425Z",
            "@version": "1",
            "message": "onEnter run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "5fbdadcac4e94090",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:14:48.425",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:14:48.425Z",
            "@version": "1",
            "message": "on Exit run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "5fbdadcac4e94090",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:14:48.425",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:14:48.425Z",
            "@version": "1",
            "message": "validateTransition",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "5fbdadcac4e94090",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:14:48.419",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:14:48.419Z",
            "@version": "1",
            "message": "Received portfolio to saving pot linkage event: {\"portfolioId\": \"6cb9a02d-02c8-ae76-9781-3d96faec8f9d\", \"accountId\": \"6a543854-abc3-4604-a4a6-3ce3ed17e540\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "5fbdadcac4e94090",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:14:48.415",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:14:48.415Z",
            "@version": "1",
            "message": "Received PortfolioLinkedWithAccountEvent: {\"portfolioId\": \"6cb9a02d-02c8-ae76-9781-3d96faec8f9d\", \"accountId\": \"6a543854-abc3-4604-a4a6-3ce3ed17e540\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "5fbdadcac4e94090",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:14:48.414",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:14:48.414Z",
            "@version": "1",
            "message": "Error handler threw an exception",
            "logger_name": "org.springframework.kafka.listener.KafkaMessageListenerContainer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Seek to current after exception; nested exception is org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:208)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2719)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2689)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t... 9 common frames omitted\nCaused by: org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\tSuppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: \nError has been observed at the following site(s):\n\t*__checkpoint ⇢ 409 from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses [DefaultWebClient]\nOriginal Stack Trace:\n\t\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\t\tat org.springframework.web.reactive.function.client.DefaultClientResponse.lambda$createException$1(DefaultClientResponse.java:207)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:106)\n\t\tat reactor.core.publisher.FluxOnErrorReturn$ReturnSubscriber.onNext(FluxOnErrorReturn.java:162)\n\t\tat reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:101)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)\n\t\tat reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)\n\t\tat reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)\n\t\tat reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1816)\n\t\tat reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:160)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat reactor.netty.channel.FluxReceive.onInboundComplete(FluxReceive.java:400)\n\t\tat reactor.netty.channel.ChannelOperations.onInboundComplete(ChannelOperations.java:419)\n\t\tat reactor.netty.channel.ChannelOperations.terminate(ChannelOperations.java:473)\n\t\tat reactor.netty.http.client.HttpClientOperations.onInboundNext(HttpClientOperations.java:702)\n\t\tat reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:113)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:336)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:308)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\n\t\tat io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe.epollInReady(AbstractEpollStreamChannel.java:800)\n\t\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\n\t\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\n\t\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\n\t\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\n\t\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n\tSuppressed: java.lang.Exception: #block terminated with an error\n\t\tat reactor.core.publisher.BlockingSingleSubscriber.blockingGet(BlockingSingleSubscriber.java:99)\n\t\tat reactor.core.publisher.Mono.block(Mono.java:1707)\n\t\tat com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl.saveAsyncResult(AsyncResponseServiceImpl.kt:17)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.produceSavingPotCreatedAsyncResult(SavingPotActiveHandler.kt:49)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:39)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:17)\n\t\tat com.arbm.digibank.accounts.common.statemachine.AccountStateMachine.transitionTo(AccountStateMachine.kt:20)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo(SavingPotService.kt:251)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo$default(SavingPotService.kt:247)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.activateSavingPot(SavingPotService.kt:117)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$FastClassBySpringCGLIB$$ece3748f.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.retry.annotation.AnnotationAwareRetryOperationsInterceptor.invoke(AnnotationAwareRetryOperationsInterceptor.java:162)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$EnhancerBySpringCGLIB$$decf1564.activateSavingPot(<generated>)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.handleSavingPotEvent(PortfolioEventProcessor.kt:90)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(PortfolioEventProcessor.kt:47)\n\t\tat jdk.internal.reflect.GeneratedMethodAccessor295.invoke(Unknown Source)\n\t\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\t\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\t\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\t\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$ba1defd9.onMessage(<generated>)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\t\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\t\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:14:48.414",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:14:48.413Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_portfolio_account_linked_events-7, groupId=deposit_portfolio_account_linked_events] Seeking to offset 82665 for partition deposit.portfolio.account.linked.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:14:46.406",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:14:46.406Z",
            "@version": "1",
            "message": "Saving response under id 6a543854-abc3-4604-a4a6-3ce3ed17e540",
            "logger_name": "com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "0cdc80043f7418d0",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:14:46.406",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:14:46.406Z",
            "@version": "1",
            "message": "Produced: {\"accountId\": \"6a543854-abc3-4604-a4a6-3ce3ed17e540\"}",
            "logger_name": "com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "0cdc80043f7418d0",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:14:46.406",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:14:46.405Z",
            "@version": "1",
            "message": "new status",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "0cdc80043f7418d0",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:14:46.406",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:14:46.405Z",
            "@version": "1",
            "message": "onEnter run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "0cdc80043f7418d0",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:14:46.406",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:14:46.405Z",
            "@version": "1",
            "message": "on Exit run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "0cdc80043f7418d0",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:14:46.406",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:14:46.405Z",
            "@version": "1",
            "message": "validateTransition",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "0cdc80043f7418d0",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:14:46.401",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:14:46.4Z",
            "@version": "1",
            "message": "Received portfolio to saving pot linkage event: {\"portfolioId\": \"6cb9a02d-02c8-ae76-9781-3d96faec8f9d\", \"accountId\": \"6a543854-abc3-4604-a4a6-3ce3ed17e540\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "0cdc80043f7418d0",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:14:46.398",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:14:46.397Z",
            "@version": "1",
            "message": "Received PortfolioLinkedWithAccountEvent: {\"portfolioId\": \"6cb9a02d-02c8-ae76-9781-3d96faec8f9d\", \"accountId\": \"6a543854-abc3-4604-a4a6-3ce3ed17e540\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "0cdc80043f7418d0",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:14:45.945",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:14:45.944Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_portfolio_account_linked_events-7, groupId=deposit_portfolio_account_linked_events] Seeking to offset 82665 for partition deposit.portfolio.account.linked.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:14:45.905",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:14:45.905Z",
            "@version": "1",
            "message": "Saving response under id e8997912-4343-4217-a30f-267737c20f84",
            "logger_name": "com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "e790c612ea06c897",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:14:45.905",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:14:45.905Z",
            "@version": "1",
            "message": "Produced: {\"accountId\": \"e8997912-4343-4217-a30f-267737c20f84\"}",
            "logger_name": "com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "e790c612ea06c897",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:14:45.905",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:14:45.905Z",
            "@version": "1",
            "message": "new status",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "e790c612ea06c897",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:14:45.905",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:14:45.905Z",
            "@version": "1",
            "message": "onEnter run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "e790c612ea06c897",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:14:45.905",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:14:45.905Z",
            "@version": "1",
            "message": "on Exit run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "e790c612ea06c897",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:14:45.905",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:14:45.905Z",
            "@version": "1",
            "message": "validateTransition",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "e790c612ea06c897",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:14:45.900",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:14:45.899Z",
            "@version": "1",
            "message": "Received portfolio to saving pot linkage event: {\"portfolioId\": \"f72d73a7-3ca6-4b5a-a13b-44700349aec9\", \"accountId\": \"e8997912-4343-4217-a30f-267737c20f84\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "e790c612ea06c897",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:14:45.896",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:14:45.896Z",
            "@version": "1",
            "message": "Received PortfolioLinkedWithAccountEvent: {\"portfolioId\": \"f72d73a7-3ca6-4b5a-a13b-44700349aec9\", \"accountId\": \"e8997912-4343-4217-a30f-267737c20f84\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "e790c612ea06c897",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:14:45.895",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:14:45.895Z",
            "@version": "1",
            "message": "Error handler threw an exception",
            "logger_name": "org.springframework.kafka.listener.KafkaMessageListenerContainer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Seek to current after exception; nested exception is org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:208)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2719)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2689)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t... 9 common frames omitted\nCaused by: org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\tSuppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: \nError has been observed at the following site(s):\n\t*__checkpoint ⇢ 409 from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses [DefaultWebClient]\nOriginal Stack Trace:\n\t\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\t\tat org.springframework.web.reactive.function.client.DefaultClientResponse.lambda$createException$1(DefaultClientResponse.java:207)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:106)\n\t\tat reactor.core.publisher.FluxOnErrorReturn$ReturnSubscriber.onNext(FluxOnErrorReturn.java:162)\n\t\tat reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:101)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)\n\t\tat reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)\n\t\tat reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)\n\t\tat reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1816)\n\t\tat reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:160)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat reactor.netty.channel.FluxReceive.onInboundComplete(FluxReceive.java:400)\n\t\tat reactor.netty.channel.ChannelOperations.onInboundComplete(ChannelOperations.java:419)\n\t\tat reactor.netty.channel.ChannelOperations.terminate(ChannelOperations.java:473)\n\t\tat reactor.netty.http.client.HttpClientOperations.onInboundNext(HttpClientOperations.java:702)\n\t\tat reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:113)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:336)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:308)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\n\t\tat io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe.epollInReady(AbstractEpollStreamChannel.java:800)\n\t\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\n\t\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\n\t\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\n\t\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\n\t\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n\tSuppressed: java.lang.Exception: #block terminated with an error\n\t\tat reactor.core.publisher.BlockingSingleSubscriber.blockingGet(BlockingSingleSubscriber.java:99)\n\t\tat reactor.core.publisher.Mono.block(Mono.java:1707)\n\t\tat com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl.saveAsyncResult(AsyncResponseServiceImpl.kt:17)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.produceSavingPotCreatedAsyncResult(SavingPotActiveHandler.kt:49)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:39)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:17)\n\t\tat com.arbm.digibank.accounts.common.statemachine.AccountStateMachine.transitionTo(AccountStateMachine.kt:20)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo(SavingPotService.kt:251)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo$default(SavingPotService.kt:247)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.activateSavingPot(SavingPotService.kt:117)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$FastClassBySpringCGLIB$$ece3748f.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.retry.annotation.AnnotationAwareRetryOperationsInterceptor.invoke(AnnotationAwareRetryOperationsInterceptor.java:162)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$EnhancerBySpringCGLIB$$decf1564.activateSavingPot(<generated>)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.handleSavingPotEvent(PortfolioEventProcessor.kt:90)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(PortfolioEventProcessor.kt:47)\n\t\tat jdk.internal.reflect.GeneratedMethodAccessor295.invoke(Unknown Source)\n\t\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\t\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\t\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\t\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$ba1defd9.onMessage(<generated>)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\t\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\t\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:14:45.895",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:14:45.895Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_portfolio_account_linked_events-7, groupId=deposit_portfolio_account_linked_events] Seeking to offset 82664 for partition deposit.portfolio.account.linked.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:14:44.000",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:14:44Z",
            "@version": "1",
            "message": "Request to retrieve account by following accountNumber: 912010110421217",
            "logger_name": "com.arbm.digibank.accounts.savingaccount.controller.SavingAccountControllerV1",
            "thread_name": "http-nio-8080-exec-6",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a00a73530d0ea53e6ce8935d1267e4",
            "spanId": "6e2b99004e150ca2",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:14:41.884",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:14:41.883Z",
            "@version": "1",
            "message": "on Exit run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "0ea056e2d7a744f5",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:14:41.884",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:14:41.883Z",
            "@version": "1",
            "message": "onEnter run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "0ea056e2d7a744f5",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:14:41.884",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:14:41.883Z",
            "@version": "1",
            "message": "new status",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "0ea056e2d7a744f5",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:14:41.884",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:14:41.884Z",
            "@version": "1",
            "message": "Produced: {\"accountId\": \"e8997912-4343-4217-a30f-267737c20f84\"}",
            "logger_name": "com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "0ea056e2d7a744f5",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:14:41.884",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:14:41.884Z",
            "@version": "1",
            "message": "Saving response under id e8997912-4343-4217-a30f-267737c20f84",
            "logger_name": "com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "0ea056e2d7a744f5",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:14:41.883",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:14:41.883Z",
            "@version": "1",
            "message": "validateTransition",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "0ea056e2d7a744f5",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:14:41.878",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:14:41.878Z",
            "@version": "1",
            "message": "Received portfolio to saving pot linkage event: {\"portfolioId\": \"f72d73a7-3ca6-4b5a-a13b-44700349aec9\", \"accountId\": \"e8997912-4343-4217-a30f-267737c20f84\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "0ea056e2d7a744f5",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:14:41.874",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:14:41.874Z",
            "@version": "1",
            "message": "Received PortfolioLinkedWithAccountEvent: {\"portfolioId\": \"f72d73a7-3ca6-4b5a-a13b-44700349aec9\", \"accountId\": \"e8997912-4343-4217-a30f-267737c20f84\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "0ea056e2d7a744f5",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:14:41.873",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:14:41.873Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_portfolio_account_linked_events-7, groupId=deposit_portfolio_account_linked_events] Seeking to offset 82664 for partition deposit.portfolio.account.linked.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:14:41.873",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:14:41.873Z",
            "@version": "1",
            "message": "Error handler threw an exception",
            "logger_name": "org.springframework.kafka.listener.KafkaMessageListenerContainer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Seek to current after exception; nested exception is org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:208)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2719)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2689)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t... 9 common frames omitted\nCaused by: org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\tSuppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: \nError has been observed at the following site(s):\n\t*__checkpoint ⇢ 409 from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses [DefaultWebClient]\nOriginal Stack Trace:\n\t\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\t\tat org.springframework.web.reactive.function.client.DefaultClientResponse.lambda$createException$1(DefaultClientResponse.java:207)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:106)\n\t\tat reactor.core.publisher.FluxOnErrorReturn$ReturnSubscriber.onNext(FluxOnErrorReturn.java:162)\n\t\tat reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:101)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)\n\t\tat reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)\n\t\tat reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)\n\t\tat reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1816)\n\t\tat reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:160)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat reactor.netty.channel.FluxReceive.onInboundComplete(FluxReceive.java:400)\n\t\tat reactor.netty.channel.ChannelOperations.onInboundComplete(ChannelOperations.java:419)\n\t\tat reactor.netty.channel.ChannelOperations.terminate(ChannelOperations.java:473)\n\t\tat reactor.netty.http.client.HttpClientOperations.onInboundNext(HttpClientOperations.java:702)\n\t\tat reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:113)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:336)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:308)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\n\t\tat io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe.epollInReady(AbstractEpollStreamChannel.java:800)\n\t\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\n\t\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\n\t\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\n\t\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\n\t\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n\tSuppressed: java.lang.Exception: #block terminated with an error\n\t\tat reactor.core.publisher.BlockingSingleSubscriber.blockingGet(BlockingSingleSubscriber.java:99)\n\t\tat reactor.core.publisher.Mono.block(Mono.java:1707)\n\t\tat com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl.saveAsyncResult(AsyncResponseServiceImpl.kt:17)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.produceSavingPotCreatedAsyncResult(SavingPotActiveHandler.kt:49)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:39)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:17)\n\t\tat com.arbm.digibank.accounts.common.statemachine.AccountStateMachine.transitionTo(AccountStateMachine.kt:20)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo(SavingPotService.kt:251)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo$default(SavingPotService.kt:247)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.activateSavingPot(SavingPotService.kt:117)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$FastClassBySpringCGLIB$$ece3748f.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.retry.annotation.AnnotationAwareRetryOperationsInterceptor.invoke(AnnotationAwareRetryOperationsInterceptor.java:162)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$EnhancerBySpringCGLIB$$decf1564.activateSavingPot(<generated>)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.handleSavingPotEvent(PortfolioEventProcessor.kt:90)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(PortfolioEventProcessor.kt:47)\n\t\tat jdk.internal.reflect.GeneratedMethodAccessor295.invoke(Unknown Source)\n\t\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\t\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\t\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\t\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$ba1defd9.onMessage(<generated>)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\t\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\t\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:14:39.864",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:14:39.864Z",
            "@version": "1",
            "message": "validateTransition",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "a5cab61baac7e1ab",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:14:39.864",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:14:39.864Z",
            "@version": "1",
            "message": "on Exit run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "a5cab61baac7e1ab",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:14:39.864",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:14:39.864Z",
            "@version": "1",
            "message": "onEnter run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "a5cab61baac7e1ab",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:14:39.864",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:14:39.864Z",
            "@version": "1",
            "message": "new status",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "a5cab61baac7e1ab",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:14:39.864",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:14:39.864Z",
            "@version": "1",
            "message": "Produced: {\"accountId\": \"e8997912-4343-4217-a30f-267737c20f84\"}",
            "logger_name": "com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "a5cab61baac7e1ab",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:14:39.864",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:14:39.864Z",
            "@version": "1",
            "message": "Saving response under id e8997912-4343-4217-a30f-267737c20f84",
            "logger_name": "com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "a5cab61baac7e1ab",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:14:39.859",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:14:39.859Z",
            "@version": "1",
            "message": "Received portfolio to saving pot linkage event: {\"portfolioId\": \"f72d73a7-3ca6-4b5a-a13b-44700349aec9\", \"accountId\": \"e8997912-4343-4217-a30f-267737c20f84\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "a5cab61baac7e1ab",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:14:39.856",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:14:39.856Z",
            "@version": "1",
            "message": "Received PortfolioLinkedWithAccountEvent: {\"portfolioId\": \"f72d73a7-3ca6-4b5a-a13b-44700349aec9\", \"accountId\": \"e8997912-4343-4217-a30f-267737c20f84\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "a5cab61baac7e1ab",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:14:39.377",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:14:39.376Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_portfolio_account_linked_events-7, groupId=deposit_portfolio_account_linked_events] Seeking to offset 82664 for partition deposit.portfolio.account.linked.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:14:39.364",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:14:39.364Z",
            "@version": "1",
            "message": "Saving response under id 272f2b99-38d9-45be-ba67-d5fb9d9f88c0",
            "logger_name": "com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "74776d24f2d55325",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:14:39.364",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:14:39.364Z",
            "@version": "1",
            "message": "Produced: {\"accountId\": \"272f2b99-38d9-45be-ba67-d5fb9d9f88c0\"}",
            "logger_name": "com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "74776d24f2d55325",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:14:39.364",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:14:39.364Z",
            "@version": "1",
            "message": "new status",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "74776d24f2d55325",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:14:39.364",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:14:39.364Z",
            "@version": "1",
            "message": "onEnter run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "74776d24f2d55325",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:14:39.364",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:14:39.364Z",
            "@version": "1",
            "message": "on Exit run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "74776d24f2d55325",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:14:39.364",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:14:39.364Z",
            "@version": "1",
            "message": "validateTransition",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "74776d24f2d55325",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:14:39.358",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:14:39.358Z",
            "@version": "1",
            "message": "Received portfolio to saving pot linkage event: {\"portfolioId\": \"23bcdb37-b50e-4186-80e3-cca38d138d32\", \"accountId\": \"272f2b99-38d9-45be-ba67-d5fb9d9f88c0\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "74776d24f2d55325",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:14:39.355",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:14:39.355Z",
            "@version": "1",
            "message": "Received PortfolioLinkedWithAccountEvent: {\"portfolioId\": \"23bcdb37-b50e-4186-80e3-cca38d138d32\", \"accountId\": \"272f2b99-38d9-45be-ba67-d5fb9d9f88c0\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "74776d24f2d55325",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:14:39.354",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:14:39.353Z",
            "@version": "1",
            "message": "Error handler threw an exception",
            "logger_name": "org.springframework.kafka.listener.KafkaMessageListenerContainer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Seek to current after exception; nested exception is org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:208)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2719)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2689)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t... 9 common frames omitted\nCaused by: org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\tSuppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: \nError has been observed at the following site(s):\n\t*__checkpoint ⇢ 409 from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses [DefaultWebClient]\nOriginal Stack Trace:\n\t\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\t\tat org.springframework.web.reactive.function.client.DefaultClientResponse.lambda$createException$1(DefaultClientResponse.java:207)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:106)\n\t\tat reactor.core.publisher.FluxOnErrorReturn$ReturnSubscriber.onNext(FluxOnErrorReturn.java:162)\n\t\tat reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:101)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)\n\t\tat reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)\n\t\tat reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)\n\t\tat reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1816)\n\t\tat reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:160)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat reactor.netty.channel.FluxReceive.onInboundComplete(FluxReceive.java:400)\n\t\tat reactor.netty.channel.ChannelOperations.onInboundComplete(ChannelOperations.java:419)\n\t\tat reactor.netty.channel.ChannelOperations.terminate(ChannelOperations.java:473)\n\t\tat reactor.netty.http.client.HttpClientOperations.onInboundNext(HttpClientOperations.java:702)\n\t\tat reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:113)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:336)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:308)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\n\t\tat io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe.epollInReady(AbstractEpollStreamChannel.java:800)\n\t\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\n\t\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\n\t\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\n\t\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\n\t\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n\tSuppressed: java.lang.Exception: #block terminated with an error\n\t\tat reactor.core.publisher.BlockingSingleSubscriber.blockingGet(BlockingSingleSubscriber.java:99)\n\t\tat reactor.core.publisher.Mono.block(Mono.java:1707)\n\t\tat com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl.saveAsyncResult(AsyncResponseServiceImpl.kt:17)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.produceSavingPotCreatedAsyncResult(SavingPotActiveHandler.kt:49)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:39)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:17)\n\t\tat com.arbm.digibank.accounts.common.statemachine.AccountStateMachine.transitionTo(AccountStateMachine.kt:20)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo(SavingPotService.kt:251)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo$default(SavingPotService.kt:247)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.activateSavingPot(SavingPotService.kt:117)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$FastClassBySpringCGLIB$$ece3748f.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.retry.annotation.AnnotationAwareRetryOperationsInterceptor.invoke(AnnotationAwareRetryOperationsInterceptor.java:162)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$EnhancerBySpringCGLIB$$decf1564.activateSavingPot(<generated>)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.handleSavingPotEvent(PortfolioEventProcessor.kt:90)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(PortfolioEventProcessor.kt:47)\n\t\tat jdk.internal.reflect.GeneratedMethodAccessor295.invoke(Unknown Source)\n\t\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\t\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\t\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\t\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$ba1defd9.onMessage(<generated>)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\t\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\t\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:14:39.352",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:14:39.351Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_portfolio_account_linked_events-7, groupId=deposit_portfolio_account_linked_events] Seeking to offset 82663 for partition deposit.portfolio.account.linked.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:14:35.340",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:14:35.34Z",
            "@version": "1",
            "message": "validateTransition",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "3199f5342833ba0d",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:14:35.340",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:14:35.34Z",
            "@version": "1",
            "message": "Saving response under id 272f2b99-38d9-45be-ba67-d5fb9d9f88c0",
            "logger_name": "com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "3199f5342833ba0d",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:14:35.340",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:14:35.34Z",
            "@version": "1",
            "message": "Produced: {\"accountId\": \"272f2b99-38d9-45be-ba67-d5fb9d9f88c0\"}",
            "logger_name": "com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "3199f5342833ba0d",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:14:35.340",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:14:35.34Z",
            "@version": "1",
            "message": "new status",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "3199f5342833ba0d",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:14:35.340",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:14:35.34Z",
            "@version": "1",
            "message": "onEnter run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "3199f5342833ba0d",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:14:35.340",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:14:35.34Z",
            "@version": "1",
            "message": "on Exit run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "3199f5342833ba0d",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:14:35.334",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:14:35.333Z",
            "@version": "1",
            "message": "Received portfolio to saving pot linkage event: {\"portfolioId\": \"23bcdb37-b50e-4186-80e3-cca38d138d32\", \"accountId\": \"272f2b99-38d9-45be-ba67-d5fb9d9f88c0\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "3199f5342833ba0d",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:14:35.329",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:14:35.329Z",
            "@version": "1",
            "message": "Received PortfolioLinkedWithAccountEvent: {\"portfolioId\": \"23bcdb37-b50e-4186-80e3-cca38d138d32\", \"accountId\": \"272f2b99-38d9-45be-ba67-d5fb9d9f88c0\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "3199f5342833ba0d",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:14:35.328",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:14:35.327Z",
            "@version": "1",
            "message": "Error handler threw an exception",
            "logger_name": "org.springframework.kafka.listener.KafkaMessageListenerContainer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Seek to current after exception; nested exception is org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:208)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2719)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2689)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t... 9 common frames omitted\nCaused by: org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\tSuppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: \nError has been observed at the following site(s):\n\t*__checkpoint ⇢ 409 from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses [DefaultWebClient]\nOriginal Stack Trace:\n\t\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\t\tat org.springframework.web.reactive.function.client.DefaultClientResponse.lambda$createException$1(DefaultClientResponse.java:207)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:106)\n\t\tat reactor.core.publisher.FluxOnErrorReturn$ReturnSubscriber.onNext(FluxOnErrorReturn.java:162)\n\t\tat reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:101)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)\n\t\tat reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)\n\t\tat reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)\n\t\tat reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1816)\n\t\tat reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:160)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat reactor.netty.channel.FluxReceive.onInboundComplete(FluxReceive.java:400)\n\t\tat reactor.netty.channel.ChannelOperations.onInboundComplete(ChannelOperations.java:419)\n\t\tat reactor.netty.channel.ChannelOperations.terminate(ChannelOperations.java:473)\n\t\tat reactor.netty.http.client.HttpClientOperations.onInboundNext(HttpClientOperations.java:702)\n\t\tat reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:113)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:336)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:308)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\n\t\tat io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe.epollInReady(AbstractEpollStreamChannel.java:800)\n\t\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\n\t\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\n\t\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\n\t\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\n\t\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n\tSuppressed: java.lang.Exception: #block terminated with an error\n\t\tat reactor.core.publisher.BlockingSingleSubscriber.blockingGet(BlockingSingleSubscriber.java:99)\n\t\tat reactor.core.publisher.Mono.block(Mono.java:1707)\n\t\tat com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl.saveAsyncResult(AsyncResponseServiceImpl.kt:17)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.produceSavingPotCreatedAsyncResult(SavingPotActiveHandler.kt:49)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:39)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:17)\n\t\tat com.arbm.digibank.accounts.common.statemachine.AccountStateMachine.transitionTo(AccountStateMachine.kt:20)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo(SavingPotService.kt:251)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo$default(SavingPotService.kt:247)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.activateSavingPot(SavingPotService.kt:117)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$FastClassBySpringCGLIB$$ece3748f.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.retry.annotation.AnnotationAwareRetryOperationsInterceptor.invoke(AnnotationAwareRetryOperationsInterceptor.java:162)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$EnhancerBySpringCGLIB$$decf1564.activateSavingPot(<generated>)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.handleSavingPotEvent(PortfolioEventProcessor.kt:90)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(PortfolioEventProcessor.kt:47)\n\t\tat jdk.internal.reflect.GeneratedMethodAccessor295.invoke(Unknown Source)\n\t\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\t\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\t\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\t\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$ba1defd9.onMessage(<generated>)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\t\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\t\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:14:35.327",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:14:35.326Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_portfolio_account_linked_events-7, groupId=deposit_portfolio_account_linked_events] Seeking to offset 82663 for partition deposit.portfolio.account.linked.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:14:33.318",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:14:33.318Z",
            "@version": "1",
            "message": "validateTransition",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "9e58520524b4d0cb",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:14:33.318",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:14:33.318Z",
            "@version": "1",
            "message": "on Exit run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "9e58520524b4d0cb",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:14:33.318",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:14:33.318Z",
            "@version": "1",
            "message": "onEnter run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "9e58520524b4d0cb",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:14:33.318",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:14:33.318Z",
            "@version": "1",
            "message": "new status",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "9e58520524b4d0cb",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:14:33.318",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:14:33.318Z",
            "@version": "1",
            "message": "Produced: {\"accountId\": \"272f2b99-38d9-45be-ba67-d5fb9d9f88c0\"}",
            "logger_name": "com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "9e58520524b4d0cb",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:14:33.318",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:14:33.318Z",
            "@version": "1",
            "message": "Saving response under id 272f2b99-38d9-45be-ba67-d5fb9d9f88c0",
            "logger_name": "com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "9e58520524b4d0cb",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:14:33.312",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:14:33.312Z",
            "@version": "1",
            "message": "Received portfolio to saving pot linkage event: {\"portfolioId\": \"23bcdb37-b50e-4186-80e3-cca38d138d32\", \"accountId\": \"272f2b99-38d9-45be-ba67-d5fb9d9f88c0\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "9e58520524b4d0cb",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:14:33.309",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:14:33.309Z",
            "@version": "1",
            "message": "Received PortfolioLinkedWithAccountEvent: {\"portfolioId\": \"23bcdb37-b50e-4186-80e3-cca38d138d32\", \"accountId\": \"272f2b99-38d9-45be-ba67-d5fb9d9f88c0\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "9e58520524b4d0cb",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:14:32.817",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:14:32.817Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_portfolio_account_linked_events-7, groupId=deposit_portfolio_account_linked_events] Seeking to offset 82663 for partition deposit.portfolio.account.linked.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:14:32.812",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:14:32.812Z",
            "@version": "1",
            "message": "Illegal attempt to make transition from ACTIVE to INACTIVE",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.StateChangeHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "7b8c18661b53e917",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:14:32.809",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:14:32.809Z",
            "@version": "1",
            "message": "Received portfolio to account linkage event: {\"portfolioId\": \"f72d73a7-3ca6-4b5a-a13b-44700349aec9\", \"accountId\": \"9790d47d-51cc-46ba-9966-9bef635f9bb9\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "7b8c18661b53e917",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:14:32.809",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:14:32.809Z",
            "@version": "1",
            "message": "prepare inactive saving account",
            "logger_name": "com.arbm.digibank.accounts.savingaccount.SavingAccountService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "7b8c18661b53e917",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:14:32.807",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:14:32.807Z",
            "@version": "1",
            "message": "Received PortfolioLinkedWithAccountEvent: {\"portfolioId\": \"f72d73a7-3ca6-4b5a-a13b-44700349aec9\", \"accountId\": \"9790d47d-51cc-46ba-9966-9bef635f9bb9\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "7b8c18661b53e917",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:14:32.806",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:14:32.806Z",
            "@version": "1",
            "message": "Error handler threw an exception",
            "logger_name": "org.springframework.kafka.listener.KafkaMessageListenerContainer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Seek to current after exception; nested exception is org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is com.arbm.digibank.accounts.common.exception.ChangeAccountStatusException: Illegal attempt to make transition from ACTIVE to INACTIVE; nested exception is com.arbm.digibank.accounts.common.exception.ChangeAccountStatusException: Illegal attempt to make transition from ACTIVE to INACTIVE\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:208)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is com.arbm.digibank.accounts.common.exception.ChangeAccountStatusException: Illegal attempt to make transition from ACTIVE to INACTIVE; nested exception is com.arbm.digibank.accounts.common.exception.ChangeAccountStatusException: Illegal attempt to make transition from ACTIVE to INACTIVE\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2719)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2689)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t... 9 common frames omitted\nCaused by: com.arbm.digibank.accounts.common.exception.ChangeAccountStatusException: Illegal attempt to make transition from ACTIVE to INACTIVE\n\tat com.arbm.digibank.accounts.common.statemachine.StateChangeHandler.validateTransition(StateChangeHandler.kt:15)\n\tat com.arbm.digibank.accounts.common.statemachine.AccountStateMachine.transitionTo(AccountStateMachine.kt:12)\n\tat com.arbm.digibank.accounts.savingaccount.SavingAccountService.transitionTo(SavingAccountService.kt:226)\n\tat com.arbm.digibank.accounts.savingaccount.SavingAccountService.transitionTo$default(SavingAccountService.kt:222)\n\tat com.arbm.digibank.accounts.savingaccount.SavingAccountService.prepareInactiveSavingAccount(SavingAccountService.kt:136)\n\tat com.arbm.digibank.accounts.savingaccount.SavingAccountService$$FastClassBySpringCGLIB$$5e5b4b5f.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.retry.annotation.AnnotationAwareRetryOperationsInterceptor.invoke(AnnotationAwareRetryOperationsInterceptor.java:162)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat com.arbm.digibank.accounts.savingaccount.SavingAccountService$$EnhancerBySpringCGLIB$$182c9fb4.prepareInactiveSavingAccount(<generated>)\n\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.handleSavingAccountEvent(PortfolioEventProcessor.kt:85)\n\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(PortfolioEventProcessor.kt:46)\n\tat jdk.internal.reflect.GeneratedMethodAccessor295.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$ba1defd9.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\t... 11 common frames omitted\n",
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:14:32.805",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:14:32.805Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_portfolio_account_linked_events-7, groupId=deposit_portfolio_account_linked_events] Seeking to offset 82662 for partition deposit.portfolio.account.linked.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:14:28.802",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:14:28.802Z",
            "@version": "1",
            "message": "Illegal attempt to make transition from ACTIVE to INACTIVE",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.StateChangeHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "373e02a9f6b609cb",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:14:28.799",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:14:28.799Z",
            "@version": "1",
            "message": "prepare inactive saving account",
            "logger_name": "com.arbm.digibank.accounts.savingaccount.SavingAccountService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "373e02a9f6b609cb",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:14:28.799",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:14:28.799Z",
            "@version": "1",
            "message": "Received portfolio to account linkage event: {\"portfolioId\": \"f72d73a7-3ca6-4b5a-a13b-44700349aec9\", \"accountId\": \"9790d47d-51cc-46ba-9966-9bef635f9bb9\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "373e02a9f6b609cb",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:14:28.797",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:14:28.797Z",
            "@version": "1",
            "message": "Received PortfolioLinkedWithAccountEvent: {\"portfolioId\": \"f72d73a7-3ca6-4b5a-a13b-44700349aec9\", \"accountId\": \"9790d47d-51cc-46ba-9966-9bef635f9bb9\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "373e02a9f6b609cb",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:14:28.796",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:14:28.796Z",
            "@version": "1",
            "message": "Error handler threw an exception",
            "logger_name": "org.springframework.kafka.listener.KafkaMessageListenerContainer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Seek to current after exception; nested exception is org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is com.arbm.digibank.accounts.common.exception.ChangeAccountStatusException: Illegal attempt to make transition from ACTIVE to INACTIVE; nested exception is com.arbm.digibank.accounts.common.exception.ChangeAccountStatusException: Illegal attempt to make transition from ACTIVE to INACTIVE\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:208)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is com.arbm.digibank.accounts.common.exception.ChangeAccountStatusException: Illegal attempt to make transition from ACTIVE to INACTIVE; nested exception is com.arbm.digibank.accounts.common.exception.ChangeAccountStatusException: Illegal attempt to make transition from ACTIVE to INACTIVE\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2719)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2689)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t... 9 common frames omitted\nCaused by: com.arbm.digibank.accounts.common.exception.ChangeAccountStatusException: Illegal attempt to make transition from ACTIVE to INACTIVE\n\tat com.arbm.digibank.accounts.common.statemachine.StateChangeHandler.validateTransition(StateChangeHandler.kt:15)\n\tat com.arbm.digibank.accounts.common.statemachine.AccountStateMachine.transitionTo(AccountStateMachine.kt:12)\n\tat com.arbm.digibank.accounts.savingaccount.SavingAccountService.transitionTo(SavingAccountService.kt:226)\n\tat com.arbm.digibank.accounts.savingaccount.SavingAccountService.transitionTo$default(SavingAccountService.kt:222)\n\tat com.arbm.digibank.accounts.savingaccount.SavingAccountService.prepareInactiveSavingAccount(SavingAccountService.kt:136)\n\tat com.arbm.digibank.accounts.savingaccount.SavingAccountService$$FastClassBySpringCGLIB$$5e5b4b5f.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.retry.annotation.AnnotationAwareRetryOperationsInterceptor.invoke(AnnotationAwareRetryOperationsInterceptor.java:162)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat com.arbm.digibank.accounts.savingaccount.SavingAccountService$$EnhancerBySpringCGLIB$$182c9fb4.prepareInactiveSavingAccount(<generated>)\n\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.handleSavingAccountEvent(PortfolioEventProcessor.kt:85)\n\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(PortfolioEventProcessor.kt:46)\n\tat jdk.internal.reflect.GeneratedMethodAccessor295.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$ba1defd9.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\t... 11 common frames omitted\n",
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:14:28.795",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:14:28.795Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_portfolio_account_linked_events-7, groupId=deposit_portfolio_account_linked_events] Seeking to offset 82662 for partition deposit.portfolio.account.linked.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:14:26.794",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:14:26.794Z",
            "@version": "1",
            "message": "Illegal attempt to make transition from ACTIVE to INACTIVE",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.StateChangeHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "9af804a765b03a75",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:14:26.792",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:14:26.792Z",
            "@version": "1",
            "message": "prepare inactive saving account",
            "logger_name": "com.arbm.digibank.accounts.savingaccount.SavingAccountService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "9af804a765b03a75",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:14:26.792",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:14:26.792Z",
            "@version": "1",
            "message": "Received portfolio to account linkage event: {\"portfolioId\": \"f72d73a7-3ca6-4b5a-a13b-44700349aec9\", \"accountId\": \"9790d47d-51cc-46ba-9966-9bef635f9bb9\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "9af804a765b03a75",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:14:26.790",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:14:26.79Z",
            "@version": "1",
            "message": "Received PortfolioLinkedWithAccountEvent: {\"portfolioId\": \"f72d73a7-3ca6-4b5a-a13b-44700349aec9\", \"accountId\": \"9790d47d-51cc-46ba-9966-9bef635f9bb9\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "9af804a765b03a75",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:14:26.312",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:14:26.312Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_portfolio_account_linked_events-7, groupId=deposit_portfolio_account_linked_events] Seeking to offset 82662 for partition deposit.portfolio.account.linked.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:14:26.300",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:14:26.3Z",
            "@version": "1",
            "message": "Saving response under id 55af6aea-2424-4cb6-a7e0-dc8ebdceff23",
            "logger_name": "com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "421a51ddcd99fce8",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:14:26.300",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:14:26.3Z",
            "@version": "1",
            "message": "Produced: {\"accountId\": \"55af6aea-2424-4cb6-a7e0-dc8ebdceff23\"}",
            "logger_name": "com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "421a51ddcd99fce8",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:14:26.300",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:14:26.3Z",
            "@version": "1",
            "message": "new status",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "421a51ddcd99fce8",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:14:26.300",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:14:26.3Z",
            "@version": "1",
            "message": "onEnter run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "421a51ddcd99fce8",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:14:26.300",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:14:26.3Z",
            "@version": "1",
            "message": "on Exit run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "421a51ddcd99fce8",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:14:26.300",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:14:26.3Z",
            "@version": "1",
            "message": "validateTransition",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "421a51ddcd99fce8",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:14:26.292",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:14:26.292Z",
            "@version": "1",
            "message": "Received portfolio to saving pot linkage event: {\"portfolioId\": \"cd406be2-0d54-4a92-b907-407a342d3d5d\", \"accountId\": \"55af6aea-2424-4cb6-a7e0-dc8ebdceff23\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "421a51ddcd99fce8",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:14:26.289",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:14:26.289Z",
            "@version": "1",
            "message": "Received PortfolioLinkedWithAccountEvent: {\"portfolioId\": \"cd406be2-0d54-4a92-b907-407a342d3d5d\", \"accountId\": \"55af6aea-2424-4cb6-a7e0-dc8ebdceff23\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "421a51ddcd99fce8",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:14:26.286",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:14:26.286Z",
            "@version": "1",
            "message": "Error handler threw an exception",
            "logger_name": "org.springframework.kafka.listener.KafkaMessageListenerContainer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Seek to current after exception; nested exception is org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:208)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2719)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2689)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t... 9 common frames omitted\nCaused by: org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\tSuppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: \nError has been observed at the following site(s):\n\t*__checkpoint ⇢ 409 from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses [DefaultWebClient]\nOriginal Stack Trace:\n\t\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\t\tat org.springframework.web.reactive.function.client.DefaultClientResponse.lambda$createException$1(DefaultClientResponse.java:207)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:106)\n\t\tat reactor.core.publisher.FluxOnErrorReturn$ReturnSubscriber.onNext(FluxOnErrorReturn.java:162)\n\t\tat reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:101)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)\n\t\tat reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)\n\t\tat reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)\n\t\tat reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1816)\n\t\tat reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:160)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat reactor.netty.channel.FluxReceive.onInboundComplete(FluxReceive.java:400)\n\t\tat reactor.netty.channel.ChannelOperations.onInboundComplete(ChannelOperations.java:419)\n\t\tat reactor.netty.channel.ChannelOperations.terminate(ChannelOperations.java:473)\n\t\tat reactor.netty.http.client.HttpClientOperations.onInboundNext(HttpClientOperations.java:702)\n\t\tat reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:113)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:336)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:308)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\n\t\tat io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe.epollInReady(AbstractEpollStreamChannel.java:800)\n\t\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\n\t\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\n\t\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\n\t\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\n\t\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n\tSuppressed: java.lang.Exception: #block terminated with an error\n\t\tat reactor.core.publisher.BlockingSingleSubscriber.blockingGet(BlockingSingleSubscriber.java:99)\n\t\tat reactor.core.publisher.Mono.block(Mono.java:1707)\n\t\tat com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl.saveAsyncResult(AsyncResponseServiceImpl.kt:17)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.produceSavingPotCreatedAsyncResult(SavingPotActiveHandler.kt:49)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:39)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:17)\n\t\tat com.arbm.digibank.accounts.common.statemachine.AccountStateMachine.transitionTo(AccountStateMachine.kt:20)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo(SavingPotService.kt:251)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo$default(SavingPotService.kt:247)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.activateSavingPot(SavingPotService.kt:117)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$FastClassBySpringCGLIB$$ece3748f.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.retry.annotation.AnnotationAwareRetryOperationsInterceptor.invoke(AnnotationAwareRetryOperationsInterceptor.java:162)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$EnhancerBySpringCGLIB$$decf1564.activateSavingPot(<generated>)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.handleSavingPotEvent(PortfolioEventProcessor.kt:90)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(PortfolioEventProcessor.kt:47)\n\t\tat jdk.internal.reflect.GeneratedMethodAccessor295.invoke(Unknown Source)\n\t\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\t\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\t\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\t\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$ba1defd9.onMessage(<generated>)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\t\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\t\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:14:26.284",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:14:26.284Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_portfolio_account_linked_events-7, groupId=deposit_portfolio_account_linked_events] Seeking to offset 82661 for partition deposit.portfolio.account.linked.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:14:22.273",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:14:22.273Z",
            "@version": "1",
            "message": "Saving response under id 55af6aea-2424-4cb6-a7e0-dc8ebdceff23",
            "logger_name": "com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "0a38d8ece014b7fa",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:14:22.273",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:14:22.273Z",
            "@version": "1",
            "message": "Produced: {\"accountId\": \"55af6aea-2424-4cb6-a7e0-dc8ebdceff23\"}",
            "logger_name": "com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "0a38d8ece014b7fa",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:14:22.273",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:14:22.273Z",
            "@version": "1",
            "message": "new status",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "0a38d8ece014b7fa",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:14:22.273",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:14:22.273Z",
            "@version": "1",
            "message": "onEnter run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "0a38d8ece014b7fa",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:14:22.273",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:14:22.273Z",
            "@version": "1",
            "message": "on Exit run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "0a38d8ece014b7fa",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:14:22.273",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:14:22.273Z",
            "@version": "1",
            "message": "validateTransition",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "0a38d8ece014b7fa",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:14:22.267",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:14:22.267Z",
            "@version": "1",
            "message": "Received portfolio to saving pot linkage event: {\"portfolioId\": \"cd406be2-0d54-4a92-b907-407a342d3d5d\", \"accountId\": \"55af6aea-2424-4cb6-a7e0-dc8ebdceff23\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "0a38d8ece014b7fa",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:14:22.264",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:14:22.264Z",
            "@version": "1",
            "message": "Received PortfolioLinkedWithAccountEvent: {\"portfolioId\": \"cd406be2-0d54-4a92-b907-407a342d3d5d\", \"accountId\": \"55af6aea-2424-4cb6-a7e0-dc8ebdceff23\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "0a38d8ece014b7fa",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:14:22.263",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:14:22.263Z",
            "@version": "1",
            "message": "Error handler threw an exception",
            "logger_name": "org.springframework.kafka.listener.KafkaMessageListenerContainer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Seek to current after exception; nested exception is org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:208)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2719)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2689)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t... 9 common frames omitted\nCaused by: org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\tSuppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: \nError has been observed at the following site(s):\n\t*__checkpoint ⇢ 409 from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses [DefaultWebClient]\nOriginal Stack Trace:\n\t\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\t\tat org.springframework.web.reactive.function.client.DefaultClientResponse.lambda$createException$1(DefaultClientResponse.java:207)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:106)\n\t\tat reactor.core.publisher.FluxOnErrorReturn$ReturnSubscriber.onNext(FluxOnErrorReturn.java:162)\n\t\tat reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:101)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)\n\t\tat reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)\n\t\tat reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)\n\t\tat reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1816)\n\t\tat reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:160)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat reactor.netty.channel.FluxReceive.onInboundComplete(FluxReceive.java:400)\n\t\tat reactor.netty.channel.ChannelOperations.onInboundComplete(ChannelOperations.java:419)\n\t\tat reactor.netty.channel.ChannelOperations.terminate(ChannelOperations.java:473)\n\t\tat reactor.netty.http.client.HttpClientOperations.onInboundNext(HttpClientOperations.java:702)\n\t\tat reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:113)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:336)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:308)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\n\t\tat io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe.epollInReady(AbstractEpollStreamChannel.java:800)\n\t\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\n\t\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\n\t\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\n\t\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\n\t\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n\tSuppressed: java.lang.Exception: #block terminated with an error\n\t\tat reactor.core.publisher.BlockingSingleSubscriber.blockingGet(BlockingSingleSubscriber.java:99)\n\t\tat reactor.core.publisher.Mono.block(Mono.java:1707)\n\t\tat com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl.saveAsyncResult(AsyncResponseServiceImpl.kt:17)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.produceSavingPotCreatedAsyncResult(SavingPotActiveHandler.kt:49)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:39)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:17)\n\t\tat com.arbm.digibank.accounts.common.statemachine.AccountStateMachine.transitionTo(AccountStateMachine.kt:20)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo(SavingPotService.kt:251)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo$default(SavingPotService.kt:247)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.activateSavingPot(SavingPotService.kt:117)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$FastClassBySpringCGLIB$$ece3748f.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.retry.annotation.AnnotationAwareRetryOperationsInterceptor.invoke(AnnotationAwareRetryOperationsInterceptor.java:162)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$EnhancerBySpringCGLIB$$decf1564.activateSavingPot(<generated>)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.handleSavingPotEvent(PortfolioEventProcessor.kt:90)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(PortfolioEventProcessor.kt:47)\n\t\tat jdk.internal.reflect.GeneratedMethodAccessor295.invoke(Unknown Source)\n\t\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\t\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\t\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\t\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$ba1defd9.onMessage(<generated>)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\t\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\t\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:14:22.262",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:14:22.262Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_portfolio_account_linked_events-7, groupId=deposit_portfolio_account_linked_events] Seeking to offset 82661 for partition deposit.portfolio.account.linked.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:14:20.254",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:14:20.254Z",
            "@version": "1",
            "message": "Saving response under id 55af6aea-2424-4cb6-a7e0-dc8ebdceff23",
            "logger_name": "com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "c90970b8276e2895",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:14:20.254",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:14:20.254Z",
            "@version": "1",
            "message": "Produced: {\"accountId\": \"55af6aea-2424-4cb6-a7e0-dc8ebdceff23\"}",
            "logger_name": "com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "c90970b8276e2895",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:14:20.254",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:14:20.253Z",
            "@version": "1",
            "message": "new status",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "c90970b8276e2895",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:14:20.254",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:14:20.253Z",
            "@version": "1",
            "message": "onEnter run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "c90970b8276e2895",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:14:20.254",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:14:20.253Z",
            "@version": "1",
            "message": "on Exit run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "c90970b8276e2895",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:14:20.254",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:14:20.253Z",
            "@version": "1",
            "message": "validateTransition",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "c90970b8276e2895",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:14:20.248",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:14:20.247Z",
            "@version": "1",
            "message": "Received portfolio to saving pot linkage event: {\"portfolioId\": \"cd406be2-0d54-4a92-b907-407a342d3d5d\", \"accountId\": \"55af6aea-2424-4cb6-a7e0-dc8ebdceff23\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "c90970b8276e2895",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:14:20.244",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:14:20.244Z",
            "@version": "1",
            "message": "Received PortfolioLinkedWithAccountEvent: {\"portfolioId\": \"cd406be2-0d54-4a92-b907-407a342d3d5d\", \"accountId\": \"55af6aea-2424-4cb6-a7e0-dc8ebdceff23\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "c90970b8276e2895",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:14:11.954",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:14:11.954Z",
            "@version": "1",
            "message": "Request to retrieve account by following accountNumber: 912010110204167",
            "logger_name": "com.arbm.digibank.accounts.savingaccount.controller.SavingAccountControllerV1",
            "thread_name": "http-nio-8080-exec-4",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a00a5329bfa8797cb64f4763818e2a",
            "spanId": "754ba908dbd19d33",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:14:01.570",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:14:01.547Z",
            "@version": "1",
            "message": "Request to retrieve account by following accountNumber: 912010110204167",
            "logger_name": "com.arbm.digibank.accounts.savingaccount.controller.SavingAccountControllerV1",
            "thread_name": "http-nio-8080-exec-6",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a00a4920596f0008b4ad4359ae6938",
            "spanId": "c919e81be4f5c257",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:13:41.425",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:13:41.424Z",
            "@version": "1",
            "message": "validateTransition",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "7dac5c7d9d246a29",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:13:41.425",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:13:41.424Z",
            "@version": "1",
            "message": "on Exit run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "7dac5c7d9d246a29",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:13:41.425",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:13:41.424Z",
            "@version": "1",
            "message": "onEnter run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "7dac5c7d9d246a29",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:13:41.425",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:13:41.424Z",
            "@version": "1",
            "message": "new status",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "7dac5c7d9d246a29",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:13:41.425",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:13:41.425Z",
            "@version": "1",
            "message": "Produced: {\"accountId\": \"6bb45400-0a6c-4298-a736-182ce5583f63\"}",
            "logger_name": "com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "7dac5c7d9d246a29",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:13:41.425",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:13:41.425Z",
            "@version": "1",
            "message": "Saving response under id 6bb45400-0a6c-4298-a736-182ce5583f63",
            "logger_name": "com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "7dac5c7d9d246a29",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:13:41.418",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:13:41.418Z",
            "@version": "1",
            "message": "Received portfolio to saving pot linkage event: {\"portfolioId\": \"cd406be2-0d54-4a92-b907-407a342d3d5d\", \"accountId\": \"6bb45400-0a6c-4298-a736-182ce5583f63\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "7dac5c7d9d246a29",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:13:41.415",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:13:41.415Z",
            "@version": "1",
            "message": "Received PortfolioLinkedWithAccountEvent: {\"portfolioId\": \"cd406be2-0d54-4a92-b907-407a342d3d5d\", \"accountId\": \"6bb45400-0a6c-4298-a736-182ce5583f63\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "7dac5c7d9d246a29",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:13:41.414",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:13:41.413Z",
            "@version": "1",
            "message": "Error handler threw an exception",
            "logger_name": "org.springframework.kafka.listener.KafkaMessageListenerContainer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Seek to current after exception; nested exception is org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:208)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2719)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2689)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t... 9 common frames omitted\nCaused by: org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\tSuppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: \nError has been observed at the following site(s):\n\t*__checkpoint ⇢ 409 from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses [DefaultWebClient]\nOriginal Stack Trace:\n\t\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\t\tat org.springframework.web.reactive.function.client.DefaultClientResponse.lambda$createException$1(DefaultClientResponse.java:207)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:106)\n\t\tat reactor.core.publisher.FluxOnErrorReturn$ReturnSubscriber.onNext(FluxOnErrorReturn.java:162)\n\t\tat reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:101)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)\n\t\tat reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)\n\t\tat reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)\n\t\tat reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1816)\n\t\tat reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:160)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat reactor.netty.channel.FluxReceive.onInboundComplete(FluxReceive.java:400)\n\t\tat reactor.netty.channel.ChannelOperations.onInboundComplete(ChannelOperations.java:419)\n\t\tat reactor.netty.channel.ChannelOperations.terminate(ChannelOperations.java:473)\n\t\tat reactor.netty.http.client.HttpClientOperations.onInboundNext(HttpClientOperations.java:702)\n\t\tat reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:113)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:336)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:308)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\n\t\tat io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe.epollInReady(AbstractEpollStreamChannel.java:800)\n\t\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\n\t\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\n\t\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\n\t\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\n\t\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n\tSuppressed: java.lang.Exception: #block terminated with an error\n\t\tat reactor.core.publisher.BlockingSingleSubscriber.blockingGet(BlockingSingleSubscriber.java:99)\n\t\tat reactor.core.publisher.Mono.block(Mono.java:1707)\n\t\tat com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl.saveAsyncResult(AsyncResponseServiceImpl.kt:17)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.produceSavingPotCreatedAsyncResult(SavingPotActiveHandler.kt:49)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:39)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:17)\n\t\tat com.arbm.digibank.accounts.common.statemachine.AccountStateMachine.transitionTo(AccountStateMachine.kt:20)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo(SavingPotService.kt:251)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo$default(SavingPotService.kt:247)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.activateSavingPot(SavingPotService.kt:117)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$FastClassBySpringCGLIB$$ece3748f.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.retry.annotation.AnnotationAwareRetryOperationsInterceptor.invoke(AnnotationAwareRetryOperationsInterceptor.java:162)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$EnhancerBySpringCGLIB$$decf1564.activateSavingPot(<generated>)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.handleSavingPotEvent(PortfolioEventProcessor.kt:90)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(PortfolioEventProcessor.kt:47)\n\t\tat jdk.internal.reflect.GeneratedMethodAccessor295.invoke(Unknown Source)\n\t\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\t\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\t\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\t\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$ba1defd9.onMessage(<generated>)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\t\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\t\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:13:41.412",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:13:41.412Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_portfolio_account_linked_events-7, groupId=deposit_portfolio_account_linked_events] Seeking to offset 82660 for partition deposit.portfolio.account.linked.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:13:37.402",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:13:37.402Z",
            "@version": "1",
            "message": "Saving response under id 6bb45400-0a6c-4298-a736-182ce5583f63",
            "logger_name": "com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "7131cfa0722347a8",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:13:37.402",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:13:37.402Z",
            "@version": "1",
            "message": "Produced: {\"accountId\": \"6bb45400-0a6c-4298-a736-182ce5583f63\"}",
            "logger_name": "com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "7131cfa0722347a8",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:13:37.402",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:13:37.402Z",
            "@version": "1",
            "message": "new status",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "7131cfa0722347a8",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:13:37.402",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:13:37.402Z",
            "@version": "1",
            "message": "onEnter run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "7131cfa0722347a8",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:13:37.402",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:13:37.402Z",
            "@version": "1",
            "message": "on Exit run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "7131cfa0722347a8",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:13:37.402",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:13:37.402Z",
            "@version": "1",
            "message": "validateTransition",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "7131cfa0722347a8",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:13:37.396",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:13:37.396Z",
            "@version": "1",
            "message": "Received portfolio to saving pot linkage event: {\"portfolioId\": \"cd406be2-0d54-4a92-b907-407a342d3d5d\", \"accountId\": \"6bb45400-0a6c-4298-a736-182ce5583f63\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "7131cfa0722347a8",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:13:37.393",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:13:37.393Z",
            "@version": "1",
            "message": "Received PortfolioLinkedWithAccountEvent: {\"portfolioId\": \"cd406be2-0d54-4a92-b907-407a342d3d5d\", \"accountId\": \"6bb45400-0a6c-4298-a736-182ce5583f63\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "7131cfa0722347a8",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:13:37.393",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:13:37.392Z",
            "@version": "1",
            "message": "Error handler threw an exception",
            "logger_name": "org.springframework.kafka.listener.KafkaMessageListenerContainer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Seek to current after exception; nested exception is org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:208)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2719)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2689)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t... 9 common frames omitted\nCaused by: org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\tSuppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: \nError has been observed at the following site(s):\n\t*__checkpoint ⇢ 409 from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses [DefaultWebClient]\nOriginal Stack Trace:\n\t\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\t\tat org.springframework.web.reactive.function.client.DefaultClientResponse.lambda$createException$1(DefaultClientResponse.java:207)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:106)\n\t\tat reactor.core.publisher.FluxOnErrorReturn$ReturnSubscriber.onNext(FluxOnErrorReturn.java:162)\n\t\tat reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:101)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)\n\t\tat reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)\n\t\tat reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)\n\t\tat reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1816)\n\t\tat reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:160)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat reactor.netty.channel.FluxReceive.onInboundComplete(FluxReceive.java:400)\n\t\tat reactor.netty.channel.ChannelOperations.onInboundComplete(ChannelOperations.java:419)\n\t\tat reactor.netty.channel.ChannelOperations.terminate(ChannelOperations.java:473)\n\t\tat reactor.netty.http.client.HttpClientOperations.onInboundNext(HttpClientOperations.java:702)\n\t\tat reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:113)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:336)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:308)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\n\t\tat io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe.epollInReady(AbstractEpollStreamChannel.java:800)\n\t\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\n\t\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\n\t\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\n\t\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\n\t\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n\tSuppressed: java.lang.Exception: #block terminated with an error\n\t\tat reactor.core.publisher.BlockingSingleSubscriber.blockingGet(BlockingSingleSubscriber.java:99)\n\t\tat reactor.core.publisher.Mono.block(Mono.java:1707)\n\t\tat com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl.saveAsyncResult(AsyncResponseServiceImpl.kt:17)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.produceSavingPotCreatedAsyncResult(SavingPotActiveHandler.kt:49)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:39)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:17)\n\t\tat com.arbm.digibank.accounts.common.statemachine.AccountStateMachine.transitionTo(AccountStateMachine.kt:20)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo(SavingPotService.kt:251)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo$default(SavingPotService.kt:247)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.activateSavingPot(SavingPotService.kt:117)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$FastClassBySpringCGLIB$$ece3748f.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.retry.annotation.AnnotationAwareRetryOperationsInterceptor.invoke(AnnotationAwareRetryOperationsInterceptor.java:162)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$EnhancerBySpringCGLIB$$decf1564.activateSavingPot(<generated>)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.handleSavingPotEvent(PortfolioEventProcessor.kt:90)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(PortfolioEventProcessor.kt:47)\n\t\tat jdk.internal.reflect.GeneratedMethodAccessor295.invoke(Unknown Source)\n\t\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\t\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\t\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\t\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$ba1defd9.onMessage(<generated>)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\t\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\t\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:13:37.392",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:13:37.392Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_portfolio_account_linked_events-7, groupId=deposit_portfolio_account_linked_events] Seeking to offset 82660 for partition deposit.portfolio.account.linked.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:13:35.384",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:13:35.384Z",
            "@version": "1",
            "message": "Saving response under id 6bb45400-0a6c-4298-a736-182ce5583f63",
            "logger_name": "com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "0b4f836bc245651a",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:13:35.384",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:13:35.384Z",
            "@version": "1",
            "message": "Produced: {\"accountId\": \"6bb45400-0a6c-4298-a736-182ce5583f63\"}",
            "logger_name": "com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "0b4f836bc245651a",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:13:35.384",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:13:35.383Z",
            "@version": "1",
            "message": "new status",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "0b4f836bc245651a",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:13:35.384",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:13:35.383Z",
            "@version": "1",
            "message": "onEnter run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "0b4f836bc245651a",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:13:35.384",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:13:35.383Z",
            "@version": "1",
            "message": "on Exit run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "0b4f836bc245651a",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:13:35.384",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:13:35.383Z",
            "@version": "1",
            "message": "validateTransition",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "0b4f836bc245651a",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:13:35.376",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:13:35.376Z",
            "@version": "1",
            "message": "Received portfolio to saving pot linkage event: {\"portfolioId\": \"cd406be2-0d54-4a92-b907-407a342d3d5d\", \"accountId\": \"6bb45400-0a6c-4298-a736-182ce5583f63\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "0b4f836bc245651a",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:13:35.372",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:13:35.372Z",
            "@version": "1",
            "message": "Received PortfolioLinkedWithAccountEvent: {\"portfolioId\": \"cd406be2-0d54-4a92-b907-407a342d3d5d\", \"accountId\": \"6bb45400-0a6c-4298-a736-182ce5583f63\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "0b4f836bc245651a",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:13:18.202",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:13:18.202Z",
            "@version": "1",
            "message": "validateTransition",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "cd4683b8428fa3d9",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:13:18.202",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:13:18.202Z",
            "@version": "1",
            "message": "on Exit run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "cd4683b8428fa3d9",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:13:18.202",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:13:18.202Z",
            "@version": "1",
            "message": "onEnter run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "cd4683b8428fa3d9",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:13:18.202",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:13:18.202Z",
            "@version": "1",
            "message": "new status",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "cd4683b8428fa3d9",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:13:18.202",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:13:18.202Z",
            "@version": "1",
            "message": "Produced: {\"accountId\": \"d1297a12-3da8-4373-9579-8f4b8fe16864\"}",
            "logger_name": "com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "cd4683b8428fa3d9",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:13:18.202",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:13:18.202Z",
            "@version": "1",
            "message": "Saving response under id d1297a12-3da8-4373-9579-8f4b8fe16864",
            "logger_name": "com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "cd4683b8428fa3d9",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:13:18.196",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:13:18.196Z",
            "@version": "1",
            "message": "Received portfolio to saving pot linkage event: {\"portfolioId\": \"cd406be2-0d54-4a92-b907-407a342d3d5d\", \"accountId\": \"d1297a12-3da8-4373-9579-8f4b8fe16864\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "cd4683b8428fa3d9",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:13:18.193",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:13:18.193Z",
            "@version": "1",
            "message": "Received PortfolioLinkedWithAccountEvent: {\"portfolioId\": \"cd406be2-0d54-4a92-b907-407a342d3d5d\", \"accountId\": \"d1297a12-3da8-4373-9579-8f4b8fe16864\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "cd4683b8428fa3d9",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:13:18.192",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:13:18.191Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_portfolio_account_linked_events-7, groupId=deposit_portfolio_account_linked_events] Seeking to offset 82659 for partition deposit.portfolio.account.linked.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:13:18.192",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:13:18.192Z",
            "@version": "1",
            "message": "Error handler threw an exception",
            "logger_name": "org.springframework.kafka.listener.KafkaMessageListenerContainer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Seek to current after exception; nested exception is org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:208)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2719)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2689)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t... 9 common frames omitted\nCaused by: org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\tSuppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: \nError has been observed at the following site(s):\n\t*__checkpoint ⇢ 409 from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses [DefaultWebClient]\nOriginal Stack Trace:\n\t\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\t\tat org.springframework.web.reactive.function.client.DefaultClientResponse.lambda$createException$1(DefaultClientResponse.java:207)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:106)\n\t\tat reactor.core.publisher.FluxOnErrorReturn$ReturnSubscriber.onNext(FluxOnErrorReturn.java:162)\n\t\tat reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:101)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)\n\t\tat reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)\n\t\tat reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)\n\t\tat reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1816)\n\t\tat reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:160)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat reactor.netty.channel.FluxReceive.onInboundComplete(FluxReceive.java:400)\n\t\tat reactor.netty.channel.ChannelOperations.onInboundComplete(ChannelOperations.java:419)\n\t\tat reactor.netty.channel.ChannelOperations.terminate(ChannelOperations.java:473)\n\t\tat reactor.netty.http.client.HttpClientOperations.onInboundNext(HttpClientOperations.java:702)\n\t\tat reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:113)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:336)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:308)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\n\t\tat io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe.epollInReady(AbstractEpollStreamChannel.java:800)\n\t\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\n\t\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\n\t\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\n\t\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\n\t\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n\tSuppressed: java.lang.Exception: #block terminated with an error\n\t\tat reactor.core.publisher.BlockingSingleSubscriber.blockingGet(BlockingSingleSubscriber.java:99)\n\t\tat reactor.core.publisher.Mono.block(Mono.java:1707)\n\t\tat com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl.saveAsyncResult(AsyncResponseServiceImpl.kt:17)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.produceSavingPotCreatedAsyncResult(SavingPotActiveHandler.kt:49)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:39)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:17)\n\t\tat com.arbm.digibank.accounts.common.statemachine.AccountStateMachine.transitionTo(AccountStateMachine.kt:20)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo(SavingPotService.kt:251)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo$default(SavingPotService.kt:247)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.activateSavingPot(SavingPotService.kt:117)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$FastClassBySpringCGLIB$$ece3748f.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.retry.annotation.AnnotationAwareRetryOperationsInterceptor.invoke(AnnotationAwareRetryOperationsInterceptor.java:162)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$EnhancerBySpringCGLIB$$decf1564.activateSavingPot(<generated>)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.handleSavingPotEvent(PortfolioEventProcessor.kt:90)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(PortfolioEventProcessor.kt:47)\n\t\tat jdk.internal.reflect.GeneratedMethodAccessor295.invoke(Unknown Source)\n\t\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\t\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\t\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\t\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$ba1defd9.onMessage(<generated>)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\t\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\t\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:13:14.182",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:13:14.182Z",
            "@version": "1",
            "message": "Saving response under id d1297a12-3da8-4373-9579-8f4b8fe16864",
            "logger_name": "com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "e42068c095d65069",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:13:14.182",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:13:14.182Z",
            "@version": "1",
            "message": "Produced: {\"accountId\": \"d1297a12-3da8-4373-9579-8f4b8fe16864\"}",
            "logger_name": "com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "e42068c095d65069",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:13:14.182",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:13:14.182Z",
            "@version": "1",
            "message": "new status",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "e42068c095d65069",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:13:14.182",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:13:14.182Z",
            "@version": "1",
            "message": "onEnter run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "e42068c095d65069",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:13:14.182",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:13:14.182Z",
            "@version": "1",
            "message": "on Exit run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "e42068c095d65069",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:13:14.182",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:13:14.182Z",
            "@version": "1",
            "message": "validateTransition",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "e42068c095d65069",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:13:14.176",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:13:14.176Z",
            "@version": "1",
            "message": "Received portfolio to saving pot linkage event: {\"portfolioId\": \"cd406be2-0d54-4a92-b907-407a342d3d5d\", \"accountId\": \"d1297a12-3da8-4373-9579-8f4b8fe16864\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "e42068c095d65069",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:13:14.173",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:13:14.173Z",
            "@version": "1",
            "message": "Received PortfolioLinkedWithAccountEvent: {\"portfolioId\": \"cd406be2-0d54-4a92-b907-407a342d3d5d\", \"accountId\": \"d1297a12-3da8-4373-9579-8f4b8fe16864\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "e42068c095d65069",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:13:14.172",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:13:14.172Z",
            "@version": "1",
            "message": "Error handler threw an exception",
            "logger_name": "org.springframework.kafka.listener.KafkaMessageListenerContainer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Seek to current after exception; nested exception is org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:208)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2719)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2689)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t... 9 common frames omitted\nCaused by: org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\tSuppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: \nError has been observed at the following site(s):\n\t*__checkpoint ⇢ 409 from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses [DefaultWebClient]\nOriginal Stack Trace:\n\t\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\t\tat org.springframework.web.reactive.function.client.DefaultClientResponse.lambda$createException$1(DefaultClientResponse.java:207)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:106)\n\t\tat reactor.core.publisher.FluxOnErrorReturn$ReturnSubscriber.onNext(FluxOnErrorReturn.java:162)\n\t\tat reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:101)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)\n\t\tat reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)\n\t\tat reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)\n\t\tat reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1816)\n\t\tat reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:160)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat reactor.netty.channel.FluxReceive.onInboundComplete(FluxReceive.java:400)\n\t\tat reactor.netty.channel.ChannelOperations.onInboundComplete(ChannelOperations.java:419)\n\t\tat reactor.netty.channel.ChannelOperations.terminate(ChannelOperations.java:473)\n\t\tat reactor.netty.http.client.HttpClientOperations.onInboundNext(HttpClientOperations.java:702)\n\t\tat reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:113)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:336)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:308)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\n\t\tat io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe.epollInReady(AbstractEpollStreamChannel.java:800)\n\t\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\n\t\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\n\t\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\n\t\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\n\t\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n\tSuppressed: java.lang.Exception: #block terminated with an error\n\t\tat reactor.core.publisher.BlockingSingleSubscriber.blockingGet(BlockingSingleSubscriber.java:99)\n\t\tat reactor.core.publisher.Mono.block(Mono.java:1707)\n\t\tat com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl.saveAsyncResult(AsyncResponseServiceImpl.kt:17)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.produceSavingPotCreatedAsyncResult(SavingPotActiveHandler.kt:49)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:39)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:17)\n\t\tat com.arbm.digibank.accounts.common.statemachine.AccountStateMachine.transitionTo(AccountStateMachine.kt:20)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo(SavingPotService.kt:251)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo$default(SavingPotService.kt:247)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.activateSavingPot(SavingPotService.kt:117)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$FastClassBySpringCGLIB$$ece3748f.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.retry.annotation.AnnotationAwareRetryOperationsInterceptor.invoke(AnnotationAwareRetryOperationsInterceptor.java:162)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$EnhancerBySpringCGLIB$$decf1564.activateSavingPot(<generated>)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.handleSavingPotEvent(PortfolioEventProcessor.kt:90)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(PortfolioEventProcessor.kt:47)\n\t\tat jdk.internal.reflect.GeneratedMethodAccessor295.invoke(Unknown Source)\n\t\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\t\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\t\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\t\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$ba1defd9.onMessage(<generated>)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\t\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\t\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:13:14.170",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:13:14.17Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_portfolio_account_linked_events-7, groupId=deposit_portfolio_account_linked_events] Seeking to offset 82659 for partition deposit.portfolio.account.linked.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:13:12.162",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:13:12.162Z",
            "@version": "1",
            "message": "Saving response under id d1297a12-3da8-4373-9579-8f4b8fe16864",
            "logger_name": "com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "3d60cc83685ca844",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:13:12.162",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:13:12.162Z",
            "@version": "1",
            "message": "Produced: {\"accountId\": \"d1297a12-3da8-4373-9579-8f4b8fe16864\"}",
            "logger_name": "com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "3d60cc83685ca844",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:13:12.162",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:13:12.162Z",
            "@version": "1",
            "message": "new status",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "3d60cc83685ca844",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:13:12.162",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:13:12.162Z",
            "@version": "1",
            "message": "onEnter run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "3d60cc83685ca844",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:13:12.162",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:13:12.162Z",
            "@version": "1",
            "message": "on Exit run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "3d60cc83685ca844",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:13:12.162",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:13:12.162Z",
            "@version": "1",
            "message": "validateTransition",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "3d60cc83685ca844",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:13:12.157",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:13:12.156Z",
            "@version": "1",
            "message": "Received portfolio to saving pot linkage event: {\"portfolioId\": \"cd406be2-0d54-4a92-b907-407a342d3d5d\", \"accountId\": \"d1297a12-3da8-4373-9579-8f4b8fe16864\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "3d60cc83685ca844",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:13:12.153",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:13:12.153Z",
            "@version": "1",
            "message": "Received PortfolioLinkedWithAccountEvent: {\"portfolioId\": \"cd406be2-0d54-4a92-b907-407a342d3d5d\", \"accountId\": \"d1297a12-3da8-4373-9579-8f4b8fe16864\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "3d60cc83685ca844",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:12:58.298",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:12:58.298Z",
            "@version": "1",
            "message": "Event doesn't inform about cleared saving pot or cleared saving account: {\"eventId\": \"7665e61a-52c4-470f-9c8c-eb146e03423c_d436d737-de20-4857-b8ad-c3ae4c54d78c\", \"valueTimestamp\": \"2025-02-03T00:12:58.185Z\", \"accountId\": \"7665e61a-52c4-470f-9c8c-eb146e03423c\", \"customerId\": \"1725546015365596\", \"availableBalance\": 3613.40, \"settledBalance\": 3613.40}",
            "logger_name": "com.arbm.digibank.offboarding.service.OffboardingService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#10-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a00a0a5b18a327c9cd3694711fa568",
            "spanId": "59bbcfe0471afd39",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:12:58.296",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:12:58.296Z",
            "@version": "1",
            "message": "Consume DepositBalanceEvent: {\"eventId\": \"7665e61a-52c4-470f-9c8c-eb146e03423c_d436d737-de20-4857-b8ad-c3ae4c54d78c\", \"valueTimestamp\": \"2025-02-03T00:12:58.185Z\", \"accountId\": \"7665e61a-52c4-470f-9c8c-eb146e03423c\", \"customerId\": \"1725546015365596\", \"availableBalance\": 3613.40, \"settledBalance\": 3613.40}",
            "logger_name": "com.arbm.digibank.offboarding.OffboardingProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#10-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a00a0a5b18a327c9cd3694711fa568",
            "spanId": "59bbcfe0471afd39",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:12:57.606",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:12:57.606Z",
            "@version": "1",
            "message": "Request to retrieve account by following accountNumber: 912010110481278",
            "logger_name": "com.arbm.digibank.accounts.savingaccount.controller.SavingAccountControllerV1",
            "thread_name": "http-nio-8080-exec-8",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a00a092a48ba5e993c91bafec4ed9f",
            "spanId": "993c91bafec4ed9f",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:12:38.908",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:12:38.907Z",
            "@version": "1",
            "message": "Saving response under id 58e20f85-5439-42d8-9425-43013ebc96a3",
            "logger_name": "com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "58b354a563892a5c",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:12:38.908",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:12:38.907Z",
            "@version": "1",
            "message": "Produced: {\"accountId\": \"58e20f85-5439-42d8-9425-43013ebc96a3\"}",
            "logger_name": "com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "58b354a563892a5c",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:12:38.907",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:12:38.907Z",
            "@version": "1",
            "message": "new status",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "58b354a563892a5c",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:12:38.907",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:12:38.907Z",
            "@version": "1",
            "message": "onEnter run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "58b354a563892a5c",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:12:38.907",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:12:38.907Z",
            "@version": "1",
            "message": "on Exit run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "58b354a563892a5c",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:12:38.907",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:12:38.907Z",
            "@version": "1",
            "message": "validateTransition",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "58b354a563892a5c",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:12:38.896",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:12:38.896Z",
            "@version": "1",
            "message": "Received portfolio to saving pot linkage event: {\"portfolioId\": \"0d98c140-0c31-4a2a-886d-88b874a368b9\", \"accountId\": \"58e20f85-5439-42d8-9425-43013ebc96a3\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "58b354a563892a5c",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:12:38.892",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:12:38.892Z",
            "@version": "1",
            "message": "Received PortfolioLinkedWithAccountEvent: {\"portfolioId\": \"0d98c140-0c31-4a2a-886d-88b874a368b9\", \"accountId\": \"58e20f85-5439-42d8-9425-43013ebc96a3\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "58b354a563892a5c",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:12:38.891",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:12:38.891Z",
            "@version": "1",
            "message": "Error handler threw an exception",
            "logger_name": "org.springframework.kafka.listener.KafkaMessageListenerContainer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Seek to current after exception; nested exception is org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:208)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2719)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2689)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t... 9 common frames omitted\nCaused by: org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\tSuppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: \nError has been observed at the following site(s):\n\t*__checkpoint ⇢ 409 from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses [DefaultWebClient]\nOriginal Stack Trace:\n\t\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\t\tat org.springframework.web.reactive.function.client.DefaultClientResponse.lambda$createException$1(DefaultClientResponse.java:207)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:106)\n\t\tat reactor.core.publisher.FluxOnErrorReturn$ReturnSubscriber.onNext(FluxOnErrorReturn.java:162)\n\t\tat reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:101)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)\n\t\tat reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)\n\t\tat reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)\n\t\tat reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1816)\n\t\tat reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:160)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat reactor.netty.channel.FluxReceive.onInboundComplete(FluxReceive.java:400)\n\t\tat reactor.netty.channel.ChannelOperations.onInboundComplete(ChannelOperations.java:419)\n\t\tat reactor.netty.channel.ChannelOperations.terminate(ChannelOperations.java:473)\n\t\tat reactor.netty.http.client.HttpClientOperations.onInboundNext(HttpClientOperations.java:702)\n\t\tat reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:113)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:336)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:308)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\n\t\tat io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe.epollInReady(AbstractEpollStreamChannel.java:800)\n\t\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\n\t\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\n\t\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\n\t\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\n\t\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n\tSuppressed: java.lang.Exception: #block terminated with an error\n\t\tat reactor.core.publisher.BlockingSingleSubscriber.blockingGet(BlockingSingleSubscriber.java:99)\n\t\tat reactor.core.publisher.Mono.block(Mono.java:1707)\n\t\tat com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl.saveAsyncResult(AsyncResponseServiceImpl.kt:17)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.produceSavingPotCreatedAsyncResult(SavingPotActiveHandler.kt:49)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:39)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:17)\n\t\tat com.arbm.digibank.accounts.common.statemachine.AccountStateMachine.transitionTo(AccountStateMachine.kt:20)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo(SavingPotService.kt:251)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo$default(SavingPotService.kt:247)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.activateSavingPot(SavingPotService.kt:117)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$FastClassBySpringCGLIB$$ece3748f.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.retry.annotation.AnnotationAwareRetryOperationsInterceptor.invoke(AnnotationAwareRetryOperationsInterceptor.java:162)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$EnhancerBySpringCGLIB$$decf1564.activateSavingPot(<generated>)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.handleSavingPotEvent(PortfolioEventProcessor.kt:90)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(PortfolioEventProcessor.kt:47)\n\t\tat jdk.internal.reflect.GeneratedMethodAccessor295.invoke(Unknown Source)\n\t\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\t\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\t\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\t\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$ba1defd9.onMessage(<generated>)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\t\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\t\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:12:38.891",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:12:38.89Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_portfolio_account_linked_events-7, groupId=deposit_portfolio_account_linked_events] Seeking to offset 82658 for partition deposit.portfolio.account.linked.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:12:34.881",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:12:34.881Z",
            "@version": "1",
            "message": "Saving response under id 58e20f85-5439-42d8-9425-43013ebc96a3",
            "logger_name": "com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "766797beb5c0e6ff",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:12:34.881",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:12:34.881Z",
            "@version": "1",
            "message": "Produced: {\"accountId\": \"58e20f85-5439-42d8-9425-43013ebc96a3\"}",
            "logger_name": "com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "766797beb5c0e6ff",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:12:34.881",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:12:34.88Z",
            "@version": "1",
            "message": "new status",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "766797beb5c0e6ff",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:12:34.881",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:12:34.88Z",
            "@version": "1",
            "message": "onEnter run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "766797beb5c0e6ff",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:12:34.881",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:12:34.88Z",
            "@version": "1",
            "message": "on Exit run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "766797beb5c0e6ff",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:12:34.881",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:12:34.88Z",
            "@version": "1",
            "message": "validateTransition",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "766797beb5c0e6ff",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:12:34.875",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:12:34.875Z",
            "@version": "1",
            "message": "Received portfolio to saving pot linkage event: {\"portfolioId\": \"0d98c140-0c31-4a2a-886d-88b874a368b9\", \"accountId\": \"58e20f85-5439-42d8-9425-43013ebc96a3\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "766797beb5c0e6ff",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:12:34.871",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:12:34.871Z",
            "@version": "1",
            "message": "Received PortfolioLinkedWithAccountEvent: {\"portfolioId\": \"0d98c140-0c31-4a2a-886d-88b874a368b9\", \"accountId\": \"58e20f85-5439-42d8-9425-43013ebc96a3\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "766797beb5c0e6ff",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:12:34.870",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:12:34.87Z",
            "@version": "1",
            "message": "Error handler threw an exception",
            "logger_name": "org.springframework.kafka.listener.KafkaMessageListenerContainer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Seek to current after exception; nested exception is org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:208)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2719)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2689)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t... 9 common frames omitted\nCaused by: org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\tSuppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: \nError has been observed at the following site(s):\n\t*__checkpoint ⇢ 409 from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses [DefaultWebClient]\nOriginal Stack Trace:\n\t\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\t\tat org.springframework.web.reactive.function.client.DefaultClientResponse.lambda$createException$1(DefaultClientResponse.java:207)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:106)\n\t\tat reactor.core.publisher.FluxOnErrorReturn$ReturnSubscriber.onNext(FluxOnErrorReturn.java:162)\n\t\tat reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:101)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)\n\t\tat reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)\n\t\tat reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)\n\t\tat reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1816)\n\t\tat reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:160)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat reactor.netty.channel.FluxReceive.onInboundComplete(FluxReceive.java:400)\n\t\tat reactor.netty.channel.ChannelOperations.onInboundComplete(ChannelOperations.java:419)\n\t\tat reactor.netty.channel.ChannelOperations.terminate(ChannelOperations.java:473)\n\t\tat reactor.netty.http.client.HttpClientOperations.onInboundNext(HttpClientOperations.java:702)\n\t\tat reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:113)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:336)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:308)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\n\t\tat io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe.epollInReady(AbstractEpollStreamChannel.java:800)\n\t\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\n\t\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\n\t\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\n\t\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\n\t\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n\tSuppressed: java.lang.Exception: #block terminated with an error\n\t\tat reactor.core.publisher.BlockingSingleSubscriber.blockingGet(BlockingSingleSubscriber.java:99)\n\t\tat reactor.core.publisher.Mono.block(Mono.java:1707)\n\t\tat com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl.saveAsyncResult(AsyncResponseServiceImpl.kt:17)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.produceSavingPotCreatedAsyncResult(SavingPotActiveHandler.kt:49)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:39)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:17)\n\t\tat com.arbm.digibank.accounts.common.statemachine.AccountStateMachine.transitionTo(AccountStateMachine.kt:20)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo(SavingPotService.kt:251)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo$default(SavingPotService.kt:247)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.activateSavingPot(SavingPotService.kt:117)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$FastClassBySpringCGLIB$$ece3748f.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.retry.annotation.AnnotationAwareRetryOperationsInterceptor.invoke(AnnotationAwareRetryOperationsInterceptor.java:162)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$EnhancerBySpringCGLIB$$decf1564.activateSavingPot(<generated>)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.handleSavingPotEvent(PortfolioEventProcessor.kt:90)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(PortfolioEventProcessor.kt:47)\n\t\tat jdk.internal.reflect.GeneratedMethodAccessor295.invoke(Unknown Source)\n\t\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\t\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\t\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\t\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$ba1defd9.onMessage(<generated>)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\t\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\t\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:12:34.870",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:12:34.87Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_portfolio_account_linked_events-7, groupId=deposit_portfolio_account_linked_events] Seeking to offset 82658 for partition deposit.portfolio.account.linked.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:12:32.861",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:12:32.861Z",
            "@version": "1",
            "message": "Saving response under id 58e20f85-5439-42d8-9425-43013ebc96a3",
            "logger_name": "com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "4078c9bdc996816e",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:12:32.861",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:12:32.861Z",
            "@version": "1",
            "message": "Produced: {\"accountId\": \"58e20f85-5439-42d8-9425-43013ebc96a3\"}",
            "logger_name": "com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "4078c9bdc996816e",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:12:32.861",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:12:32.861Z",
            "@version": "1",
            "message": "validateTransition",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "4078c9bdc996816e",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:12:32.861",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:12:32.861Z",
            "@version": "1",
            "message": "on Exit run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "4078c9bdc996816e",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:12:32.861",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:12:32.861Z",
            "@version": "1",
            "message": "onEnter run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "4078c9bdc996816e",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:12:32.861",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:12:32.861Z",
            "@version": "1",
            "message": "new status",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "4078c9bdc996816e",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:12:32.854",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:12:32.854Z",
            "@version": "1",
            "message": "Received portfolio to saving pot linkage event: {\"portfolioId\": \"0d98c140-0c31-4a2a-886d-88b874a368b9\", \"accountId\": \"58e20f85-5439-42d8-9425-43013ebc96a3\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "4078c9bdc996816e",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:12:32.851",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:12:32.851Z",
            "@version": "1",
            "message": "Received PortfolioLinkedWithAccountEvent: {\"portfolioId\": \"0d98c140-0c31-4a2a-886d-88b874a368b9\", \"accountId\": \"58e20f85-5439-42d8-9425-43013ebc96a3\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "4078c9bdc996816e",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:12:32.360",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:12:32.36Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_portfolio_account_linked_events-7, groupId=deposit_portfolio_account_linked_events] Seeking to offset 82658 for partition deposit.portfolio.account.linked.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:12:32.355",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:12:32.355Z",
            "@version": "1",
            "message": "Illegal attempt to make transition from ACTIVE to INACTIVE",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.StateChangeHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "d4c104a8c9c407ae",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:12:32.353",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:12:32.352Z",
            "@version": "1",
            "message": "prepare inactive saving account",
            "logger_name": "com.arbm.digibank.accounts.savingaccount.SavingAccountService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "d4c104a8c9c407ae",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:12:32.353",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:12:32.352Z",
            "@version": "1",
            "message": "Received portfolio to account linkage event: {\"portfolioId\": \"eeeda3ac-aa84-465e-b260-449bafaa3d7e\", \"accountId\": \"aeb15156-1a75-422a-81df-011a2b82f9ad\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "d4c104a8c9c407ae",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:12:32.350",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:12:32.35Z",
            "@version": "1",
            "message": "Received PortfolioLinkedWithAccountEvent: {\"portfolioId\": \"eeeda3ac-aa84-465e-b260-449bafaa3d7e\", \"accountId\": \"aeb15156-1a75-422a-81df-011a2b82f9ad\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "d4c104a8c9c407ae",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:12:32.349",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:12:32.348Z",
            "@version": "1",
            "message": "Error handler threw an exception",
            "logger_name": "org.springframework.kafka.listener.KafkaMessageListenerContainer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Seek to current after exception; nested exception is org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is com.arbm.digibank.accounts.common.exception.ChangeAccountStatusException: Illegal attempt to make transition from ACTIVE to INACTIVE; nested exception is com.arbm.digibank.accounts.common.exception.ChangeAccountStatusException: Illegal attempt to make transition from ACTIVE to INACTIVE\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:208)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is com.arbm.digibank.accounts.common.exception.ChangeAccountStatusException: Illegal attempt to make transition from ACTIVE to INACTIVE; nested exception is com.arbm.digibank.accounts.common.exception.ChangeAccountStatusException: Illegal attempt to make transition from ACTIVE to INACTIVE\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2719)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2689)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t... 9 common frames omitted\nCaused by: com.arbm.digibank.accounts.common.exception.ChangeAccountStatusException: Illegal attempt to make transition from ACTIVE to INACTIVE\n\tat com.arbm.digibank.accounts.common.statemachine.StateChangeHandler.validateTransition(StateChangeHandler.kt:15)\n\tat com.arbm.digibank.accounts.common.statemachine.AccountStateMachine.transitionTo(AccountStateMachine.kt:12)\n\tat com.arbm.digibank.accounts.savingaccount.SavingAccountService.transitionTo(SavingAccountService.kt:226)\n\tat com.arbm.digibank.accounts.savingaccount.SavingAccountService.transitionTo$default(SavingAccountService.kt:222)\n\tat com.arbm.digibank.accounts.savingaccount.SavingAccountService.prepareInactiveSavingAccount(SavingAccountService.kt:136)\n\tat com.arbm.digibank.accounts.savingaccount.SavingAccountService$$FastClassBySpringCGLIB$$5e5b4b5f.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.retry.annotation.AnnotationAwareRetryOperationsInterceptor.invoke(AnnotationAwareRetryOperationsInterceptor.java:162)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat com.arbm.digibank.accounts.savingaccount.SavingAccountService$$EnhancerBySpringCGLIB$$182c9fb4.prepareInactiveSavingAccount(<generated>)\n\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.handleSavingAccountEvent(PortfolioEventProcessor.kt:85)\n\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(PortfolioEventProcessor.kt:46)\n\tat jdk.internal.reflect.GeneratedMethodAccessor295.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$ba1defd9.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\t... 11 common frames omitted\n",
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:12:32.348",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:12:32.348Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_portfolio_account_linked_events-7, groupId=deposit_portfolio_account_linked_events] Seeking to offset 82657 for partition deposit.portfolio.account.linked.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:12:28.345",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:12:28.345Z",
            "@version": "1",
            "message": "Illegal attempt to make transition from ACTIVE to INACTIVE",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.StateChangeHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "384d52f9e33f0bb6",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:12:28.342",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:12:28.342Z",
            "@version": "1",
            "message": "prepare inactive saving account",
            "logger_name": "com.arbm.digibank.accounts.savingaccount.SavingAccountService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "384d52f9e33f0bb6",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:12:28.342",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:12:28.342Z",
            "@version": "1",
            "message": "Received portfolio to account linkage event: {\"portfolioId\": \"eeeda3ac-aa84-465e-b260-449bafaa3d7e\", \"accountId\": \"aeb15156-1a75-422a-81df-011a2b82f9ad\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "384d52f9e33f0bb6",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:12:28.340",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:12:28.34Z",
            "@version": "1",
            "message": "Received PortfolioLinkedWithAccountEvent: {\"portfolioId\": \"eeeda3ac-aa84-465e-b260-449bafaa3d7e\", \"accountId\": \"aeb15156-1a75-422a-81df-011a2b82f9ad\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "384d52f9e33f0bb6",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:12:28.339",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:12:28.339Z",
            "@version": "1",
            "message": "Error handler threw an exception",
            "logger_name": "org.springframework.kafka.listener.KafkaMessageListenerContainer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Seek to current after exception; nested exception is org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is com.arbm.digibank.accounts.common.exception.ChangeAccountStatusException: Illegal attempt to make transition from ACTIVE to INACTIVE; nested exception is com.arbm.digibank.accounts.common.exception.ChangeAccountStatusException: Illegal attempt to make transition from ACTIVE to INACTIVE\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:208)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is com.arbm.digibank.accounts.common.exception.ChangeAccountStatusException: Illegal attempt to make transition from ACTIVE to INACTIVE; nested exception is com.arbm.digibank.accounts.common.exception.ChangeAccountStatusException: Illegal attempt to make transition from ACTIVE to INACTIVE\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2719)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2689)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t... 9 common frames omitted\nCaused by: com.arbm.digibank.accounts.common.exception.ChangeAccountStatusException: Illegal attempt to make transition from ACTIVE to INACTIVE\n\tat com.arbm.digibank.accounts.common.statemachine.StateChangeHandler.validateTransition(StateChangeHandler.kt:15)\n\tat com.arbm.digibank.accounts.common.statemachine.AccountStateMachine.transitionTo(AccountStateMachine.kt:12)\n\tat com.arbm.digibank.accounts.savingaccount.SavingAccountService.transitionTo(SavingAccountService.kt:226)\n\tat com.arbm.digibank.accounts.savingaccount.SavingAccountService.transitionTo$default(SavingAccountService.kt:222)\n\tat com.arbm.digibank.accounts.savingaccount.SavingAccountService.prepareInactiveSavingAccount(SavingAccountService.kt:136)\n\tat com.arbm.digibank.accounts.savingaccount.SavingAccountService$$FastClassBySpringCGLIB$$5e5b4b5f.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.retry.annotation.AnnotationAwareRetryOperationsInterceptor.invoke(AnnotationAwareRetryOperationsInterceptor.java:162)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat com.arbm.digibank.accounts.savingaccount.SavingAccountService$$EnhancerBySpringCGLIB$$182c9fb4.prepareInactiveSavingAccount(<generated>)\n\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.handleSavingAccountEvent(PortfolioEventProcessor.kt:85)\n\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(PortfolioEventProcessor.kt:46)\n\tat jdk.internal.reflect.GeneratedMethodAccessor295.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$ba1defd9.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\t... 11 common frames omitted\n",
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:12:28.339",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:12:28.339Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_portfolio_account_linked_events-7, groupId=deposit_portfolio_account_linked_events] Seeking to offset 82657 for partition deposit.portfolio.account.linked.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:12:26.337",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:12:26.337Z",
            "@version": "1",
            "message": "Illegal attempt to make transition from ACTIVE to INACTIVE",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.StateChangeHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "6dcab467156bdc67",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:12:26.334",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:12:26.334Z",
            "@version": "1",
            "message": "prepare inactive saving account",
            "logger_name": "com.arbm.digibank.accounts.savingaccount.SavingAccountService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "6dcab467156bdc67",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:12:26.334",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:12:26.334Z",
            "@version": "1",
            "message": "Received portfolio to account linkage event: {\"portfolioId\": \"eeeda3ac-aa84-465e-b260-449bafaa3d7e\", \"accountId\": \"aeb15156-1a75-422a-81df-011a2b82f9ad\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "6dcab467156bdc67",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:12:26.332",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:12:26.332Z",
            "@version": "1",
            "message": "Received PortfolioLinkedWithAccountEvent: {\"portfolioId\": \"eeeda3ac-aa84-465e-b260-449bafaa3d7e\", \"accountId\": \"aeb15156-1a75-422a-81df-011a2b82f9ad\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "6dcab467156bdc67",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:11:34.656",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:11:30.877Z",
            "@version": "1",
            "message": "new status",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "514da699b2d22281",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:11:34.656",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:11:30.877Z",
            "@version": "1",
            "message": "onEnter run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "514da699b2d22281",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:11:34.656",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:11:30.877Z",
            "@version": "1",
            "message": "on Exit run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "514da699b2d22281",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:11:34.656",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:11:30.877Z",
            "@version": "1",
            "message": "validateTransition",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "514da699b2d22281",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:11:34.656",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:11:30.871Z",
            "@version": "1",
            "message": "Received portfolio to saving pot linkage event: {\"portfolioId\": \"04d26069-20e6-40d6-8bbb-8768db6f20a9\", \"accountId\": \"abcb0278-c5ab-4be3-9843-9f04b34f6a10\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "514da699b2d22281",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:11:34.656",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:11:30.868Z",
            "@version": "1",
            "message": "Received PortfolioLinkedWithAccountEvent: {\"portfolioId\": \"04d26069-20e6-40d6-8bbb-8768db6f20a9\", \"accountId\": \"abcb0278-c5ab-4be3-9843-9f04b34f6a10\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "514da699b2d22281",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:11:34.656",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:11:30.867Z",
            "@version": "1",
            "message": "Error handler threw an exception",
            "logger_name": "org.springframework.kafka.listener.KafkaMessageListenerContainer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Seek to current after exception; nested exception is org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:208)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2719)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2689)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t... 9 common frames omitted\nCaused by: org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\tSuppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: \nError has been observed at the following site(s):\n\t*__checkpoint ⇢ 409 from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses [DefaultWebClient]\nOriginal Stack Trace:\n\t\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\t\tat org.springframework.web.reactive.function.client.DefaultClientResponse.lambda$createException$1(DefaultClientResponse.java:207)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:106)\n\t\tat reactor.core.publisher.FluxOnErrorReturn$ReturnSubscriber.onNext(FluxOnErrorReturn.java:162)\n\t\tat reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:101)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)\n\t\tat reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)\n\t\tat reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)\n\t\tat reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1816)\n\t\tat reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:160)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat reactor.netty.channel.FluxReceive.onInboundComplete(FluxReceive.java:400)\n\t\tat reactor.netty.channel.ChannelOperations.onInboundComplete(ChannelOperations.java:419)\n\t\tat reactor.netty.channel.ChannelOperations.terminate(ChannelOperations.java:473)\n\t\tat reactor.netty.http.client.HttpClientOperations.onInboundNext(HttpClientOperations.java:702)\n\t\tat reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:113)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:336)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:308)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\n\t\tat io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe.epollInReady(AbstractEpollStreamChannel.java:800)\n\t\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\n\t\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\n\t\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\n\t\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\n\t\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n\tSuppressed: java.lang.Exception: #block terminated with an error\n\t\tat reactor.core.publisher.BlockingSingleSubscriber.blockingGet(BlockingSingleSubscriber.java:99)\n\t\tat reactor.core.publisher.Mono.block(Mono.java:1707)\n\t\tat com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl.saveAsyncResult(AsyncResponseServiceImpl.kt:17)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.produceSavingPotCreatedAsyncResult(SavingPotActiveHandler.kt:49)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:39)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:17)\n\t\tat com.arbm.digibank.accounts.common.statemachine.AccountStateMachine.transitionTo(AccountStateMachine.kt:20)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo(SavingPotService.kt:251)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo$default(SavingPotService.kt:247)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.activateSavingPot(SavingPotService.kt:117)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$FastClassBySpringCGLIB$$ece3748f.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.retry.annotation.AnnotationAwareRetryOperationsInterceptor.invoke(AnnotationAwareRetryOperationsInterceptor.java:162)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$EnhancerBySpringCGLIB$$decf1564.activateSavingPot(<generated>)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.handleSavingPotEvent(PortfolioEventProcessor.kt:90)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(PortfolioEventProcessor.kt:47)\n\t\tat jdk.internal.reflect.GeneratedMethodAccessor295.invoke(Unknown Source)\n\t\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\t\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\t\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\t\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$ba1defd9.onMessage(<generated>)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\t\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\t\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:11:34.656",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:11:30.866Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_portfolio_account_linked_events-7, groupId=deposit_portfolio_account_linked_events] Seeking to offset 82656 for partition deposit.portfolio.account.linked.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:11:34.656",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:11:30.877Z",
            "@version": "1",
            "message": "Produced: {\"accountId\": \"abcb0278-c5ab-4be3-9843-9f04b34f6a10\"}",
            "logger_name": "com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "514da699b2d22281",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:11:34.656",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:11:30.877Z",
            "@version": "1",
            "message": "Saving response under id abcb0278-c5ab-4be3-9843-9f04b34f6a10",
            "logger_name": "com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "514da699b2d22281",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:11:26.857",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:11:26.856Z",
            "@version": "1",
            "message": "validateTransition",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "a076166be05b5517",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:11:26.857",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:11:26.856Z",
            "@version": "1",
            "message": "on Exit run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "a076166be05b5517",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:11:26.857",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:11:26.856Z",
            "@version": "1",
            "message": "onEnter run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "a076166be05b5517",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:11:26.857",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:11:26.857Z",
            "@version": "1",
            "message": "new status",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "a076166be05b5517",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:11:26.857",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:11:26.857Z",
            "@version": "1",
            "message": "Produced: {\"accountId\": \"abcb0278-c5ab-4be3-9843-9f04b34f6a10\"}",
            "logger_name": "com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "a076166be05b5517",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:11:26.857",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:11:26.857Z",
            "@version": "1",
            "message": "Saving response under id abcb0278-c5ab-4be3-9843-9f04b34f6a10",
            "logger_name": "com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "a076166be05b5517",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:11:26.851",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:11:26.851Z",
            "@version": "1",
            "message": "Received portfolio to saving pot linkage event: {\"portfolioId\": \"04d26069-20e6-40d6-8bbb-8768db6f20a9\", \"accountId\": \"abcb0278-c5ab-4be3-9843-9f04b34f6a10\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "a076166be05b5517",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:11:26.847",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:11:26.847Z",
            "@version": "1",
            "message": "Received PortfolioLinkedWithAccountEvent: {\"portfolioId\": \"04d26069-20e6-40d6-8bbb-8768db6f20a9\", \"accountId\": \"abcb0278-c5ab-4be3-9843-9f04b34f6a10\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "a076166be05b5517",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:11:26.846",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:11:26.845Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_portfolio_account_linked_events-7, groupId=deposit_portfolio_account_linked_events] Seeking to offset 82656 for partition deposit.portfolio.account.linked.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:11:26.846",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:11:26.846Z",
            "@version": "1",
            "message": "Error handler threw an exception",
            "logger_name": "org.springframework.kafka.listener.KafkaMessageListenerContainer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Seek to current after exception; nested exception is org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:208)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2719)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2689)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t... 9 common frames omitted\nCaused by: org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\tSuppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: \nError has been observed at the following site(s):\n\t*__checkpoint ⇢ 409 from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses [DefaultWebClient]\nOriginal Stack Trace:\n\t\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\t\tat org.springframework.web.reactive.function.client.DefaultClientResponse.lambda$createException$1(DefaultClientResponse.java:207)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:106)\n\t\tat reactor.core.publisher.FluxOnErrorReturn$ReturnSubscriber.onNext(FluxOnErrorReturn.java:162)\n\t\tat reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:101)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)\n\t\tat reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)\n\t\tat reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)\n\t\tat reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1816)\n\t\tat reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:160)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat reactor.netty.channel.FluxReceive.onInboundComplete(FluxReceive.java:400)\n\t\tat reactor.netty.channel.ChannelOperations.onInboundComplete(ChannelOperations.java:419)\n\t\tat reactor.netty.channel.ChannelOperations.terminate(ChannelOperations.java:473)\n\t\tat reactor.netty.http.client.HttpClientOperations.onInboundNext(HttpClientOperations.java:702)\n\t\tat reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:113)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:336)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:308)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\n\t\tat io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe.epollInReady(AbstractEpollStreamChannel.java:800)\n\t\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\n\t\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\n\t\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\n\t\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\n\t\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n\tSuppressed: java.lang.Exception: #block terminated with an error\n\t\tat reactor.core.publisher.BlockingSingleSubscriber.blockingGet(BlockingSingleSubscriber.java:99)\n\t\tat reactor.core.publisher.Mono.block(Mono.java:1707)\n\t\tat com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl.saveAsyncResult(AsyncResponseServiceImpl.kt:17)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.produceSavingPotCreatedAsyncResult(SavingPotActiveHandler.kt:49)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:39)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:17)\n\t\tat com.arbm.digibank.accounts.common.statemachine.AccountStateMachine.transitionTo(AccountStateMachine.kt:20)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo(SavingPotService.kt:251)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo$default(SavingPotService.kt:247)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.activateSavingPot(SavingPotService.kt:117)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$FastClassBySpringCGLIB$$ece3748f.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.retry.annotation.AnnotationAwareRetryOperationsInterceptor.invoke(AnnotationAwareRetryOperationsInterceptor.java:162)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$EnhancerBySpringCGLIB$$decf1564.activateSavingPot(<generated>)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.handleSavingPotEvent(PortfolioEventProcessor.kt:90)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(PortfolioEventProcessor.kt:47)\n\t\tat jdk.internal.reflect.GeneratedMethodAccessor295.invoke(Unknown Source)\n\t\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\t\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\t\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\t\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$ba1defd9.onMessage(<generated>)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\t\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\t\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:11:24.837",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:11:24.837Z",
            "@version": "1",
            "message": "validateTransition",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "3428b9ec93c74f60",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:11:24.837",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:11:24.837Z",
            "@version": "1",
            "message": "on Exit run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "3428b9ec93c74f60",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:11:24.837",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:11:24.837Z",
            "@version": "1",
            "message": "onEnter run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "3428b9ec93c74f60",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:11:24.837",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:11:24.837Z",
            "@version": "1",
            "message": "new status",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "3428b9ec93c74f60",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:11:24.837",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:11:24.837Z",
            "@version": "1",
            "message": "Produced: {\"accountId\": \"abcb0278-c5ab-4be3-9843-9f04b34f6a10\"}",
            "logger_name": "com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "3428b9ec93c74f60",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:11:24.837",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:11:24.837Z",
            "@version": "1",
            "message": "Saving response under id abcb0278-c5ab-4be3-9843-9f04b34f6a10",
            "logger_name": "com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "3428b9ec93c74f60",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:11:24.831",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:11:24.831Z",
            "@version": "1",
            "message": "Received portfolio to saving pot linkage event: {\"portfolioId\": \"04d26069-20e6-40d6-8bbb-8768db6f20a9\", \"accountId\": \"abcb0278-c5ab-4be3-9843-9f04b34f6a10\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "3428b9ec93c74f60",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:11:24.827",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:11:24.827Z",
            "@version": "1",
            "message": "Received PortfolioLinkedWithAccountEvent: {\"portfolioId\": \"04d26069-20e6-40d6-8bbb-8768db6f20a9\", \"accountId\": \"abcb0278-c5ab-4be3-9843-9f04b34f6a10\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "3428b9ec93c74f60",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:11:24.819",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:11:24.819Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_portfolio_account_linked_events-7, groupId=deposit_portfolio_account_linked_events] Seeking to offset 82656 for partition deposit.portfolio.account.linked.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:11:23.601",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:11:23.6Z",
            "@version": "1",
            "message": "Saving response under id 248921c4-7bd9-46a5-ad5f-f643ae3730a1",
            "logger_name": "com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "c10b995e9fc63281",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:11:23.601",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:11:23.6Z",
            "@version": "1",
            "message": "Produced: {\"accountId\": \"248921c4-7bd9-46a5-ad5f-f643ae3730a1\"}",
            "logger_name": "com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "c10b995e9fc63281",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:11:23.600",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:11:23.6Z",
            "@version": "1",
            "message": "new status",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "c10b995e9fc63281",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:11:23.600",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:11:23.6Z",
            "@version": "1",
            "message": "onEnter run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "c10b995e9fc63281",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:11:23.600",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:11:23.6Z",
            "@version": "1",
            "message": "on Exit run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "c10b995e9fc63281",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:11:23.600",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:11:23.6Z",
            "@version": "1",
            "message": "validateTransition",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "c10b995e9fc63281",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:11:23.594",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:11:23.594Z",
            "@version": "1",
            "message": "Received portfolio to saving pot linkage event: {\"portfolioId\": \"04d26069-20e6-40d6-8bbb-8768db6f20a9\", \"accountId\": \"248921c4-7bd9-46a5-ad5f-f643ae3730a1\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "c10b995e9fc63281",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:11:23.590",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:11:23.59Z",
            "@version": "1",
            "message": "Received PortfolioLinkedWithAccountEvent: {\"portfolioId\": \"04d26069-20e6-40d6-8bbb-8768db6f20a9\", \"accountId\": \"248921c4-7bd9-46a5-ad5f-f643ae3730a1\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "c10b995e9fc63281",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:11:23.589",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:11:23.588Z",
            "@version": "1",
            "message": "Error handler threw an exception",
            "logger_name": "org.springframework.kafka.listener.KafkaMessageListenerContainer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Seek to current after exception; nested exception is org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:208)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2719)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2689)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t... 9 common frames omitted\nCaused by: org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\tSuppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: \nError has been observed at the following site(s):\n\t*__checkpoint ⇢ 409 from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses [DefaultWebClient]\nOriginal Stack Trace:\n\t\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\t\tat org.springframework.web.reactive.function.client.DefaultClientResponse.lambda$createException$1(DefaultClientResponse.java:207)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:106)\n\t\tat reactor.core.publisher.FluxOnErrorReturn$ReturnSubscriber.onNext(FluxOnErrorReturn.java:162)\n\t\tat reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:101)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)\n\t\tat reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)\n\t\tat reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)\n\t\tat reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1816)\n\t\tat reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:160)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat reactor.netty.channel.FluxReceive.onInboundComplete(FluxReceive.java:400)\n\t\tat reactor.netty.channel.ChannelOperations.onInboundComplete(ChannelOperations.java:419)\n\t\tat reactor.netty.channel.ChannelOperations.terminate(ChannelOperations.java:473)\n\t\tat reactor.netty.http.client.HttpClientOperations.onInboundNext(HttpClientOperations.java:702)\n\t\tat reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:113)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:336)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:308)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\n\t\tat io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe.epollInReady(AbstractEpollStreamChannel.java:800)\n\t\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\n\t\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\n\t\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\n\t\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\n\t\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n\tSuppressed: java.lang.Exception: #block terminated with an error\n\t\tat reactor.core.publisher.BlockingSingleSubscriber.blockingGet(BlockingSingleSubscriber.java:99)\n\t\tat reactor.core.publisher.Mono.block(Mono.java:1707)\n\t\tat com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl.saveAsyncResult(AsyncResponseServiceImpl.kt:17)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.produceSavingPotCreatedAsyncResult(SavingPotActiveHandler.kt:49)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:39)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:17)\n\t\tat com.arbm.digibank.accounts.common.statemachine.AccountStateMachine.transitionTo(AccountStateMachine.kt:20)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo(SavingPotService.kt:251)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo$default(SavingPotService.kt:247)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.activateSavingPot(SavingPotService.kt:117)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$FastClassBySpringCGLIB$$ece3748f.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.retry.annotation.AnnotationAwareRetryOperationsInterceptor.invoke(AnnotationAwareRetryOperationsInterceptor.java:162)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$EnhancerBySpringCGLIB$$decf1564.activateSavingPot(<generated>)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.handleSavingPotEvent(PortfolioEventProcessor.kt:90)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(PortfolioEventProcessor.kt:47)\n\t\tat jdk.internal.reflect.GeneratedMethodAccessor295.invoke(Unknown Source)\n\t\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\t\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\t\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\t\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$ba1defd9.onMessage(<generated>)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\t\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\t\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:11:23.588",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:11:23.588Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_portfolio_account_linked_events-7, groupId=deposit_portfolio_account_linked_events] Seeking to offset 82655 for partition deposit.portfolio.account.linked.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:11:19.624",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:11:19.578Z",
            "@version": "1",
            "message": "Saving response under id 248921c4-7bd9-46a5-ad5f-f643ae3730a1",
            "logger_name": "com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "ea1e939240418a75",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:11:19.624",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:11:19.578Z",
            "@version": "1",
            "message": "Produced: {\"accountId\": \"248921c4-7bd9-46a5-ad5f-f643ae3730a1\"}",
            "logger_name": "com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "ea1e939240418a75",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:11:19.624",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:11:19.577Z",
            "@version": "1",
            "message": "new status",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "ea1e939240418a75",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:11:19.624",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:11:19.577Z",
            "@version": "1",
            "message": "onEnter run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "ea1e939240418a75",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:11:19.624",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:11:19.577Z",
            "@version": "1",
            "message": "on Exit run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "ea1e939240418a75",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:11:19.624",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:11:19.577Z",
            "@version": "1",
            "message": "validateTransition",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "ea1e939240418a75",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:11:19.624",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:11:19.572Z",
            "@version": "1",
            "message": "Received portfolio to saving pot linkage event: {\"portfolioId\": \"04d26069-20e6-40d6-8bbb-8768db6f20a9\", \"accountId\": \"248921c4-7bd9-46a5-ad5f-f643ae3730a1\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "ea1e939240418a75",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:11:19.624",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:11:19.568Z",
            "@version": "1",
            "message": "Received PortfolioLinkedWithAccountEvent: {\"portfolioId\": \"04d26069-20e6-40d6-8bbb-8768db6f20a9\", \"accountId\": \"248921c4-7bd9-46a5-ad5f-f643ae3730a1\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "ea1e939240418a75",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:11:19.294",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:11:19.293Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_portfolio_account_linked_events-7, groupId=deposit_portfolio_account_linked_events] Seeking to offset 82655 for partition deposit.portfolio.account.linked.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:11:19.294",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:11:19.294Z",
            "@version": "1",
            "message": "Error handler threw an exception",
            "logger_name": "org.springframework.kafka.listener.KafkaMessageListenerContainer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Seek to current after exception; nested exception is org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:208)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2719)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2689)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t... 9 common frames omitted\nCaused by: org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\tSuppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: \nError has been observed at the following site(s):\n\t*__checkpoint ⇢ 409 from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses [DefaultWebClient]\nOriginal Stack Trace:\n\t\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\t\tat org.springframework.web.reactive.function.client.DefaultClientResponse.lambda$createException$1(DefaultClientResponse.java:207)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:106)\n\t\tat reactor.core.publisher.FluxOnErrorReturn$ReturnSubscriber.onNext(FluxOnErrorReturn.java:162)\n\t\tat reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:101)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)\n\t\tat reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)\n\t\tat reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)\n\t\tat reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1816)\n\t\tat reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:160)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat reactor.netty.channel.FluxReceive.onInboundComplete(FluxReceive.java:400)\n\t\tat reactor.netty.channel.ChannelOperations.onInboundComplete(ChannelOperations.java:419)\n\t\tat reactor.netty.channel.ChannelOperations.terminate(ChannelOperations.java:473)\n\t\tat reactor.netty.http.client.HttpClientOperations.onInboundNext(HttpClientOperations.java:702)\n\t\tat reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:113)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:336)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:308)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\n\t\tat io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe.epollInReady(AbstractEpollStreamChannel.java:800)\n\t\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\n\t\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\n\t\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\n\t\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\n\t\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n\tSuppressed: java.lang.Exception: #block terminated with an error\n\t\tat reactor.core.publisher.BlockingSingleSubscriber.blockingGet(BlockingSingleSubscriber.java:99)\n\t\tat reactor.core.publisher.Mono.block(Mono.java:1707)\n\t\tat com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl.saveAsyncResult(AsyncResponseServiceImpl.kt:17)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.produceSavingPotCreatedAsyncResult(SavingPotActiveHandler.kt:49)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:39)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:17)\n\t\tat com.arbm.digibank.accounts.common.statemachine.AccountStateMachine.transitionTo(AccountStateMachine.kt:20)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo(SavingPotService.kt:251)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo$default(SavingPotService.kt:247)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.activateSavingPot(SavingPotService.kt:117)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$FastClassBySpringCGLIB$$ece3748f.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.retry.annotation.AnnotationAwareRetryOperationsInterceptor.invoke(AnnotationAwareRetryOperationsInterceptor.java:162)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$EnhancerBySpringCGLIB$$decf1564.activateSavingPot(<generated>)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.handleSavingPotEvent(PortfolioEventProcessor.kt:90)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(PortfolioEventProcessor.kt:47)\n\t\tat jdk.internal.reflect.GeneratedMethodAccessor295.invoke(Unknown Source)\n\t\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\t\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\t\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\t\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$ba1defd9.onMessage(<generated>)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\t\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\t\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:11:17.284",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:11:17.284Z",
            "@version": "1",
            "message": "Produced: {\"accountId\": \"248921c4-7bd9-46a5-ad5f-f643ae3730a1\"}",
            "logger_name": "com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "75db2f07f0abc56c",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:11:17.284",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:11:17.284Z",
            "@version": "1",
            "message": "Saving response under id 248921c4-7bd9-46a5-ad5f-f643ae3730a1",
            "logger_name": "com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "75db2f07f0abc56c",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:11:17.283",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:11:17.283Z",
            "@version": "1",
            "message": "validateTransition",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "75db2f07f0abc56c",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:11:17.283",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:11:17.283Z",
            "@version": "1",
            "message": "on Exit run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "75db2f07f0abc56c",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:11:17.283",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:11:17.283Z",
            "@version": "1",
            "message": "onEnter run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "75db2f07f0abc56c",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:11:17.283",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:11:17.283Z",
            "@version": "1",
            "message": "new status",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "75db2f07f0abc56c",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:11:17.275",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:11:17.275Z",
            "@version": "1",
            "message": "Received portfolio to saving pot linkage event: {\"portfolioId\": \"04d26069-20e6-40d6-8bbb-8768db6f20a9\", \"accountId\": \"248921c4-7bd9-46a5-ad5f-f643ae3730a1\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "75db2f07f0abc56c",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:11:17.271",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:11:17.271Z",
            "@version": "1",
            "message": "Received PortfolioLinkedWithAccountEvent: {\"portfolioId\": \"04d26069-20e6-40d6-8bbb-8768db6f20a9\", \"accountId\": \"248921c4-7bd9-46a5-ad5f-f643ae3730a1\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091baf79e7f0abe70bd60fb87374",
            "spanId": "75db2f07f0abc56c",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:10:53.925",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:10:53.924Z",
            "@version": "1",
            "message": "Request to retrieve account by following accountNumber: 912010110364599",
            "logger_name": "com.arbm.digibank.accounts.savingaccount.controller.SavingAccountControllerV1",
            "thread_name": "http-nio-8080-exec-9",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0098d0e510ac838a137715201acaa",
            "spanId": "251435e42903c9b5",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:10:50.504",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:10:50.504Z",
            "@version": "1",
            "message": "Request to retrieve account by following accountNumber: 912010110364599",
            "logger_name": "com.arbm.digibank.accounts.savingaccount.controller.SavingAccountControllerV1",
            "thread_name": "http-nio-8080-exec-4",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0098a40aeed9060390c996482ffa3",
            "spanId": "95e3eeaba935f613",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:10:38.167",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:10:38.166Z",
            "@version": "1",
            "message": "Request to retrieve account by following accountNumber: 912010110111214",
            "logger_name": "com.arbm.digibank.accounts.savingaccount.controller.SavingAccountControllerV1",
            "thread_name": "http-nio-8080-exec-2",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0097e4a4035332111ef30117c739f",
            "spanId": "63fce905cdaa7bdb",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:10:03.265",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:10:03.265Z",
            "@version": "1",
            "message": "validateTransition",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "aa6baa2dab519237",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:10:03.265",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:10:03.265Z",
            "@version": "1",
            "message": "on Exit run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "aa6baa2dab519237",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:10:03.265",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:10:03.265Z",
            "@version": "1",
            "message": "new status",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "aa6baa2dab519237",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:10:03.265",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:10:03.265Z",
            "@version": "1",
            "message": "onEnter run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "aa6baa2dab519237",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:10:03.265",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:10:03.265Z",
            "@version": "1",
            "message": "Produced: {\"accountId\": \"b4ef4e64-d69e-4409-ab83-338be2467388\"}",
            "logger_name": "com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "aa6baa2dab519237",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:10:03.265",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:10:03.265Z",
            "@version": "1",
            "message": "Saving response under id b4ef4e64-d69e-4409-ab83-338be2467388",
            "logger_name": "com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "aa6baa2dab519237",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:10:03.259",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:10:03.259Z",
            "@version": "1",
            "message": "Received portfolio to saving pot linkage event: {\"portfolioId\": \"0d98c140-0c31-4a2a-886d-88b874a368b9\", \"accountId\": \"b4ef4e64-d69e-4409-ab83-338be2467388\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "aa6baa2dab519237",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:10:03.256",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:10:03.256Z",
            "@version": "1",
            "message": "Received PortfolioLinkedWithAccountEvent: {\"portfolioId\": \"0d98c140-0c31-4a2a-886d-88b874a368b9\", \"accountId\": \"b4ef4e64-d69e-4409-ab83-338be2467388\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "aa6baa2dab519237",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:10:03.255",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:10:03.254Z",
            "@version": "1",
            "message": "Error handler threw an exception",
            "logger_name": "org.springframework.kafka.listener.KafkaMessageListenerContainer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Seek to current after exception; nested exception is org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:208)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2719)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2689)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t... 9 common frames omitted\nCaused by: org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\tSuppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: \nError has been observed at the following site(s):\n\t*__checkpoint ⇢ 409 from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses [DefaultWebClient]\nOriginal Stack Trace:\n\t\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\t\tat org.springframework.web.reactive.function.client.DefaultClientResponse.lambda$createException$1(DefaultClientResponse.java:207)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:106)\n\t\tat reactor.core.publisher.FluxOnErrorReturn$ReturnSubscriber.onNext(FluxOnErrorReturn.java:162)\n\t\tat reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:101)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)\n\t\tat reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)\n\t\tat reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)\n\t\tat reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1816)\n\t\tat reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:160)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat reactor.netty.channel.FluxReceive.onInboundComplete(FluxReceive.java:400)\n\t\tat reactor.netty.channel.ChannelOperations.onInboundComplete(ChannelOperations.java:419)\n\t\tat reactor.netty.channel.ChannelOperations.terminate(ChannelOperations.java:473)\n\t\tat reactor.netty.http.client.HttpClientOperations.onInboundNext(HttpClientOperations.java:702)\n\t\tat reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:113)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:336)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:308)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\n\t\tat io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe.epollInReady(AbstractEpollStreamChannel.java:800)\n\t\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\n\t\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\n\t\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\n\t\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\n\t\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n\tSuppressed: java.lang.Exception: #block terminated with an error\n\t\tat reactor.core.publisher.BlockingSingleSubscriber.blockingGet(BlockingSingleSubscriber.java:99)\n\t\tat reactor.core.publisher.Mono.block(Mono.java:1707)\n\t\tat com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl.saveAsyncResult(AsyncResponseServiceImpl.kt:17)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.produceSavingPotCreatedAsyncResult(SavingPotActiveHandler.kt:49)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:39)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:17)\n\t\tat com.arbm.digibank.accounts.common.statemachine.AccountStateMachine.transitionTo(AccountStateMachine.kt:20)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo(SavingPotService.kt:251)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo$default(SavingPotService.kt:247)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.activateSavingPot(SavingPotService.kt:117)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$FastClassBySpringCGLIB$$ece3748f.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.retry.annotation.AnnotationAwareRetryOperationsInterceptor.invoke(AnnotationAwareRetryOperationsInterceptor.java:162)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$EnhancerBySpringCGLIB$$decf1564.activateSavingPot(<generated>)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.handleSavingPotEvent(PortfolioEventProcessor.kt:90)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(PortfolioEventProcessor.kt:47)\n\t\tat jdk.internal.reflect.GeneratedMethodAccessor295.invoke(Unknown Source)\n\t\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\t\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\t\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\t\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$ba1defd9.onMessage(<generated>)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\t\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\t\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:10:03.254",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:10:03.254Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_portfolio_account_linked_events-7, groupId=deposit_portfolio_account_linked_events] Seeking to offset 82654 for partition deposit.portfolio.account.linked.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:09:59.244",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:09:59.243Z",
            "@version": "1",
            "message": "validateTransition",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "6b96b57dace9f69b",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:09:59.244",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:09:59.243Z",
            "@version": "1",
            "message": "on Exit run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "6b96b57dace9f69b",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:09:59.244",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:09:59.243Z",
            "@version": "1",
            "message": "onEnter run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "6b96b57dace9f69b",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:09:59.244",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:09:59.243Z",
            "@version": "1",
            "message": "new status",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "6b96b57dace9f69b",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:09:59.244",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:09:59.244Z",
            "@version": "1",
            "message": "Produced: {\"accountId\": \"b4ef4e64-d69e-4409-ab83-338be2467388\"}",
            "logger_name": "com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "6b96b57dace9f69b",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:09:59.244",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:09:59.244Z",
            "@version": "1",
            "message": "Saving response under id b4ef4e64-d69e-4409-ab83-338be2467388",
            "logger_name": "com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "6b96b57dace9f69b",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:09:59.238",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:09:59.237Z",
            "@version": "1",
            "message": "Received portfolio to saving pot linkage event: {\"portfolioId\": \"0d98c140-0c31-4a2a-886d-88b874a368b9\", \"accountId\": \"b4ef4e64-d69e-4409-ab83-338be2467388\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "6b96b57dace9f69b",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:09:59.234",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:09:59.234Z",
            "@version": "1",
            "message": "Received PortfolioLinkedWithAccountEvent: {\"portfolioId\": \"0d98c140-0c31-4a2a-886d-88b874a368b9\", \"accountId\": \"b4ef4e64-d69e-4409-ab83-338be2467388\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "6b96b57dace9f69b",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:09:59.233",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:09:59.232Z",
            "@version": "1",
            "message": "Error handler threw an exception",
            "logger_name": "org.springframework.kafka.listener.KafkaMessageListenerContainer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Seek to current after exception; nested exception is org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:208)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2719)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2689)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t... 9 common frames omitted\nCaused by: org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\tSuppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: \nError has been observed at the following site(s):\n\t*__checkpoint ⇢ 409 from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses [DefaultWebClient]\nOriginal Stack Trace:\n\t\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\t\tat org.springframework.web.reactive.function.client.DefaultClientResponse.lambda$createException$1(DefaultClientResponse.java:207)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:106)\n\t\tat reactor.core.publisher.FluxOnErrorReturn$ReturnSubscriber.onNext(FluxOnErrorReturn.java:162)\n\t\tat reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:101)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)\n\t\tat reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)\n\t\tat reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)\n\t\tat reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1816)\n\t\tat reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:160)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat reactor.netty.channel.FluxReceive.onInboundComplete(FluxReceive.java:400)\n\t\tat reactor.netty.channel.ChannelOperations.onInboundComplete(ChannelOperations.java:419)\n\t\tat reactor.netty.channel.ChannelOperations.terminate(ChannelOperations.java:473)\n\t\tat reactor.netty.http.client.HttpClientOperations.onInboundNext(HttpClientOperations.java:702)\n\t\tat reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:113)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:336)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:308)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\n\t\tat io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe.epollInReady(AbstractEpollStreamChannel.java:800)\n\t\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\n\t\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\n\t\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\n\t\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\n\t\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n\tSuppressed: java.lang.Exception: #block terminated with an error\n\t\tat reactor.core.publisher.BlockingSingleSubscriber.blockingGet(BlockingSingleSubscriber.java:99)\n\t\tat reactor.core.publisher.Mono.block(Mono.java:1707)\n\t\tat com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl.saveAsyncResult(AsyncResponseServiceImpl.kt:17)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.produceSavingPotCreatedAsyncResult(SavingPotActiveHandler.kt:49)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:39)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:17)\n\t\tat com.arbm.digibank.accounts.common.statemachine.AccountStateMachine.transitionTo(AccountStateMachine.kt:20)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo(SavingPotService.kt:251)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo$default(SavingPotService.kt:247)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.activateSavingPot(SavingPotService.kt:117)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$FastClassBySpringCGLIB$$ece3748f.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.retry.annotation.AnnotationAwareRetryOperationsInterceptor.invoke(AnnotationAwareRetryOperationsInterceptor.java:162)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$EnhancerBySpringCGLIB$$decf1564.activateSavingPot(<generated>)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.handleSavingPotEvent(PortfolioEventProcessor.kt:90)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(PortfolioEventProcessor.kt:47)\n\t\tat jdk.internal.reflect.GeneratedMethodAccessor295.invoke(Unknown Source)\n\t\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\t\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\t\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\t\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$ba1defd9.onMessage(<generated>)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\t\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\t\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:09:59.232",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:09:59.232Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_portfolio_account_linked_events-7, groupId=deposit_portfolio_account_linked_events] Seeking to offset 82654 for partition deposit.portfolio.account.linked.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:09:57.224",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:09:57.224Z",
            "@version": "1",
            "message": "validateTransition",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "287d5c2fd818a36c",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:09:57.224",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:09:57.224Z",
            "@version": "1",
            "message": "on Exit run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "287d5c2fd818a36c",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:09:57.224",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:09:57.224Z",
            "@version": "1",
            "message": "onEnter run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "287d5c2fd818a36c",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:09:57.224",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:09:57.224Z",
            "@version": "1",
            "message": "new status",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "287d5c2fd818a36c",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:09:57.224",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:09:57.224Z",
            "@version": "1",
            "message": "Produced: {\"accountId\": \"b4ef4e64-d69e-4409-ab83-338be2467388\"}",
            "logger_name": "com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "287d5c2fd818a36c",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:09:57.224",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:09:57.224Z",
            "@version": "1",
            "message": "Saving response under id b4ef4e64-d69e-4409-ab83-338be2467388",
            "logger_name": "com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "287d5c2fd818a36c",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:09:57.219",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:09:57.219Z",
            "@version": "1",
            "message": "Received portfolio to saving pot linkage event: {\"portfolioId\": \"0d98c140-0c31-4a2a-886d-88b874a368b9\", \"accountId\": \"b4ef4e64-d69e-4409-ab83-338be2467388\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "287d5c2fd818a36c",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:09:57.216",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:09:57.216Z",
            "@version": "1",
            "message": "Received PortfolioLinkedWithAccountEvent: {\"portfolioId\": \"0d98c140-0c31-4a2a-886d-88b874a368b9\", \"accountId\": \"b4ef4e64-d69e-4409-ab83-338be2467388\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "287d5c2fd818a36c",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:09:56.739",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:09:56.738Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_portfolio_account_linked_events-7, groupId=deposit_portfolio_account_linked_events] Seeking to offset 82654 for partition deposit.portfolio.account.linked.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:09:56.724",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:09:56.724Z",
            "@version": "1",
            "message": "validateTransition",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "12d7efb5beecb2f6",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:09:56.724",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:09:56.724Z",
            "@version": "1",
            "message": "on Exit run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "12d7efb5beecb2f6",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:09:56.724",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:09:56.724Z",
            "@version": "1",
            "message": "onEnter run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "12d7efb5beecb2f6",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:09:56.724",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:09:56.724Z",
            "@version": "1",
            "message": "new status",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "12d7efb5beecb2f6",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:09:56.724",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:09:56.724Z",
            "@version": "1",
            "message": "Produced: {\"accountId\": \"cceaa826-e5f4-481e-9590-bba5821db2d9\"}",
            "logger_name": "com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "12d7efb5beecb2f6",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:09:56.724",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:09:56.724Z",
            "@version": "1",
            "message": "Saving response under id cceaa826-e5f4-481e-9590-bba5821db2d9",
            "logger_name": "com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "12d7efb5beecb2f6",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:09:56.718",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:09:56.718Z",
            "@version": "1",
            "message": "Received portfolio to saving pot linkage event: {\"portfolioId\": \"0d98c140-0c31-4a2a-886d-88b874a368b9\", \"accountId\": \"cceaa826-e5f4-481e-9590-bba5821db2d9\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "12d7efb5beecb2f6",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:09:56.715",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:09:56.715Z",
            "@version": "1",
            "message": "Received PortfolioLinkedWithAccountEvent: {\"portfolioId\": \"0d98c140-0c31-4a2a-886d-88b874a368b9\", \"accountId\": \"cceaa826-e5f4-481e-9590-bba5821db2d9\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "12d7efb5beecb2f6",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:09:56.714",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:09:56.714Z",
            "@version": "1",
            "message": "Error handler threw an exception",
            "logger_name": "org.springframework.kafka.listener.KafkaMessageListenerContainer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Seek to current after exception; nested exception is org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:208)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2719)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2689)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t... 9 common frames omitted\nCaused by: org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\tSuppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: \nError has been observed at the following site(s):\n\t*__checkpoint ⇢ 409 from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses [DefaultWebClient]\nOriginal Stack Trace:\n\t\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\t\tat org.springframework.web.reactive.function.client.DefaultClientResponse.lambda$createException$1(DefaultClientResponse.java:207)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:106)\n\t\tat reactor.core.publisher.FluxOnErrorReturn$ReturnSubscriber.onNext(FluxOnErrorReturn.java:162)\n\t\tat reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:101)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)\n\t\tat reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)\n\t\tat reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)\n\t\tat reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1816)\n\t\tat reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:160)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat reactor.netty.channel.FluxReceive.onInboundComplete(FluxReceive.java:400)\n\t\tat reactor.netty.channel.ChannelOperations.onInboundComplete(ChannelOperations.java:419)\n\t\tat reactor.netty.channel.ChannelOperations.terminate(ChannelOperations.java:473)\n\t\tat reactor.netty.http.client.HttpClientOperations.onInboundNext(HttpClientOperations.java:702)\n\t\tat reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:113)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:336)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:308)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\n\t\tat io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe.epollInReady(AbstractEpollStreamChannel.java:800)\n\t\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\n\t\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\n\t\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\n\t\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\n\t\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n\tSuppressed: java.lang.Exception: #block terminated with an error\n\t\tat reactor.core.publisher.BlockingSingleSubscriber.blockingGet(BlockingSingleSubscriber.java:99)\n\t\tat reactor.core.publisher.Mono.block(Mono.java:1707)\n\t\tat com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl.saveAsyncResult(AsyncResponseServiceImpl.kt:17)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.produceSavingPotCreatedAsyncResult(SavingPotActiveHandler.kt:49)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:39)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:17)\n\t\tat com.arbm.digibank.accounts.common.statemachine.AccountStateMachine.transitionTo(AccountStateMachine.kt:20)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo(SavingPotService.kt:251)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo$default(SavingPotService.kt:247)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.activateSavingPot(SavingPotService.kt:117)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$FastClassBySpringCGLIB$$ece3748f.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.retry.annotation.AnnotationAwareRetryOperationsInterceptor.invoke(AnnotationAwareRetryOperationsInterceptor.java:162)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$EnhancerBySpringCGLIB$$decf1564.activateSavingPot(<generated>)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.handleSavingPotEvent(PortfolioEventProcessor.kt:90)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(PortfolioEventProcessor.kt:47)\n\t\tat jdk.internal.reflect.GeneratedMethodAccessor295.invoke(Unknown Source)\n\t\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\t\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\t\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\t\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$ba1defd9.onMessage(<generated>)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\t\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\t\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:09:56.713",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:09:56.713Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_portfolio_account_linked_events-7, groupId=deposit_portfolio_account_linked_events] Seeking to offset 82653 for partition deposit.portfolio.account.linked.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:09:52.920",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:09:52.92Z",
            "@version": "1",
            "message": "Request to retrieve account by following accountNumber: 912010110196405",
            "logger_name": "com.arbm.digibank.accounts.savingaccount.controller.SavingAccountControllerV1",
            "thread_name": "http-nio-8080-exec-4",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a00950120aec1148686a2e1c972a35",
            "spanId": "a34c1247201a1f55",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:09:52.703",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:09:52.703Z",
            "@version": "1",
            "message": "Saving response under id cceaa826-e5f4-481e-9590-bba5821db2d9",
            "logger_name": "com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "2149682d2edff52a",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:09:52.703",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:09:52.703Z",
            "@version": "1",
            "message": "Produced: {\"accountId\": \"cceaa826-e5f4-481e-9590-bba5821db2d9\"}",
            "logger_name": "com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "2149682d2edff52a",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:09:52.703",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:09:52.703Z",
            "@version": "1",
            "message": "new status",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "2149682d2edff52a",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:09:52.703",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:09:52.703Z",
            "@version": "1",
            "message": "onEnter run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "2149682d2edff52a",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:09:52.703",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:09:52.703Z",
            "@version": "1",
            "message": "on Exit run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "2149682d2edff52a",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:09:52.703",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:09:52.703Z",
            "@version": "1",
            "message": "validateTransition",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "2149682d2edff52a",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:09:52.697",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:09:52.697Z",
            "@version": "1",
            "message": "Received portfolio to saving pot linkage event: {\"portfolioId\": \"0d98c140-0c31-4a2a-886d-88b874a368b9\", \"accountId\": \"cceaa826-e5f4-481e-9590-bba5821db2d9\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "2149682d2edff52a",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:09:52.694",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:09:52.693Z",
            "@version": "1",
            "message": "Received PortfolioLinkedWithAccountEvent: {\"portfolioId\": \"0d98c140-0c31-4a2a-886d-88b874a368b9\", \"accountId\": \"cceaa826-e5f4-481e-9590-bba5821db2d9\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "2149682d2edff52a",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:09:52.693",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:09:52.692Z",
            "@version": "1",
            "message": "Error handler threw an exception",
            "logger_name": "org.springframework.kafka.listener.KafkaMessageListenerContainer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Seek to current after exception; nested exception is org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:208)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2719)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2689)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t... 9 common frames omitted\nCaused by: org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\tSuppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: \nError has been observed at the following site(s):\n\t*__checkpoint ⇢ 409 from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses [DefaultWebClient]\nOriginal Stack Trace:\n\t\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\t\tat org.springframework.web.reactive.function.client.DefaultClientResponse.lambda$createException$1(DefaultClientResponse.java:207)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:106)\n\t\tat reactor.core.publisher.FluxOnErrorReturn$ReturnSubscriber.onNext(FluxOnErrorReturn.java:162)\n\t\tat reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:101)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)\n\t\tat reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)\n\t\tat reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)\n\t\tat reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1816)\n\t\tat reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:160)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat reactor.netty.channel.FluxReceive.onInboundComplete(FluxReceive.java:400)\n\t\tat reactor.netty.channel.ChannelOperations.onInboundComplete(ChannelOperations.java:419)\n\t\tat reactor.netty.channel.ChannelOperations.terminate(ChannelOperations.java:473)\n\t\tat reactor.netty.http.client.HttpClientOperations.onInboundNext(HttpClientOperations.java:702)\n\t\tat reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:113)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:336)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:308)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\n\t\tat io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe.epollInReady(AbstractEpollStreamChannel.java:800)\n\t\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\n\t\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\n\t\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\n\t\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\n\t\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n\tSuppressed: java.lang.Exception: #block terminated with an error\n\t\tat reactor.core.publisher.BlockingSingleSubscriber.blockingGet(BlockingSingleSubscriber.java:99)\n\t\tat reactor.core.publisher.Mono.block(Mono.java:1707)\n\t\tat com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl.saveAsyncResult(AsyncResponseServiceImpl.kt:17)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.produceSavingPotCreatedAsyncResult(SavingPotActiveHandler.kt:49)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:39)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:17)\n\t\tat com.arbm.digibank.accounts.common.statemachine.AccountStateMachine.transitionTo(AccountStateMachine.kt:20)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo(SavingPotService.kt:251)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo$default(SavingPotService.kt:247)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.activateSavingPot(SavingPotService.kt:117)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$FastClassBySpringCGLIB$$ece3748f.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.retry.annotation.AnnotationAwareRetryOperationsInterceptor.invoke(AnnotationAwareRetryOperationsInterceptor.java:162)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$EnhancerBySpringCGLIB$$decf1564.activateSavingPot(<generated>)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.handleSavingPotEvent(PortfolioEventProcessor.kt:90)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(PortfolioEventProcessor.kt:47)\n\t\tat jdk.internal.reflect.GeneratedMethodAccessor295.invoke(Unknown Source)\n\t\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\t\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\t\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\t\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$ba1defd9.onMessage(<generated>)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\t\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\t\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:09:52.692",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:09:52.692Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_portfolio_account_linked_events-7, groupId=deposit_portfolio_account_linked_events] Seeking to offset 82653 for partition deposit.portfolio.account.linked.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:09:50.683",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:09:50.682Z",
            "@version": "1",
            "message": "on Exit run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "4be7fcd37b0e5871",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:09:50.683",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:09:50.682Z",
            "@version": "1",
            "message": "validateTransition",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "4be7fcd37b0e5871",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:09:50.683",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:09:50.682Z",
            "@version": "1",
            "message": "onEnter run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "4be7fcd37b0e5871",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:09:50.683",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:09:50.682Z",
            "@version": "1",
            "message": "new status",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "4be7fcd37b0e5871",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:09:50.683",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:09:50.683Z",
            "@version": "1",
            "message": "Saving response under id cceaa826-e5f4-481e-9590-bba5821db2d9",
            "logger_name": "com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "4be7fcd37b0e5871",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:09:50.683",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:09:50.683Z",
            "@version": "1",
            "message": "Produced: {\"accountId\": \"cceaa826-e5f4-481e-9590-bba5821db2d9\"}",
            "logger_name": "com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "4be7fcd37b0e5871",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:09:50.667",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:09:50.666Z",
            "@version": "1",
            "message": "Received portfolio to saving pot linkage event: {\"portfolioId\": \"0d98c140-0c31-4a2a-886d-88b874a368b9\", \"accountId\": \"cceaa826-e5f4-481e-9590-bba5821db2d9\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "4be7fcd37b0e5871",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:09:50.663",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:09:50.663Z",
            "@version": "1",
            "message": "Received PortfolioLinkedWithAccountEvent: {\"portfolioId\": \"0d98c140-0c31-4a2a-886d-88b874a368b9\", \"accountId\": \"cceaa826-e5f4-481e-9590-bba5821db2d9\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "4be7fcd37b0e5871",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:09:50.179",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:09:50.179Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_portfolio_account_linked_events-7, groupId=deposit_portfolio_account_linked_events] Seeking to offset 82653 for partition deposit.portfolio.account.linked.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:09:50.166",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:09:50.166Z",
            "@version": "1",
            "message": "Illegal attempt to make transition from ACTIVE to INACTIVE",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.StateChangeHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "6c5ae67f9adf468d",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:09:50.164",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:09:50.163Z",
            "@version": "1",
            "message": "prepare inactive saving account",
            "logger_name": "com.arbm.digibank.accounts.savingaccount.SavingAccountService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "6c5ae67f9adf468d",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:09:50.163",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:09:50.163Z",
            "@version": "1",
            "message": "Received portfolio to account linkage event: {\"portfolioId\": \"0d98c140-0c31-4a2a-886d-88b874a368b9\", \"accountId\": \"6f5a4361-5410-467d-a08d-efd981005ffc\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "6c5ae67f9adf468d",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:09:50.161",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:09:50.161Z",
            "@version": "1",
            "message": "Received PortfolioLinkedWithAccountEvent: {\"portfolioId\": \"0d98c140-0c31-4a2a-886d-88b874a368b9\", \"accountId\": \"6f5a4361-5410-467d-a08d-efd981005ffc\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "6c5ae67f9adf468d",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:09:50.160",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:09:50.16Z",
            "@version": "1",
            "message": "Error handler threw an exception",
            "logger_name": "org.springframework.kafka.listener.KafkaMessageListenerContainer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Seek to current after exception; nested exception is org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is com.arbm.digibank.accounts.common.exception.ChangeAccountStatusException: Illegal attempt to make transition from ACTIVE to INACTIVE; nested exception is com.arbm.digibank.accounts.common.exception.ChangeAccountStatusException: Illegal attempt to make transition from ACTIVE to INACTIVE\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:208)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is com.arbm.digibank.accounts.common.exception.ChangeAccountStatusException: Illegal attempt to make transition from ACTIVE to INACTIVE; nested exception is com.arbm.digibank.accounts.common.exception.ChangeAccountStatusException: Illegal attempt to make transition from ACTIVE to INACTIVE\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2719)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2689)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t... 9 common frames omitted\nCaused by: com.arbm.digibank.accounts.common.exception.ChangeAccountStatusException: Illegal attempt to make transition from ACTIVE to INACTIVE\n\tat com.arbm.digibank.accounts.common.statemachine.StateChangeHandler.validateTransition(StateChangeHandler.kt:15)\n\tat com.arbm.digibank.accounts.common.statemachine.AccountStateMachine.transitionTo(AccountStateMachine.kt:12)\n\tat com.arbm.digibank.accounts.savingaccount.SavingAccountService.transitionTo(SavingAccountService.kt:226)\n\tat com.arbm.digibank.accounts.savingaccount.SavingAccountService.transitionTo$default(SavingAccountService.kt:222)\n\tat com.arbm.digibank.accounts.savingaccount.SavingAccountService.prepareInactiveSavingAccount(SavingAccountService.kt:136)\n\tat com.arbm.digibank.accounts.savingaccount.SavingAccountService$$FastClassBySpringCGLIB$$5e5b4b5f.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.retry.annotation.AnnotationAwareRetryOperationsInterceptor.invoke(AnnotationAwareRetryOperationsInterceptor.java:162)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat com.arbm.digibank.accounts.savingaccount.SavingAccountService$$EnhancerBySpringCGLIB$$182c9fb4.prepareInactiveSavingAccount(<generated>)\n\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.handleSavingAccountEvent(PortfolioEventProcessor.kt:85)\n\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(PortfolioEventProcessor.kt:46)\n\tat jdk.internal.reflect.GeneratedMethodAccessor295.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$ba1defd9.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\t... 11 common frames omitted\n",
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:09:50.160",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:09:50.16Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_portfolio_account_linked_events-7, groupId=deposit_portfolio_account_linked_events] Seeking to offset 82652 for partition deposit.portfolio.account.linked.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:09:46.158",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:09:46.157Z",
            "@version": "1",
            "message": "Illegal attempt to make transition from ACTIVE to INACTIVE",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.StateChangeHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "06c607a18491070b",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:09:46.154",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:09:46.154Z",
            "@version": "1",
            "message": "Received portfolio to account linkage event: {\"portfolioId\": \"0d98c140-0c31-4a2a-886d-88b874a368b9\", \"accountId\": \"6f5a4361-5410-467d-a08d-efd981005ffc\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "06c607a18491070b",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:09:46.154",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:09:46.154Z",
            "@version": "1",
            "message": "prepare inactive saving account",
            "logger_name": "com.arbm.digibank.accounts.savingaccount.SavingAccountService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "06c607a18491070b",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:09:46.152",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:09:46.152Z",
            "@version": "1",
            "message": "Received PortfolioLinkedWithAccountEvent: {\"portfolioId\": \"0d98c140-0c31-4a2a-886d-88b874a368b9\", \"accountId\": \"6f5a4361-5410-467d-a08d-efd981005ffc\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "06c607a18491070b",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:09:46.151",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:09:46.151Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_portfolio_account_linked_events-7, groupId=deposit_portfolio_account_linked_events] Seeking to offset 82652 for partition deposit.portfolio.account.linked.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:09:46.151",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:09:46.151Z",
            "@version": "1",
            "message": "Error handler threw an exception",
            "logger_name": "org.springframework.kafka.listener.KafkaMessageListenerContainer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Seek to current after exception; nested exception is org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is com.arbm.digibank.accounts.common.exception.ChangeAccountStatusException: Illegal attempt to make transition from ACTIVE to INACTIVE; nested exception is com.arbm.digibank.accounts.common.exception.ChangeAccountStatusException: Illegal attempt to make transition from ACTIVE to INACTIVE\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:208)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is com.arbm.digibank.accounts.common.exception.ChangeAccountStatusException: Illegal attempt to make transition from ACTIVE to INACTIVE; nested exception is com.arbm.digibank.accounts.common.exception.ChangeAccountStatusException: Illegal attempt to make transition from ACTIVE to INACTIVE\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2719)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2689)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t... 9 common frames omitted\nCaused by: com.arbm.digibank.accounts.common.exception.ChangeAccountStatusException: Illegal attempt to make transition from ACTIVE to INACTIVE\n\tat com.arbm.digibank.accounts.common.statemachine.StateChangeHandler.validateTransition(StateChangeHandler.kt:15)\n\tat com.arbm.digibank.accounts.common.statemachine.AccountStateMachine.transitionTo(AccountStateMachine.kt:12)\n\tat com.arbm.digibank.accounts.savingaccount.SavingAccountService.transitionTo(SavingAccountService.kt:226)\n\tat com.arbm.digibank.accounts.savingaccount.SavingAccountService.transitionTo$default(SavingAccountService.kt:222)\n\tat com.arbm.digibank.accounts.savingaccount.SavingAccountService.prepareInactiveSavingAccount(SavingAccountService.kt:136)\n\tat com.arbm.digibank.accounts.savingaccount.SavingAccountService$$FastClassBySpringCGLIB$$5e5b4b5f.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.retry.annotation.AnnotationAwareRetryOperationsInterceptor.invoke(AnnotationAwareRetryOperationsInterceptor.java:162)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat com.arbm.digibank.accounts.savingaccount.SavingAccountService$$EnhancerBySpringCGLIB$$182c9fb4.prepareInactiveSavingAccount(<generated>)\n\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.handleSavingAccountEvent(PortfolioEventProcessor.kt:85)\n\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(PortfolioEventProcessor.kt:46)\n\tat jdk.internal.reflect.GeneratedMethodAccessor295.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$ba1defd9.onMessage(<generated>)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\t... 11 common frames omitted\n",
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:09:46.113",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:09:46.113Z",
            "@version": "1",
            "message": "Request to retrieve account by following accountNumber: 912010110445307",
            "logger_name": "com.arbm.digibank.accounts.savingaccount.controller.SavingAccountControllerV1",
            "thread_name": "http-nio-8080-exec-6",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0094a3fe8ba6848506c577d887a23",
            "spanId": "fa7eaeca1e8d6630",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:09:44.149",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:09:44.149Z",
            "@version": "1",
            "message": "Illegal attempt to make transition from ACTIVE to INACTIVE",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.StateChangeHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "208a3f7d73cd6791",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:09:44.146",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:09:44.146Z",
            "@version": "1",
            "message": "prepare inactive saving account",
            "logger_name": "com.arbm.digibank.accounts.savingaccount.SavingAccountService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "208a3f7d73cd6791",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:09:44.146",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:09:44.146Z",
            "@version": "1",
            "message": "Received portfolio to account linkage event: {\"portfolioId\": \"0d98c140-0c31-4a2a-886d-88b874a368b9\", \"accountId\": \"6f5a4361-5410-467d-a08d-efd981005ffc\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "208a3f7d73cd6791",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:09:44.144",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:09:44.143Z",
            "@version": "1",
            "message": "Received PortfolioLinkedWithAccountEvent: {\"portfolioId\": \"0d98c140-0c31-4a2a-886d-88b874a368b9\", \"accountId\": \"6f5a4361-5410-467d-a08d-efd981005ffc\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "208a3f7d73cd6791",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:09:43.289",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:09:43.289Z",
            "@version": "1",
            "message": "Request to retrieve account by following accountNumber: 912010110196405",
            "logger_name": "com.arbm.digibank.accounts.savingaccount.controller.SavingAccountControllerV1",
            "thread_name": "http-nio-8080-exec-10",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a009471cfdf95638633a76472c3c35",
            "spanId": "3c2838e548fbb376",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:09:41.700",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:09:41.699Z",
            "@version": "1",
            "message": "Request to retrieve account by following accountNumber: 912010110445307",
            "logger_name": "com.arbm.digibank.accounts.savingaccount.controller.SavingAccountControllerV1",
            "thread_name": "http-nio-8080-exec-9",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a009456b0ecd552dc432e51af8094f",
            "spanId": "92bf6e73970e505f",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:09:19.179",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:09:19.179Z",
            "@version": "1",
            "message": "Request to retrieve account by following accountNumber: 912010110445307",
            "logger_name": "com.arbm.digibank.accounts.savingaccount.controller.SavingAccountControllerV1",
            "thread_name": "http-nio-8080-exec-5",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0092f7e59e61f337bdba168551297",
            "spanId": "bc7a48417576f737",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:09:13.865",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:09:13.864Z",
            "@version": "1",
            "message": "Request to retrieve account by following accountNumber: 912010110445307",
            "logger_name": "com.arbm.digibank.accounts.savingaccount.controller.SavingAccountControllerV1",
            "thread_name": "http-nio-8080-exec-8",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a009297c58ff0f54339aec7745aef1",
            "spanId": "7237519c93230eb3",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:58.696",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:58.696Z",
            "@version": "1",
            "message": "Request to retrieve account by following accountNumber: 912010110196405",
            "logger_name": "com.arbm.digibank.accounts.savingaccount.controller.SavingAccountControllerV1",
            "thread_name": "http-nio-8080-exec-4",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091a5a9edf106d2fda620a403c5e",
            "spanId": "43457334f128b7db",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:57.146",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:57.145Z",
            "@version": "1",
            "message": "Produced: {\"accountId\": \"2234d244-93c3-48c6-a847-50bf7f225502\"}",
            "logger_name": "com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "20fd66e457f878b9",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:57.146",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:57.146Z",
            "@version": "1",
            "message": "Saving response under id 2234d244-93c3-48c6-a847-50bf7f225502",
            "logger_name": "com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "20fd66e457f878b9",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:57.145",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:57.145Z",
            "@version": "1",
            "message": "validateTransition",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a006f5d9537ae4f04ee074fe1b8c0b",
            "spanId": "20fd66e457f878b9",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:57.145",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:57.145Z",
            "@version": "1",
            "message": "on Exit run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a006f5d9537ae4f04ee074fe1b8c0b",
            "spanId": "20fd66e457f878b9",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:57.145",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:57.145Z",
            "@version": "1",
            "message": "onEnter run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a006f5d9537ae4f04ee074fe1b8c0b",
            "spanId": "20fd66e457f878b9",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:57.145",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:57.145Z",
            "@version": "1",
            "message": "new status",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a006f5d9537ae4f04ee074fe1b8c0b",
            "spanId": "20fd66e457f878b9",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:57.140",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:57.14Z",
            "@version": "1",
            "message": "Received portfolio to saving pot linkage event: {\"portfolioId\": \"79d77109-a518-41e1-8463-aa9460e12a86\", \"accountId\": \"2234d244-93c3-48c6-a847-50bf7f225502\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a006f5d9537ae4f04ee074fe1b8c0b",
            "spanId": "20fd66e457f878b9",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:57.136",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:57.136Z",
            "@version": "1",
            "message": "Received PortfolioLinkedWithAccountEvent: {\"portfolioId\": \"79d77109-a518-41e1-8463-aa9460e12a86\", \"accountId\": \"2234d244-93c3-48c6-a847-50bf7f225502\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a006f5d9537ae4f04ee074fe1b8c0b",
            "spanId": "20fd66e457f878b9",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:57.135",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:57.135Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_portfolio_account_linked_events-7, groupId=deposit_portfolio_account_linked_events] Seeking to offset 82651 for partition deposit.portfolio.account.linked.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:57.135",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:57.135Z",
            "@version": "1",
            "message": "Error handler threw an exception",
            "logger_name": "org.springframework.kafka.listener.KafkaMessageListenerContainer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Seek to current after exception; nested exception is org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:208)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2719)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2689)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t... 9 common frames omitted\nCaused by: org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\tSuppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: \nError has been observed at the following site(s):\n\t*__checkpoint ⇢ 409 from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses [DefaultWebClient]\nOriginal Stack Trace:\n\t\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\t\tat org.springframework.web.reactive.function.client.DefaultClientResponse.lambda$createException$1(DefaultClientResponse.java:207)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:106)\n\t\tat reactor.core.publisher.FluxOnErrorReturn$ReturnSubscriber.onNext(FluxOnErrorReturn.java:162)\n\t\tat reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:101)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)\n\t\tat reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)\n\t\tat reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)\n\t\tat reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1816)\n\t\tat reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:160)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat reactor.netty.channel.FluxReceive.onInboundComplete(FluxReceive.java:400)\n\t\tat reactor.netty.channel.ChannelOperations.onInboundComplete(ChannelOperations.java:419)\n\t\tat reactor.netty.channel.ChannelOperations.terminate(ChannelOperations.java:473)\n\t\tat reactor.netty.http.client.HttpClientOperations.onInboundNext(HttpClientOperations.java:702)\n\t\tat reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:113)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:336)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:308)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\n\t\tat io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe.epollInReady(AbstractEpollStreamChannel.java:800)\n\t\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\n\t\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\n\t\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\n\t\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\n\t\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n\tSuppressed: java.lang.Exception: #block terminated with an error\n\t\tat reactor.core.publisher.BlockingSingleSubscriber.blockingGet(BlockingSingleSubscriber.java:99)\n\t\tat reactor.core.publisher.Mono.block(Mono.java:1707)\n\t\tat com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl.saveAsyncResult(AsyncResponseServiceImpl.kt:17)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.produceSavingPotCreatedAsyncResult(SavingPotActiveHandler.kt:49)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:39)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:17)\n\t\tat com.arbm.digibank.accounts.common.statemachine.AccountStateMachine.transitionTo(AccountStateMachine.kt:20)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo(SavingPotService.kt:251)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo$default(SavingPotService.kt:247)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.activateSavingPot(SavingPotService.kt:117)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$FastClassBySpringCGLIB$$ece3748f.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.retry.annotation.AnnotationAwareRetryOperationsInterceptor.invoke(AnnotationAwareRetryOperationsInterceptor.java:162)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$EnhancerBySpringCGLIB$$decf1564.activateSavingPot(<generated>)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.handleSavingPotEvent(PortfolioEventProcessor.kt:90)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(PortfolioEventProcessor.kt:47)\n\t\tat jdk.internal.reflect.GeneratedMethodAccessor295.invoke(Unknown Source)\n\t\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\t\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\t\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\t\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$ba1defd9.onMessage(<generated>)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\t\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\t\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:53.125",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:53.125Z",
            "@version": "1",
            "message": "Saving response under id 2234d244-93c3-48c6-a847-50bf7f225502",
            "logger_name": "com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "9c6f7c7c34563cb4",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:53.125",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:53.125Z",
            "@version": "1",
            "message": "Produced: {\"accountId\": \"2234d244-93c3-48c6-a847-50bf7f225502\"}",
            "logger_name": "com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "9c6f7c7c34563cb4",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:53.125",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:53.125Z",
            "@version": "1",
            "message": "new status",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a006f5d9537ae4f04ee074fe1b8c0b",
            "spanId": "9c6f7c7c34563cb4",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:53.125",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:53.125Z",
            "@version": "1",
            "message": "onEnter run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a006f5d9537ae4f04ee074fe1b8c0b",
            "spanId": "9c6f7c7c34563cb4",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:53.125",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:53.125Z",
            "@version": "1",
            "message": "on Exit run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a006f5d9537ae4f04ee074fe1b8c0b",
            "spanId": "9c6f7c7c34563cb4",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:53.125",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:53.125Z",
            "@version": "1",
            "message": "validateTransition",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a006f5d9537ae4f04ee074fe1b8c0b",
            "spanId": "9c6f7c7c34563cb4",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:53.119",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:53.119Z",
            "@version": "1",
            "message": "Received portfolio to saving pot linkage event: {\"portfolioId\": \"79d77109-a518-41e1-8463-aa9460e12a86\", \"accountId\": \"2234d244-93c3-48c6-a847-50bf7f225502\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a006f5d9537ae4f04ee074fe1b8c0b",
            "spanId": "9c6f7c7c34563cb4",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:53.116",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:53.115Z",
            "@version": "1",
            "message": "Received PortfolioLinkedWithAccountEvent: {\"portfolioId\": \"79d77109-a518-41e1-8463-aa9460e12a86\", \"accountId\": \"2234d244-93c3-48c6-a847-50bf7f225502\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a006f5d9537ae4f04ee074fe1b8c0b",
            "spanId": "9c6f7c7c34563cb4",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:53.115",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:53.114Z",
            "@version": "1",
            "message": "Error handler threw an exception",
            "logger_name": "org.springframework.kafka.listener.KafkaMessageListenerContainer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Seek to current after exception; nested exception is org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:208)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2719)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2689)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t... 9 common frames omitted\nCaused by: org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\tSuppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: \nError has been observed at the following site(s):\n\t*__checkpoint ⇢ 409 from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses [DefaultWebClient]\nOriginal Stack Trace:\n\t\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\t\tat org.springframework.web.reactive.function.client.DefaultClientResponse.lambda$createException$1(DefaultClientResponse.java:207)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:106)\n\t\tat reactor.core.publisher.FluxOnErrorReturn$ReturnSubscriber.onNext(FluxOnErrorReturn.java:162)\n\t\tat reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:101)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)\n\t\tat reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)\n\t\tat reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)\n\t\tat reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1816)\n\t\tat reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:160)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat reactor.netty.channel.FluxReceive.onInboundComplete(FluxReceive.java:400)\n\t\tat reactor.netty.channel.ChannelOperations.onInboundComplete(ChannelOperations.java:419)\n\t\tat reactor.netty.channel.ChannelOperations.terminate(ChannelOperations.java:473)\n\t\tat reactor.netty.http.client.HttpClientOperations.onInboundNext(HttpClientOperations.java:702)\n\t\tat reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:113)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:336)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:308)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\n\t\tat io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe.epollInReady(AbstractEpollStreamChannel.java:800)\n\t\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\n\t\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\n\t\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\n\t\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\n\t\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n\tSuppressed: java.lang.Exception: #block terminated with an error\n\t\tat reactor.core.publisher.BlockingSingleSubscriber.blockingGet(BlockingSingleSubscriber.java:99)\n\t\tat reactor.core.publisher.Mono.block(Mono.java:1707)\n\t\tat com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl.saveAsyncResult(AsyncResponseServiceImpl.kt:17)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.produceSavingPotCreatedAsyncResult(SavingPotActiveHandler.kt:49)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:39)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:17)\n\t\tat com.arbm.digibank.accounts.common.statemachine.AccountStateMachine.transitionTo(AccountStateMachine.kt:20)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo(SavingPotService.kt:251)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo$default(SavingPotService.kt:247)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.activateSavingPot(SavingPotService.kt:117)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$FastClassBySpringCGLIB$$ece3748f.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.retry.annotation.AnnotationAwareRetryOperationsInterceptor.invoke(AnnotationAwareRetryOperationsInterceptor.java:162)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$EnhancerBySpringCGLIB$$decf1564.activateSavingPot(<generated>)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.handleSavingPotEvent(PortfolioEventProcessor.kt:90)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(PortfolioEventProcessor.kt:47)\n\t\tat jdk.internal.reflect.GeneratedMethodAccessor295.invoke(Unknown Source)\n\t\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\t\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\t\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\t\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$ba1defd9.onMessage(<generated>)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\t\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\t\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:53.114",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:53.114Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_portfolio_account_linked_events-7, groupId=deposit_portfolio_account_linked_events] Seeking to offset 82651 for partition deposit.portfolio.account.linked.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:51.106",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:51.105Z",
            "@version": "1",
            "message": "Saving response under id 2234d244-93c3-48c6-a847-50bf7f225502",
            "logger_name": "com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "ceb2abc807a65848",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:51.105",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:51.105Z",
            "@version": "1",
            "message": "Produced: {\"accountId\": \"2234d244-93c3-48c6-a847-50bf7f225502\"}",
            "logger_name": "com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "ceb2abc807a65848",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:51.105",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:51.105Z",
            "@version": "1",
            "message": "new status",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a006f5d9537ae4f04ee074fe1b8c0b",
            "spanId": "ceb2abc807a65848",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:51.105",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:51.105Z",
            "@version": "1",
            "message": "onEnter run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a006f5d9537ae4f04ee074fe1b8c0b",
            "spanId": "ceb2abc807a65848",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:51.105",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:51.105Z",
            "@version": "1",
            "message": "on Exit run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a006f5d9537ae4f04ee074fe1b8c0b",
            "spanId": "ceb2abc807a65848",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:51.105",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:51.105Z",
            "@version": "1",
            "message": "validateTransition",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a006f5d9537ae4f04ee074fe1b8c0b",
            "spanId": "ceb2abc807a65848",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:51.090",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:51.09Z",
            "@version": "1",
            "message": "Received portfolio to saving pot linkage event: {\"portfolioId\": \"79d77109-a518-41e1-8463-aa9460e12a86\", \"accountId\": \"2234d244-93c3-48c6-a847-50bf7f225502\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a006f5d9537ae4f04ee074fe1b8c0b",
            "spanId": "ceb2abc807a65848",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:51.087",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:51.087Z",
            "@version": "1",
            "message": "Received PortfolioLinkedWithAccountEvent: {\"portfolioId\": \"79d77109-a518-41e1-8463-aa9460e12a86\", \"accountId\": \"2234d244-93c3-48c6-a847-50bf7f225502\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a006f5d9537ae4f04ee074fe1b8c0b",
            "spanId": "ceb2abc807a65848",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:51.084",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:51.084Z",
            "@version": "1",
            "message": "Received request to fetch no of saving pots",
            "logger_name": "com.arbm.digibank.accounts.savingpot.controller.NoOfSavingPotController",
            "thread_name": "http-nio-8080-exec-8",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0091269e59e820d03e7850b52750e",
            "spanId": "b61b989f340bf917",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:50.612",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:50.612Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_portfolio_account_linked_events-7, groupId=deposit_portfolio_account_linked_events] Seeking to offset 82651 for partition deposit.portfolio.account.linked.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:50.595",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:50.595Z",
            "@version": "1",
            "message": "Saving response under id 2f35d889-8cb6-4452-a469-f0ee1607ffee",
            "logger_name": "com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "3983e32880f3ceb6",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:50.595",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:50.595Z",
            "@version": "1",
            "message": "Produced: {\"accountId\": \"2f35d889-8cb6-4452-a469-f0ee1607ffee\"}",
            "logger_name": "com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "3983e32880f3ceb6",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:50.595",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:50.595Z",
            "@version": "1",
            "message": "new status",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a006f5d9537ae4f04ee074fe1b8c0b",
            "spanId": "3983e32880f3ceb6",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:50.595",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:50.595Z",
            "@version": "1",
            "message": "onEnter run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a006f5d9537ae4f04ee074fe1b8c0b",
            "spanId": "3983e32880f3ceb6",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:50.595",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:50.595Z",
            "@version": "1",
            "message": "on Exit run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a006f5d9537ae4f04ee074fe1b8c0b",
            "spanId": "3983e32880f3ceb6",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:50.595",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:50.595Z",
            "@version": "1",
            "message": "validateTransition",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a006f5d9537ae4f04ee074fe1b8c0b",
            "spanId": "3983e32880f3ceb6",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:50.589",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:50.589Z",
            "@version": "1",
            "message": "Received portfolio to saving pot linkage event: {\"portfolioId\": \"cd406be2-0d54-4a92-b907-407a342d3d5d\", \"accountId\": \"2f35d889-8cb6-4452-a469-f0ee1607ffee\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a006f5d9537ae4f04ee074fe1b8c0b",
            "spanId": "3983e32880f3ceb6",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:50.586",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:50.586Z",
            "@version": "1",
            "message": "Received PortfolioLinkedWithAccountEvent: {\"portfolioId\": \"cd406be2-0d54-4a92-b907-407a342d3d5d\", \"accountId\": \"2f35d889-8cb6-4452-a469-f0ee1607ffee\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a006f5d9537ae4f04ee074fe1b8c0b",
            "spanId": "3983e32880f3ceb6",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:50.585",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:50.585Z",
            "@version": "1",
            "message": "Error handler threw an exception",
            "logger_name": "org.springframework.kafka.listener.KafkaMessageListenerContainer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Seek to current after exception; nested exception is org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:208)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2719)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2689)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t... 9 common frames omitted\nCaused by: org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\tSuppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: \nError has been observed at the following site(s):\n\t*__checkpoint ⇢ 409 from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses [DefaultWebClient]\nOriginal Stack Trace:\n\t\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\t\tat org.springframework.web.reactive.function.client.DefaultClientResponse.lambda$createException$1(DefaultClientResponse.java:207)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:106)\n\t\tat reactor.core.publisher.FluxOnErrorReturn$ReturnSubscriber.onNext(FluxOnErrorReturn.java:162)\n\t\tat reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:101)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)\n\t\tat reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)\n\t\tat reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)\n\t\tat reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1816)\n\t\tat reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:160)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat reactor.netty.channel.FluxReceive.onInboundComplete(FluxReceive.java:400)\n\t\tat reactor.netty.channel.ChannelOperations.onInboundComplete(ChannelOperations.java:419)\n\t\tat reactor.netty.channel.ChannelOperations.terminate(ChannelOperations.java:473)\n\t\tat reactor.netty.http.client.HttpClientOperations.onInboundNext(HttpClientOperations.java:702)\n\t\tat reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:113)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:336)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:308)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\n\t\tat io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe.epollInReady(AbstractEpollStreamChannel.java:800)\n\t\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\n\t\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\n\t\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\n\t\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\n\t\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n\tSuppressed: java.lang.Exception: #block terminated with an error\n\t\tat reactor.core.publisher.BlockingSingleSubscriber.blockingGet(BlockingSingleSubscriber.java:99)\n\t\tat reactor.core.publisher.Mono.block(Mono.java:1707)\n\t\tat com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl.saveAsyncResult(AsyncResponseServiceImpl.kt:17)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.produceSavingPotCreatedAsyncResult(SavingPotActiveHandler.kt:49)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:39)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:17)\n\t\tat com.arbm.digibank.accounts.common.statemachine.AccountStateMachine.transitionTo(AccountStateMachine.kt:20)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo(SavingPotService.kt:251)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo$default(SavingPotService.kt:247)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.activateSavingPot(SavingPotService.kt:117)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$FastClassBySpringCGLIB$$ece3748f.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.retry.annotation.AnnotationAwareRetryOperationsInterceptor.invoke(AnnotationAwareRetryOperationsInterceptor.java:162)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$EnhancerBySpringCGLIB$$decf1564.activateSavingPot(<generated>)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.handleSavingPotEvent(PortfolioEventProcessor.kt:90)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(PortfolioEventProcessor.kt:47)\n\t\tat jdk.internal.reflect.GeneratedMethodAccessor295.invoke(Unknown Source)\n\t\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\t\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\t\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\t\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$ba1defd9.onMessage(<generated>)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\t\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\t\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:50.584",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:50.584Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_portfolio_account_linked_events-7, groupId=deposit_portfolio_account_linked_events] Seeking to offset 82650 for partition deposit.portfolio.account.linked.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:49.669",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:49.668Z",
            "@version": "1",
            "message": "Request to retrieve account by following accountNumber: 912010110273493",
            "logger_name": "com.arbm.digibank.accounts.savingaccount.controller.SavingAccountControllerV1",
            "thread_name": "http-nio-8080-exec-2",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a009116ef664210f5e0e4711ff78d4",
            "spanId": "47324880ec819872",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:46.575",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:46.574Z",
            "@version": "1",
            "message": "validateTransition",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a006f5d9537ae4f04ee074fe1b8c0b",
            "spanId": "5c77cfeeb727c46f",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:46.575",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:46.574Z",
            "@version": "1",
            "message": "on Exit run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a006f5d9537ae4f04ee074fe1b8c0b",
            "spanId": "5c77cfeeb727c46f",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:46.575",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:46.574Z",
            "@version": "1",
            "message": "onEnter run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a006f5d9537ae4f04ee074fe1b8c0b",
            "spanId": "5c77cfeeb727c46f",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:46.575",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:46.574Z",
            "@version": "1",
            "message": "new status",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a006f5d9537ae4f04ee074fe1b8c0b",
            "spanId": "5c77cfeeb727c46f",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:46.575",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:46.575Z",
            "@version": "1",
            "message": "Produced: {\"accountId\": \"2f35d889-8cb6-4452-a469-f0ee1607ffee\"}",
            "logger_name": "com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "5c77cfeeb727c46f",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:46.575",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:46.575Z",
            "@version": "1",
            "message": "Saving response under id 2f35d889-8cb6-4452-a469-f0ee1607ffee",
            "logger_name": "com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "5c77cfeeb727c46f",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:46.569",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:46.569Z",
            "@version": "1",
            "message": "Received portfolio to saving pot linkage event: {\"portfolioId\": \"cd406be2-0d54-4a92-b907-407a342d3d5d\", \"accountId\": \"2f35d889-8cb6-4452-a469-f0ee1607ffee\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a006f5d9537ae4f04ee074fe1b8c0b",
            "spanId": "5c77cfeeb727c46f",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:46.566",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:46.566Z",
            "@version": "1",
            "message": "Received PortfolioLinkedWithAccountEvent: {\"portfolioId\": \"cd406be2-0d54-4a92-b907-407a342d3d5d\", \"accountId\": \"2f35d889-8cb6-4452-a469-f0ee1607ffee\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a006f5d9537ae4f04ee074fe1b8c0b",
            "spanId": "5c77cfeeb727c46f",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:46.565",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:46.565Z",
            "@version": "1",
            "message": "Error handler threw an exception",
            "logger_name": "org.springframework.kafka.listener.KafkaMessageListenerContainer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Seek to current after exception; nested exception is org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:208)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2719)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2689)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t... 9 common frames omitted\nCaused by: org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\tSuppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: \nError has been observed at the following site(s):\n\t*__checkpoint ⇢ 409 from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses [DefaultWebClient]\nOriginal Stack Trace:\n\t\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\t\tat org.springframework.web.reactive.function.client.DefaultClientResponse.lambda$createException$1(DefaultClientResponse.java:207)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:106)\n\t\tat reactor.core.publisher.FluxOnErrorReturn$ReturnSubscriber.onNext(FluxOnErrorReturn.java:162)\n\t\tat reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:101)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)\n\t\tat reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)\n\t\tat reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)\n\t\tat reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1816)\n\t\tat reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:160)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat reactor.netty.channel.FluxReceive.onInboundComplete(FluxReceive.java:400)\n\t\tat reactor.netty.channel.ChannelOperations.onInboundComplete(ChannelOperations.java:419)\n\t\tat reactor.netty.channel.ChannelOperations.terminate(ChannelOperations.java:473)\n\t\tat reactor.netty.http.client.HttpClientOperations.onInboundNext(HttpClientOperations.java:702)\n\t\tat reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:113)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:336)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:308)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\n\t\tat io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe.epollInReady(AbstractEpollStreamChannel.java:800)\n\t\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\n\t\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\n\t\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\n\t\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\n\t\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n\tSuppressed: java.lang.Exception: #block terminated with an error\n\t\tat reactor.core.publisher.BlockingSingleSubscriber.blockingGet(BlockingSingleSubscriber.java:99)\n\t\tat reactor.core.publisher.Mono.block(Mono.java:1707)\n\t\tat com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl.saveAsyncResult(AsyncResponseServiceImpl.kt:17)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.produceSavingPotCreatedAsyncResult(SavingPotActiveHandler.kt:49)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:39)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:17)\n\t\tat com.arbm.digibank.accounts.common.statemachine.AccountStateMachine.transitionTo(AccountStateMachine.kt:20)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo(SavingPotService.kt:251)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo$default(SavingPotService.kt:247)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.activateSavingPot(SavingPotService.kt:117)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$FastClassBySpringCGLIB$$ece3748f.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.retry.annotation.AnnotationAwareRetryOperationsInterceptor.invoke(AnnotationAwareRetryOperationsInterceptor.java:162)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$EnhancerBySpringCGLIB$$decf1564.activateSavingPot(<generated>)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.handleSavingPotEvent(PortfolioEventProcessor.kt:90)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(PortfolioEventProcessor.kt:47)\n\t\tat jdk.internal.reflect.GeneratedMethodAccessor295.invoke(Unknown Source)\n\t\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\t\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\t\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\t\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$ba1defd9.onMessage(<generated>)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\t\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\t\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:46.564",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:46.564Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_portfolio_account_linked_events-7, groupId=deposit_portfolio_account_linked_events] Seeking to offset 82650 for partition deposit.portfolio.account.linked.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:44.653",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:44.546Z",
            "@version": "1",
            "message": "Received PortfolioLinkedWithAccountEvent: {\"portfolioId\": \"cd406be2-0d54-4a92-b907-407a342d3d5d\", \"accountId\": \"2f35d889-8cb6-4452-a469-f0ee1607ffee\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a006f5d9537ae4f04ee074fe1b8c0b",
            "spanId": "3bdc70ad1002e6b8",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:44.653",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:44.55Z",
            "@version": "1",
            "message": "Received portfolio to saving pot linkage event: {\"portfolioId\": \"cd406be2-0d54-4a92-b907-407a342d3d5d\", \"accountId\": \"2f35d889-8cb6-4452-a469-f0ee1607ffee\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a006f5d9537ae4f04ee074fe1b8c0b",
            "spanId": "3bdc70ad1002e6b8",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:44.653",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:44.555Z",
            "@version": "1",
            "message": "validateTransition",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a006f5d9537ae4f04ee074fe1b8c0b",
            "spanId": "3bdc70ad1002e6b8",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:44.653",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:44.555Z",
            "@version": "1",
            "message": "on Exit run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a006f5d9537ae4f04ee074fe1b8c0b",
            "spanId": "3bdc70ad1002e6b8",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:44.653",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:44.555Z",
            "@version": "1",
            "message": "onEnter run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a006f5d9537ae4f04ee074fe1b8c0b",
            "spanId": "3bdc70ad1002e6b8",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:44.653",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:44.555Z",
            "@version": "1",
            "message": "new status",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a006f5d9537ae4f04ee074fe1b8c0b",
            "spanId": "3bdc70ad1002e6b8",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:44.653",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:44.555Z",
            "@version": "1",
            "message": "Produced: {\"accountId\": \"2f35d889-8cb6-4452-a469-f0ee1607ffee\"}",
            "logger_name": "com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "3bdc70ad1002e6b8",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:44.653",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:44.555Z",
            "@version": "1",
            "message": "Saving response under id 2f35d889-8cb6-4452-a469-f0ee1607ffee",
            "logger_name": "com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "3bdc70ad1002e6b8",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:44.531",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:44.531Z",
            "@version": "1",
            "message": "Request to retrieve account by following accountNumber: 912010110273493",
            "logger_name": "com.arbm.digibank.accounts.savingaccount.controller.SavingAccountControllerV1",
            "thread_name": "http-nio-8080-exec-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a0090c24c7608b03b925b632e19659",
            "spanId": "462e6ec2f5380d57",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:44.067",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:44.067Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_portfolio_account_linked_events-7, groupId=deposit_portfolio_account_linked_events] Seeking to offset 82650 for partition deposit.portfolio.account.linked.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:44.055",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:44.055Z",
            "@version": "1",
            "message": "Saving response under id d63f8443-039e-4eb0-af9d-c1031bcdc52c",
            "logger_name": "com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "47d447f8888de2ab",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:44.055",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:44.055Z",
            "@version": "1",
            "message": "Produced: {\"accountId\": \"d63f8443-039e-4eb0-af9d-c1031bcdc52c\"}",
            "logger_name": "com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "47d447f8888de2ab",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:44.055",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:44.054Z",
            "@version": "1",
            "message": "new status",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a006f5d9537ae4f04ee074fe1b8c0b",
            "spanId": "47d447f8888de2ab",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:44.055",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:44.054Z",
            "@version": "1",
            "message": "onEnter run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a006f5d9537ae4f04ee074fe1b8c0b",
            "spanId": "47d447f8888de2ab",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:44.055",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:44.054Z",
            "@version": "1",
            "message": "on Exit run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a006f5d9537ae4f04ee074fe1b8c0b",
            "spanId": "47d447f8888de2ab",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:44.054",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:44.054Z",
            "@version": "1",
            "message": "validateTransition",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a006f5d9537ae4f04ee074fe1b8c0b",
            "spanId": "47d447f8888de2ab",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:44.049",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:44.049Z",
            "@version": "1",
            "message": "Received portfolio to saving pot linkage event: {\"portfolioId\": \"cd406be2-0d54-4a92-b907-407a342d3d5d\", \"accountId\": \"d63f8443-039e-4eb0-af9d-c1031bcdc52c\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a006f5d9537ae4f04ee074fe1b8c0b",
            "spanId": "47d447f8888de2ab",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:44.045",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:44.045Z",
            "@version": "1",
            "message": "Received PortfolioLinkedWithAccountEvent: {\"portfolioId\": \"cd406be2-0d54-4a92-b907-407a342d3d5d\", \"accountId\": \"d63f8443-039e-4eb0-af9d-c1031bcdc52c\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a006f5d9537ae4f04ee074fe1b8c0b",
            "spanId": "47d447f8888de2ab",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:44.045",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:44.044Z",
            "@version": "1",
            "message": "Error handler threw an exception",
            "logger_name": "org.springframework.kafka.listener.KafkaMessageListenerContainer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Seek to current after exception; nested exception is org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:208)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2719)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2689)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t... 9 common frames omitted\nCaused by: org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\tSuppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: \nError has been observed at the following site(s):\n\t*__checkpoint ⇢ 409 from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses [DefaultWebClient]\nOriginal Stack Trace:\n\t\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\t\tat org.springframework.web.reactive.function.client.DefaultClientResponse.lambda$createException$1(DefaultClientResponse.java:207)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:106)\n\t\tat reactor.core.publisher.FluxOnErrorReturn$ReturnSubscriber.onNext(FluxOnErrorReturn.java:162)\n\t\tat reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:101)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)\n\t\tat reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)\n\t\tat reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)\n\t\tat reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1816)\n\t\tat reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:160)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat reactor.netty.channel.FluxReceive.onInboundComplete(FluxReceive.java:400)\n\t\tat reactor.netty.channel.ChannelOperations.onInboundComplete(ChannelOperations.java:419)\n\t\tat reactor.netty.channel.ChannelOperations.terminate(ChannelOperations.java:473)\n\t\tat reactor.netty.http.client.HttpClientOperations.onInboundNext(HttpClientOperations.java:702)\n\t\tat reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:113)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:336)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:308)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\n\t\tat io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe.epollInReady(AbstractEpollStreamChannel.java:800)\n\t\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\n\t\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\n\t\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\n\t\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\n\t\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n\tSuppressed: java.lang.Exception: #block terminated with an error\n\t\tat reactor.core.publisher.BlockingSingleSubscriber.blockingGet(BlockingSingleSubscriber.java:99)\n\t\tat reactor.core.publisher.Mono.block(Mono.java:1707)\n\t\tat com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl.saveAsyncResult(AsyncResponseServiceImpl.kt:17)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.produceSavingPotCreatedAsyncResult(SavingPotActiveHandler.kt:49)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:39)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:17)\n\t\tat com.arbm.digibank.accounts.common.statemachine.AccountStateMachine.transitionTo(AccountStateMachine.kt:20)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo(SavingPotService.kt:251)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo$default(SavingPotService.kt:247)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.activateSavingPot(SavingPotService.kt:117)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$FastClassBySpringCGLIB$$ece3748f.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.retry.annotation.AnnotationAwareRetryOperationsInterceptor.invoke(AnnotationAwareRetryOperationsInterceptor.java:162)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$EnhancerBySpringCGLIB$$decf1564.activateSavingPot(<generated>)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.handleSavingPotEvent(PortfolioEventProcessor.kt:90)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(PortfolioEventProcessor.kt:47)\n\t\tat jdk.internal.reflect.GeneratedMethodAccessor295.invoke(Unknown Source)\n\t\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\t\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\t\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\t\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$ba1defd9.onMessage(<generated>)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\t\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\t\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:44.044",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:44.044Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_portfolio_account_linked_events-7, groupId=deposit_portfolio_account_linked_events] Seeking to offset 82649 for partition deposit.portfolio.account.linked.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:40.034",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:40.034Z",
            "@version": "1",
            "message": "Saving response under id d63f8443-039e-4eb0-af9d-c1031bcdc52c",
            "logger_name": "com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "43d2f1519d20a374",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:40.034",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:40.034Z",
            "@version": "1",
            "message": "Produced: {\"accountId\": \"d63f8443-039e-4eb0-af9d-c1031bcdc52c\"}",
            "logger_name": "com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "43d2f1519d20a374",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:40.034",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:40.034Z",
            "@version": "1",
            "message": "new status",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a006f5d9537ae4f04ee074fe1b8c0b",
            "spanId": "43d2f1519d20a374",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:40.034",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:40.034Z",
            "@version": "1",
            "message": "onEnter run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a006f5d9537ae4f04ee074fe1b8c0b",
            "spanId": "43d2f1519d20a374",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:40.034",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:40.034Z",
            "@version": "1",
            "message": "on Exit run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a006f5d9537ae4f04ee074fe1b8c0b",
            "spanId": "43d2f1519d20a374",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:40.034",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:40.034Z",
            "@version": "1",
            "message": "validateTransition",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a006f5d9537ae4f04ee074fe1b8c0b",
            "spanId": "43d2f1519d20a374",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:40.028",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:40.028Z",
            "@version": "1",
            "message": "Received portfolio to saving pot linkage event: {\"portfolioId\": \"cd406be2-0d54-4a92-b907-407a342d3d5d\", \"accountId\": \"d63f8443-039e-4eb0-af9d-c1031bcdc52c\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a006f5d9537ae4f04ee074fe1b8c0b",
            "spanId": "43d2f1519d20a374",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:40.024",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:40.024Z",
            "@version": "1",
            "message": "Received PortfolioLinkedWithAccountEvent: {\"portfolioId\": \"cd406be2-0d54-4a92-b907-407a342d3d5d\", \"accountId\": \"d63f8443-039e-4eb0-af9d-c1031bcdc52c\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a006f5d9537ae4f04ee074fe1b8c0b",
            "spanId": "43d2f1519d20a374",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:40.023",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:40.023Z",
            "@version": "1",
            "message": "Error handler threw an exception",
            "logger_name": "org.springframework.kafka.listener.KafkaMessageListenerContainer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Seek to current after exception; nested exception is org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:208)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2719)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2689)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t... 9 common frames omitted\nCaused by: org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\tSuppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: \nError has been observed at the following site(s):\n\t*__checkpoint ⇢ 409 from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses [DefaultWebClient]\nOriginal Stack Trace:\n\t\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\t\tat org.springframework.web.reactive.function.client.DefaultClientResponse.lambda$createException$1(DefaultClientResponse.java:207)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:106)\n\t\tat reactor.core.publisher.FluxOnErrorReturn$ReturnSubscriber.onNext(FluxOnErrorReturn.java:162)\n\t\tat reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:101)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)\n\t\tat reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)\n\t\tat reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)\n\t\tat reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1816)\n\t\tat reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:160)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat reactor.netty.channel.FluxReceive.onInboundComplete(FluxReceive.java:400)\n\t\tat reactor.netty.channel.ChannelOperations.onInboundComplete(ChannelOperations.java:419)\n\t\tat reactor.netty.channel.ChannelOperations.terminate(ChannelOperations.java:473)\n\t\tat reactor.netty.http.client.HttpClientOperations.onInboundNext(HttpClientOperations.java:702)\n\t\tat reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:113)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:336)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:308)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\n\t\tat io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe.epollInReady(AbstractEpollStreamChannel.java:800)\n\t\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\n\t\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\n\t\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\n\t\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\n\t\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n\tSuppressed: java.lang.Exception: #block terminated with an error\n\t\tat reactor.core.publisher.BlockingSingleSubscriber.blockingGet(BlockingSingleSubscriber.java:99)\n\t\tat reactor.core.publisher.Mono.block(Mono.java:1707)\n\t\tat com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl.saveAsyncResult(AsyncResponseServiceImpl.kt:17)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.produceSavingPotCreatedAsyncResult(SavingPotActiveHandler.kt:49)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:39)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:17)\n\t\tat com.arbm.digibank.accounts.common.statemachine.AccountStateMachine.transitionTo(AccountStateMachine.kt:20)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo(SavingPotService.kt:251)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo$default(SavingPotService.kt:247)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.activateSavingPot(SavingPotService.kt:117)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$FastClassBySpringCGLIB$$ece3748f.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.retry.annotation.AnnotationAwareRetryOperationsInterceptor.invoke(AnnotationAwareRetryOperationsInterceptor.java:162)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$EnhancerBySpringCGLIB$$decf1564.activateSavingPot(<generated>)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.handleSavingPotEvent(PortfolioEventProcessor.kt:90)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(PortfolioEventProcessor.kt:47)\n\t\tat jdk.internal.reflect.GeneratedMethodAccessor295.invoke(Unknown Source)\n\t\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\t\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\t\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\t\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$ba1defd9.onMessage(<generated>)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\t\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\t\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:40.022",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:40.022Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_portfolio_account_linked_events-7, groupId=deposit_portfolio_account_linked_events] Seeking to offset 82649 for partition deposit.portfolio.account.linked.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:39.483",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:39.482Z",
            "@version": "1",
            "message": "Request to retrieve account by following accountNumber: 912010110196405",
            "logger_name": "com.arbm.digibank.accounts.savingaccount.controller.SavingAccountControllerV1",
            "thread_name": "http-nio-8080-exec-10",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a00907397f80e01ca5dece796b2d79",
            "spanId": "3e49159fa7519114",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:38.013",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:38.013Z",
            "@version": "1",
            "message": "validateTransition",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a006f5d9537ae4f04ee074fe1b8c0b",
            "spanId": "3406d4526c6b5cd4",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:38.013",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:38.013Z",
            "@version": "1",
            "message": "on Exit run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a006f5d9537ae4f04ee074fe1b8c0b",
            "spanId": "3406d4526c6b5cd4",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:38.013",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:38.013Z",
            "@version": "1",
            "message": "onEnter run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a006f5d9537ae4f04ee074fe1b8c0b",
            "spanId": "3406d4526c6b5cd4",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:38.013",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:38.013Z",
            "@version": "1",
            "message": "new status",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a006f5d9537ae4f04ee074fe1b8c0b",
            "spanId": "3406d4526c6b5cd4",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:38.013",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:38.013Z",
            "@version": "1",
            "message": "Produced: {\"accountId\": \"d63f8443-039e-4eb0-af9d-c1031bcdc52c\"}",
            "logger_name": "com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "3406d4526c6b5cd4",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:38.013",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:38.013Z",
            "@version": "1",
            "message": "Saving response under id d63f8443-039e-4eb0-af9d-c1031bcdc52c",
            "logger_name": "com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "3406d4526c6b5cd4",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:38.008",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:38.008Z",
            "@version": "1",
            "message": "Received portfolio to saving pot linkage event: {\"portfolioId\": \"cd406be2-0d54-4a92-b907-407a342d3d5d\", \"accountId\": \"d63f8443-039e-4eb0-af9d-c1031bcdc52c\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a006f5d9537ae4f04ee074fe1b8c0b",
            "spanId": "3406d4526c6b5cd4",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:38.005",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:38.005Z",
            "@version": "1",
            "message": "Received PortfolioLinkedWithAccountEvent: {\"portfolioId\": \"cd406be2-0d54-4a92-b907-407a342d3d5d\", \"accountId\": \"d63f8443-039e-4eb0-af9d-c1031bcdc52c\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a006f5d9537ae4f04ee074fe1b8c0b",
            "spanId": "3406d4526c6b5cd4",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:37.526",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:37.526Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_portfolio_account_linked_events-7, groupId=deposit_portfolio_account_linked_events] Seeking to offset 82649 for partition deposit.portfolio.account.linked.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:37.514",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:37.513Z",
            "@version": "1",
            "message": "Produced: {\"accountId\": \"1d60989c-7f0e-4d9d-96f6-ef0415e93616\"}",
            "logger_name": "com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "dc5a34d508deccfd",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:37.514",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:37.514Z",
            "@version": "1",
            "message": "Saving response under id 1d60989c-7f0e-4d9d-96f6-ef0415e93616",
            "logger_name": "com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "dc5a34d508deccfd",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:37.513",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:37.513Z",
            "@version": "1",
            "message": "validateTransition",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "dc5a34d508deccfd",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:37.513",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:37.513Z",
            "@version": "1",
            "message": "on Exit run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "dc5a34d508deccfd",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:37.513",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:37.513Z",
            "@version": "1",
            "message": "onEnter run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "dc5a34d508deccfd",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:37.513",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:37.513Z",
            "@version": "1",
            "message": "new status",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "dc5a34d508deccfd",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:37.508",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:37.507Z",
            "@version": "1",
            "message": "Received portfolio to saving pot linkage event: {\"portfolioId\": \"04d26069-20e6-40d6-8bbb-8768db6f20a9\", \"accountId\": \"1d60989c-7f0e-4d9d-96f6-ef0415e93616\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "dc5a34d508deccfd",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:37.504",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:37.504Z",
            "@version": "1",
            "message": "Received PortfolioLinkedWithAccountEvent: {\"portfolioId\": \"04d26069-20e6-40d6-8bbb-8768db6f20a9\", \"accountId\": \"1d60989c-7f0e-4d9d-96f6-ef0415e93616\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "dc5a34d508deccfd",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:37.503",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:37.503Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_portfolio_account_linked_events-7, groupId=deposit_portfolio_account_linked_events] Seeking to offset 82648 for partition deposit.portfolio.account.linked.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:37.503",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:37.503Z",
            "@version": "1",
            "message": "Error handler threw an exception",
            "logger_name": "org.springframework.kafka.listener.KafkaMessageListenerContainer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Seek to current after exception; nested exception is org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:208)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2719)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2689)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t... 9 common frames omitted\nCaused by: org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\tSuppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: \nError has been observed at the following site(s):\n\t*__checkpoint ⇢ 409 from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses [DefaultWebClient]\nOriginal Stack Trace:\n\t\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\t\tat org.springframework.web.reactive.function.client.DefaultClientResponse.lambda$createException$1(DefaultClientResponse.java:207)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:106)\n\t\tat reactor.core.publisher.FluxOnErrorReturn$ReturnSubscriber.onNext(FluxOnErrorReturn.java:162)\n\t\tat reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:101)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)\n\t\tat reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)\n\t\tat reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)\n\t\tat reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1816)\n\t\tat reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:160)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat reactor.netty.channel.FluxReceive.onInboundComplete(FluxReceive.java:400)\n\t\tat reactor.netty.channel.ChannelOperations.onInboundComplete(ChannelOperations.java:419)\n\t\tat reactor.netty.channel.ChannelOperations.terminate(ChannelOperations.java:473)\n\t\tat reactor.netty.http.client.HttpClientOperations.onInboundNext(HttpClientOperations.java:702)\n\t\tat reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:113)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:336)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:308)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\n\t\tat io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe.epollInReady(AbstractEpollStreamChannel.java:800)\n\t\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\n\t\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\n\t\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\n\t\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\n\t\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n\tSuppressed: java.lang.Exception: #block terminated with an error\n\t\tat reactor.core.publisher.BlockingSingleSubscriber.blockingGet(BlockingSingleSubscriber.java:99)\n\t\tat reactor.core.publisher.Mono.block(Mono.java:1707)\n\t\tat com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl.saveAsyncResult(AsyncResponseServiceImpl.kt:17)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.produceSavingPotCreatedAsyncResult(SavingPotActiveHandler.kt:49)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:39)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:17)\n\t\tat com.arbm.digibank.accounts.common.statemachine.AccountStateMachine.transitionTo(AccountStateMachine.kt:20)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo(SavingPotService.kt:251)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo$default(SavingPotService.kt:247)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.activateSavingPot(SavingPotService.kt:117)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$FastClassBySpringCGLIB$$ece3748f.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.retry.annotation.AnnotationAwareRetryOperationsInterceptor.invoke(AnnotationAwareRetryOperationsInterceptor.java:162)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$EnhancerBySpringCGLIB$$decf1564.activateSavingPot(<generated>)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.handleSavingPotEvent(PortfolioEventProcessor.kt:90)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(PortfolioEventProcessor.kt:47)\n\t\tat jdk.internal.reflect.GeneratedMethodAccessor295.invoke(Unknown Source)\n\t\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\t\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\t\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\t\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$ba1defd9.onMessage(<generated>)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\t\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\t\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:33.492",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:33.492Z",
            "@version": "1",
            "message": "Saving response under id 1d60989c-7f0e-4d9d-96f6-ef0415e93616",
            "logger_name": "com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "955efd722867bb93",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:33.492",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:33.492Z",
            "@version": "1",
            "message": "Produced: {\"accountId\": \"1d60989c-7f0e-4d9d-96f6-ef0415e93616\"}",
            "logger_name": "com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "955efd722867bb93",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:33.492",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:33.492Z",
            "@version": "1",
            "message": "new status",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "955efd722867bb93",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:33.492",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:33.492Z",
            "@version": "1",
            "message": "onEnter run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "955efd722867bb93",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:33.492",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:33.492Z",
            "@version": "1",
            "message": "on Exit run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "955efd722867bb93",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:33.492",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:33.492Z",
            "@version": "1",
            "message": "validateTransition",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "955efd722867bb93",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:33.486",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:33.486Z",
            "@version": "1",
            "message": "Received portfolio to saving pot linkage event: {\"portfolioId\": \"04d26069-20e6-40d6-8bbb-8768db6f20a9\", \"accountId\": \"1d60989c-7f0e-4d9d-96f6-ef0415e93616\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "955efd722867bb93",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:33.483",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:33.483Z",
            "@version": "1",
            "message": "Received PortfolioLinkedWithAccountEvent: {\"portfolioId\": \"04d26069-20e6-40d6-8bbb-8768db6f20a9\", \"accountId\": \"1d60989c-7f0e-4d9d-96f6-ef0415e93616\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "955efd722867bb93",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:33.482",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:33.482Z",
            "@version": "1",
            "message": "Error handler threw an exception",
            "logger_name": "org.springframework.kafka.listener.KafkaMessageListenerContainer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Seek to current after exception; nested exception is org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:208)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2719)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2689)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t... 9 common frames omitted\nCaused by: org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\tSuppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: \nError has been observed at the following site(s):\n\t*__checkpoint ⇢ 409 from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses [DefaultWebClient]\nOriginal Stack Trace:\n\t\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\t\tat org.springframework.web.reactive.function.client.DefaultClientResponse.lambda$createException$1(DefaultClientResponse.java:207)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:106)\n\t\tat reactor.core.publisher.FluxOnErrorReturn$ReturnSubscriber.onNext(FluxOnErrorReturn.java:162)\n\t\tat reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:101)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)\n\t\tat reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)\n\t\tat reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)\n\t\tat reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1816)\n\t\tat reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:160)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat reactor.netty.channel.FluxReceive.onInboundComplete(FluxReceive.java:400)\n\t\tat reactor.netty.channel.ChannelOperations.onInboundComplete(ChannelOperations.java:419)\n\t\tat reactor.netty.channel.ChannelOperations.terminate(ChannelOperations.java:473)\n\t\tat reactor.netty.http.client.HttpClientOperations.onInboundNext(HttpClientOperations.java:702)\n\t\tat reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:113)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:336)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:308)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\n\t\tat io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe.epollInReady(AbstractEpollStreamChannel.java:800)\n\t\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\n\t\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\n\t\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\n\t\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\n\t\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n\tSuppressed: java.lang.Exception: #block terminated with an error\n\t\tat reactor.core.publisher.BlockingSingleSubscriber.blockingGet(BlockingSingleSubscriber.java:99)\n\t\tat reactor.core.publisher.Mono.block(Mono.java:1707)\n\t\tat com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl.saveAsyncResult(AsyncResponseServiceImpl.kt:17)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.produceSavingPotCreatedAsyncResult(SavingPotActiveHandler.kt:49)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:39)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:17)\n\t\tat com.arbm.digibank.accounts.common.statemachine.AccountStateMachine.transitionTo(AccountStateMachine.kt:20)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo(SavingPotService.kt:251)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo$default(SavingPotService.kt:247)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.activateSavingPot(SavingPotService.kt:117)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$FastClassBySpringCGLIB$$ece3748f.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.retry.annotation.AnnotationAwareRetryOperationsInterceptor.invoke(AnnotationAwareRetryOperationsInterceptor.java:162)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$EnhancerBySpringCGLIB$$decf1564.activateSavingPot(<generated>)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.handleSavingPotEvent(PortfolioEventProcessor.kt:90)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(PortfolioEventProcessor.kt:47)\n\t\tat jdk.internal.reflect.GeneratedMethodAccessor295.invoke(Unknown Source)\n\t\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\t\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\t\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\t\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$ba1defd9.onMessage(<generated>)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\t\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\t\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:33.482",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:33.481Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_portfolio_account_linked_events-7, groupId=deposit_portfolio_account_linked_events] Seeking to offset 82648 for partition deposit.portfolio.account.linked.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:31.474",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:31.474Z",
            "@version": "1",
            "message": "Saving response under id 1d60989c-7f0e-4d9d-96f6-ef0415e93616",
            "logger_name": "com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "1a47c78f984617af",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:31.474",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:31.474Z",
            "@version": "1",
            "message": "Produced: {\"accountId\": \"1d60989c-7f0e-4d9d-96f6-ef0415e93616\"}",
            "logger_name": "com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "1a47c78f984617af",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:31.474",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:31.474Z",
            "@version": "1",
            "message": "new status",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "1a47c78f984617af",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:31.474",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:31.474Z",
            "@version": "1",
            "message": "onEnter run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "1a47c78f984617af",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:31.474",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:31.474Z",
            "@version": "1",
            "message": "on Exit run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "1a47c78f984617af",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:31.474",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:31.474Z",
            "@version": "1",
            "message": "validateTransition",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "1a47c78f984617af",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:31.469",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:31.469Z",
            "@version": "1",
            "message": "Received portfolio to saving pot linkage event: {\"portfolioId\": \"04d26069-20e6-40d6-8bbb-8768db6f20a9\", \"accountId\": \"1d60989c-7f0e-4d9d-96f6-ef0415e93616\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "1a47c78f984617af",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:31.466",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:31.466Z",
            "@version": "1",
            "message": "Received PortfolioLinkedWithAccountEvent: {\"portfolioId\": \"04d26069-20e6-40d6-8bbb-8768db6f20a9\", \"accountId\": \"1d60989c-7f0e-4d9d-96f6-ef0415e93616\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "1a47c78f984617af",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:30.985",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:30.985Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_portfolio_account_linked_events-7, groupId=deposit_portfolio_account_linked_events] Seeking to offset 82648 for partition deposit.portfolio.account.linked.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:30.973",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:30.973Z",
            "@version": "1",
            "message": "Saving response under id 5f9c8f0f-369b-43f7-a738-c07a8a652ea7",
            "logger_name": "com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "40aaf0d5fbb4d7e0",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:30.973",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:30.973Z",
            "@version": "1",
            "message": "Produced: {\"accountId\": \"5f9c8f0f-369b-43f7-a738-c07a8a652ea7\"}",
            "logger_name": "com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "40aaf0d5fbb4d7e0",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:30.973",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:30.973Z",
            "@version": "1",
            "message": "new status",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "40aaf0d5fbb4d7e0",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:30.973",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:30.973Z",
            "@version": "1",
            "message": "onEnter run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "40aaf0d5fbb4d7e0",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:30.973",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:30.973Z",
            "@version": "1",
            "message": "on Exit run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "40aaf0d5fbb4d7e0",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:30.973",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:30.973Z",
            "@version": "1",
            "message": "validateTransition",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "40aaf0d5fbb4d7e0",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:30.968",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:30.968Z",
            "@version": "1",
            "message": "Received portfolio to saving pot linkage event: {\"portfolioId\": \"04d26069-20e6-40d6-8bbb-8768db6f20a9\", \"accountId\": \"5f9c8f0f-369b-43f7-a738-c07a8a652ea7\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "40aaf0d5fbb4d7e0",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:30.964",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:30.964Z",
            "@version": "1",
            "message": "Received PortfolioLinkedWithAccountEvent: {\"portfolioId\": \"04d26069-20e6-40d6-8bbb-8768db6f20a9\", \"accountId\": \"5f9c8f0f-369b-43f7-a738-c07a8a652ea7\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "40aaf0d5fbb4d7e0",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:30.963",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:30.963Z",
            "@version": "1",
            "message": "Error handler threw an exception",
            "logger_name": "org.springframework.kafka.listener.KafkaMessageListenerContainer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Seek to current after exception; nested exception is org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:208)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2719)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2689)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t... 9 common frames omitted\nCaused by: org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\tSuppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: \nError has been observed at the following site(s):\n\t*__checkpoint ⇢ 409 from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses [DefaultWebClient]\nOriginal Stack Trace:\n\t\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\t\tat org.springframework.web.reactive.function.client.DefaultClientResponse.lambda$createException$1(DefaultClientResponse.java:207)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:106)\n\t\tat reactor.core.publisher.FluxOnErrorReturn$ReturnSubscriber.onNext(FluxOnErrorReturn.java:162)\n\t\tat reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:101)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)\n\t\tat reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)\n\t\tat reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)\n\t\tat reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1816)\n\t\tat reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:160)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat reactor.netty.channel.FluxReceive.onInboundComplete(FluxReceive.java:400)\n\t\tat reactor.netty.channel.ChannelOperations.onInboundComplete(ChannelOperations.java:419)\n\t\tat reactor.netty.channel.ChannelOperations.terminate(ChannelOperations.java:473)\n\t\tat reactor.netty.http.client.HttpClientOperations.onInboundNext(HttpClientOperations.java:702)\n\t\tat reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:113)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:336)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:308)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\n\t\tat io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe.epollInReady(AbstractEpollStreamChannel.java:800)\n\t\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\n\t\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\n\t\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\n\t\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\n\t\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n\tSuppressed: java.lang.Exception: #block terminated with an error\n\t\tat reactor.core.publisher.BlockingSingleSubscriber.blockingGet(BlockingSingleSubscriber.java:99)\n\t\tat reactor.core.publisher.Mono.block(Mono.java:1707)\n\t\tat com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl.saveAsyncResult(AsyncResponseServiceImpl.kt:17)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.produceSavingPotCreatedAsyncResult(SavingPotActiveHandler.kt:49)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:39)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:17)\n\t\tat com.arbm.digibank.accounts.common.statemachine.AccountStateMachine.transitionTo(AccountStateMachine.kt:20)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo(SavingPotService.kt:251)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo$default(SavingPotService.kt:247)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.activateSavingPot(SavingPotService.kt:117)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$FastClassBySpringCGLIB$$ece3748f.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.retry.annotation.AnnotationAwareRetryOperationsInterceptor.invoke(AnnotationAwareRetryOperationsInterceptor.java:162)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$EnhancerBySpringCGLIB$$decf1564.activateSavingPot(<generated>)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.handleSavingPotEvent(PortfolioEventProcessor.kt:90)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(PortfolioEventProcessor.kt:47)\n\t\tat jdk.internal.reflect.GeneratedMethodAccessor295.invoke(Unknown Source)\n\t\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\t\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\t\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\t\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$ba1defd9.onMessage(<generated>)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\t\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\t\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:30.963",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:30.963Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_portfolio_account_linked_events-7, groupId=deposit_portfolio_account_linked_events] Seeking to offset 82647 for partition deposit.portfolio.account.linked.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:26.953",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:26.953Z",
            "@version": "1",
            "message": "validateTransition",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "02e9545437dd07eb",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:26.953",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:26.953Z",
            "@version": "1",
            "message": "on Exit run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "02e9545437dd07eb",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:26.953",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:26.953Z",
            "@version": "1",
            "message": "onEnter run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "02e9545437dd07eb",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:26.953",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:26.953Z",
            "@version": "1",
            "message": "new status",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "02e9545437dd07eb",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:26.953",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:26.953Z",
            "@version": "1",
            "message": "Produced: {\"accountId\": \"5f9c8f0f-369b-43f7-a738-c07a8a652ea7\"}",
            "logger_name": "com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "02e9545437dd07eb",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:26.953",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:26.953Z",
            "@version": "1",
            "message": "Saving response under id 5f9c8f0f-369b-43f7-a738-c07a8a652ea7",
            "logger_name": "com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "02e9545437dd07eb",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:26.947",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:26.947Z",
            "@version": "1",
            "message": "Received portfolio to saving pot linkage event: {\"portfolioId\": \"04d26069-20e6-40d6-8bbb-8768db6f20a9\", \"accountId\": \"5f9c8f0f-369b-43f7-a738-c07a8a652ea7\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "02e9545437dd07eb",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:26.944",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:26.944Z",
            "@version": "1",
            "message": "Received PortfolioLinkedWithAccountEvent: {\"portfolioId\": \"04d26069-20e6-40d6-8bbb-8768db6f20a9\", \"accountId\": \"5f9c8f0f-369b-43f7-a738-c07a8a652ea7\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "02e9545437dd07eb",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:26.943",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:26.943Z",
            "@version": "1",
            "message": "Error handler threw an exception",
            "logger_name": "org.springframework.kafka.listener.KafkaMessageListenerContainer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Seek to current after exception; nested exception is org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:208)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2719)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2689)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t... 9 common frames omitted\nCaused by: org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\tSuppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: \nError has been observed at the following site(s):\n\t*__checkpoint ⇢ 409 from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses [DefaultWebClient]\nOriginal Stack Trace:\n\t\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\t\tat org.springframework.web.reactive.function.client.DefaultClientResponse.lambda$createException$1(DefaultClientResponse.java:207)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:106)\n\t\tat reactor.core.publisher.FluxOnErrorReturn$ReturnSubscriber.onNext(FluxOnErrorReturn.java:162)\n\t\tat reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:101)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)\n\t\tat reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)\n\t\tat reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)\n\t\tat reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1816)\n\t\tat reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:160)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat reactor.netty.channel.FluxReceive.onInboundComplete(FluxReceive.java:400)\n\t\tat reactor.netty.channel.ChannelOperations.onInboundComplete(ChannelOperations.java:419)\n\t\tat reactor.netty.channel.ChannelOperations.terminate(ChannelOperations.java:473)\n\t\tat reactor.netty.http.client.HttpClientOperations.onInboundNext(HttpClientOperations.java:702)\n\t\tat reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:113)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:336)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:308)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\n\t\tat io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe.epollInReady(AbstractEpollStreamChannel.java:800)\n\t\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\n\t\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\n\t\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\n\t\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\n\t\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n\tSuppressed: java.lang.Exception: #block terminated with an error\n\t\tat reactor.core.publisher.BlockingSingleSubscriber.blockingGet(BlockingSingleSubscriber.java:99)\n\t\tat reactor.core.publisher.Mono.block(Mono.java:1707)\n\t\tat com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl.saveAsyncResult(AsyncResponseServiceImpl.kt:17)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.produceSavingPotCreatedAsyncResult(SavingPotActiveHandler.kt:49)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:39)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:17)\n\t\tat com.arbm.digibank.accounts.common.statemachine.AccountStateMachine.transitionTo(AccountStateMachine.kt:20)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo(SavingPotService.kt:251)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo$default(SavingPotService.kt:247)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.activateSavingPot(SavingPotService.kt:117)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$FastClassBySpringCGLIB$$ece3748f.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.retry.annotation.AnnotationAwareRetryOperationsInterceptor.invoke(AnnotationAwareRetryOperationsInterceptor.java:162)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$EnhancerBySpringCGLIB$$decf1564.activateSavingPot(<generated>)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.handleSavingPotEvent(PortfolioEventProcessor.kt:90)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(PortfolioEventProcessor.kt:47)\n\t\tat jdk.internal.reflect.GeneratedMethodAccessor295.invoke(Unknown Source)\n\t\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\t\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\t\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\t\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$ba1defd9.onMessage(<generated>)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\t\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\t\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:26.942",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:26.942Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_portfolio_account_linked_events-7, groupId=deposit_portfolio_account_linked_events] Seeking to offset 82647 for partition deposit.portfolio.account.linked.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:24.934",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:24.934Z",
            "@version": "1",
            "message": "Saving response under id 5f9c8f0f-369b-43f7-a738-c07a8a652ea7",
            "logger_name": "com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "11fb2c8a2b869e75",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:24.934",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:24.934Z",
            "@version": "1",
            "message": "Produced: {\"accountId\": \"5f9c8f0f-369b-43f7-a738-c07a8a652ea7\"}",
            "logger_name": "com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "11fb2c8a2b869e75",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:24.934",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:24.934Z",
            "@version": "1",
            "message": "new status",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "11fb2c8a2b869e75",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:24.934",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:24.934Z",
            "@version": "1",
            "message": "onEnter run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "11fb2c8a2b869e75",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:24.934",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:24.934Z",
            "@version": "1",
            "message": "on Exit run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "11fb2c8a2b869e75",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:24.934",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:24.934Z",
            "@version": "1",
            "message": "validateTransition",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "11fb2c8a2b869e75",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:24.929",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:24.929Z",
            "@version": "1",
            "message": "Received portfolio to saving pot linkage event: {\"portfolioId\": \"04d26069-20e6-40d6-8bbb-8768db6f20a9\", \"accountId\": \"5f9c8f0f-369b-43f7-a738-c07a8a652ea7\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "11fb2c8a2b869e75",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:24.926",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:24.926Z",
            "@version": "1",
            "message": "Received PortfolioLinkedWithAccountEvent: {\"portfolioId\": \"04d26069-20e6-40d6-8bbb-8768db6f20a9\", \"accountId\": \"5f9c8f0f-369b-43f7-a738-c07a8a652ea7\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "11fb2c8a2b869e75",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:24.450",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:24.45Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_portfolio_account_linked_events-7, groupId=deposit_portfolio_account_linked_events] Seeking to offset 82647 for partition deposit.portfolio.account.linked.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:24.434",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:24.434Z",
            "@version": "1",
            "message": "Saving response under id 824e1725-77fc-4930-abce-4e8868d460e7",
            "logger_name": "com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "9786c72b6d2615d8",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:24.434",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:24.434Z",
            "@version": "1",
            "message": "Produced: {\"accountId\": \"824e1725-77fc-4930-abce-4e8868d460e7\"}",
            "logger_name": "com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "9786c72b6d2615d8",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:24.434",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:24.434Z",
            "@version": "1",
            "message": "new status",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "9786c72b6d2615d8",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:24.434",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:24.434Z",
            "@version": "1",
            "message": "onEnter run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "9786c72b6d2615d8",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:24.434",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:24.434Z",
            "@version": "1",
            "message": "on Exit run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "9786c72b6d2615d8",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:24.434",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:24.434Z",
            "@version": "1",
            "message": "validateTransition",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "9786c72b6d2615d8",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:24.428",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:24.428Z",
            "@version": "1",
            "message": "Received portfolio to saving pot linkage event: {\"portfolioId\": \"6cb9a02d-02c8-ae76-9781-3d96faec8f9d\", \"accountId\": \"824e1725-77fc-4930-abce-4e8868d460e7\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "9786c72b6d2615d8",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:24.424",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:24.424Z",
            "@version": "1",
            "message": "Received PortfolioLinkedWithAccountEvent: {\"portfolioId\": \"6cb9a02d-02c8-ae76-9781-3d96faec8f9d\", \"accountId\": \"824e1725-77fc-4930-abce-4e8868d460e7\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "9786c72b6d2615d8",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:24.423",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:24.423Z",
            "@version": "1",
            "message": "Error handler threw an exception",
            "logger_name": "org.springframework.kafka.listener.KafkaMessageListenerContainer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Seek to current after exception; nested exception is org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:208)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2719)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2689)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t... 9 common frames omitted\nCaused by: org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\tSuppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: \nError has been observed at the following site(s):\n\t*__checkpoint ⇢ 409 from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses [DefaultWebClient]\nOriginal Stack Trace:\n\t\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\t\tat org.springframework.web.reactive.function.client.DefaultClientResponse.lambda$createException$1(DefaultClientResponse.java:207)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:106)\n\t\tat reactor.core.publisher.FluxOnErrorReturn$ReturnSubscriber.onNext(FluxOnErrorReturn.java:162)\n\t\tat reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:101)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)\n\t\tat reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)\n\t\tat reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)\n\t\tat reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1816)\n\t\tat reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:160)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat reactor.netty.channel.FluxReceive.onInboundComplete(FluxReceive.java:400)\n\t\tat reactor.netty.channel.ChannelOperations.onInboundComplete(ChannelOperations.java:419)\n\t\tat reactor.netty.channel.ChannelOperations.terminate(ChannelOperations.java:473)\n\t\tat reactor.netty.http.client.HttpClientOperations.onInboundNext(HttpClientOperations.java:702)\n\t\tat reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:113)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:336)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:308)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\n\t\tat io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe.epollInReady(AbstractEpollStreamChannel.java:800)\n\t\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\n\t\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\n\t\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\n\t\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\n\t\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n\tSuppressed: java.lang.Exception: #block terminated with an error\n\t\tat reactor.core.publisher.BlockingSingleSubscriber.blockingGet(BlockingSingleSubscriber.java:99)\n\t\tat reactor.core.publisher.Mono.block(Mono.java:1707)\n\t\tat com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl.saveAsyncResult(AsyncResponseServiceImpl.kt:17)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.produceSavingPotCreatedAsyncResult(SavingPotActiveHandler.kt:49)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:39)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:17)\n\t\tat com.arbm.digibank.accounts.common.statemachine.AccountStateMachine.transitionTo(AccountStateMachine.kt:20)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo(SavingPotService.kt:251)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo$default(SavingPotService.kt:247)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.activateSavingPot(SavingPotService.kt:117)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$FastClassBySpringCGLIB$$ece3748f.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.retry.annotation.AnnotationAwareRetryOperationsInterceptor.invoke(AnnotationAwareRetryOperationsInterceptor.java:162)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$EnhancerBySpringCGLIB$$decf1564.activateSavingPot(<generated>)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.handleSavingPotEvent(PortfolioEventProcessor.kt:90)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(PortfolioEventProcessor.kt:47)\n\t\tat jdk.internal.reflect.GeneratedMethodAccessor295.invoke(Unknown Source)\n\t\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\t\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\t\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\t\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$ba1defd9.onMessage(<generated>)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\t\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\t\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:24.423",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:24.422Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_portfolio_account_linked_events-7, groupId=deposit_portfolio_account_linked_events] Seeking to offset 82646 for partition deposit.portfolio.account.linked.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:20.413",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:20.412Z",
            "@version": "1",
            "message": "Saving response under id 824e1725-77fc-4930-abce-4e8868d460e7",
            "logger_name": "com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "11d4c1cae7bb7d3f",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:20.412",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:20.412Z",
            "@version": "1",
            "message": "Produced: {\"accountId\": \"824e1725-77fc-4930-abce-4e8868d460e7\"}",
            "logger_name": "com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "11d4c1cae7bb7d3f",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:20.412",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:20.412Z",
            "@version": "1",
            "message": "new status",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "11d4c1cae7bb7d3f",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:20.412",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:20.412Z",
            "@version": "1",
            "message": "onEnter run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "11d4c1cae7bb7d3f",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:20.412",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:20.412Z",
            "@version": "1",
            "message": "on Exit run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "11d4c1cae7bb7d3f",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:20.412",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:20.412Z",
            "@version": "1",
            "message": "validateTransition",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "11d4c1cae7bb7d3f",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:20.406",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:20.406Z",
            "@version": "1",
            "message": "Received portfolio to saving pot linkage event: {\"portfolioId\": \"6cb9a02d-02c8-ae76-9781-3d96faec8f9d\", \"accountId\": \"824e1725-77fc-4930-abce-4e8868d460e7\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "11d4c1cae7bb7d3f",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:20.402",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:20.402Z",
            "@version": "1",
            "message": "Received PortfolioLinkedWithAccountEvent: {\"portfolioId\": \"6cb9a02d-02c8-ae76-9781-3d96faec8f9d\", \"accountId\": \"824e1725-77fc-4930-abce-4e8868d460e7\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "11d4c1cae7bb7d3f",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:20.401",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:20.401Z",
            "@version": "1",
            "message": "Error handler threw an exception",
            "logger_name": "org.springframework.kafka.listener.KafkaMessageListenerContainer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Seek to current after exception; nested exception is org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:208)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2719)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2689)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t... 9 common frames omitted\nCaused by: org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\tSuppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: \nError has been observed at the following site(s):\n\t*__checkpoint ⇢ 409 from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses [DefaultWebClient]\nOriginal Stack Trace:\n\t\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\t\tat org.springframework.web.reactive.function.client.DefaultClientResponse.lambda$createException$1(DefaultClientResponse.java:207)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:106)\n\t\tat reactor.core.publisher.FluxOnErrorReturn$ReturnSubscriber.onNext(FluxOnErrorReturn.java:162)\n\t\tat reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:101)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)\n\t\tat reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)\n\t\tat reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)\n\t\tat reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1816)\n\t\tat reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:160)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat reactor.netty.channel.FluxReceive.onInboundComplete(FluxReceive.java:400)\n\t\tat reactor.netty.channel.ChannelOperations.onInboundComplete(ChannelOperations.java:419)\n\t\tat reactor.netty.channel.ChannelOperations.terminate(ChannelOperations.java:473)\n\t\tat reactor.netty.http.client.HttpClientOperations.onInboundNext(HttpClientOperations.java:702)\n\t\tat reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:113)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:336)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:308)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\n\t\tat io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe.epollInReady(AbstractEpollStreamChannel.java:800)\n\t\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\n\t\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\n\t\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\n\t\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\n\t\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n\tSuppressed: java.lang.Exception: #block terminated with an error\n\t\tat reactor.core.publisher.BlockingSingleSubscriber.blockingGet(BlockingSingleSubscriber.java:99)\n\t\tat reactor.core.publisher.Mono.block(Mono.java:1707)\n\t\tat com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl.saveAsyncResult(AsyncResponseServiceImpl.kt:17)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.produceSavingPotCreatedAsyncResult(SavingPotActiveHandler.kt:49)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:39)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:17)\n\t\tat com.arbm.digibank.accounts.common.statemachine.AccountStateMachine.transitionTo(AccountStateMachine.kt:20)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo(SavingPotService.kt:251)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo$default(SavingPotService.kt:247)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.activateSavingPot(SavingPotService.kt:117)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$FastClassBySpringCGLIB$$ece3748f.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.retry.annotation.AnnotationAwareRetryOperationsInterceptor.invoke(AnnotationAwareRetryOperationsInterceptor.java:162)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$EnhancerBySpringCGLIB$$decf1564.activateSavingPot(<generated>)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.handleSavingPotEvent(PortfolioEventProcessor.kt:90)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(PortfolioEventProcessor.kt:47)\n\t\tat jdk.internal.reflect.GeneratedMethodAccessor295.invoke(Unknown Source)\n\t\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\t\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\t\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\t\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$ba1defd9.onMessage(<generated>)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\t\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\t\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:20.400",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:20.4Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_portfolio_account_linked_events-7, groupId=deposit_portfolio_account_linked_events] Seeking to offset 82646 for partition deposit.portfolio.account.linked.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:18.392",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:18.392Z",
            "@version": "1",
            "message": "Saving response under id 824e1725-77fc-4930-abce-4e8868d460e7",
            "logger_name": "com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "45583b62a4b2e7fe",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:18.392",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:18.392Z",
            "@version": "1",
            "message": "Produced: {\"accountId\": \"824e1725-77fc-4930-abce-4e8868d460e7\"}",
            "logger_name": "com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "45583b62a4b2e7fe",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:18.392",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:18.392Z",
            "@version": "1",
            "message": "new status",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "45583b62a4b2e7fe",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:18.392",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:18.392Z",
            "@version": "1",
            "message": "onEnter run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "45583b62a4b2e7fe",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:18.392",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:18.392Z",
            "@version": "1",
            "message": "on Exit run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "45583b62a4b2e7fe",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:18.392",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:18.392Z",
            "@version": "1",
            "message": "validateTransition",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "45583b62a4b2e7fe",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:18.387",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:18.387Z",
            "@version": "1",
            "message": "Received portfolio to saving pot linkage event: {\"portfolioId\": \"6cb9a02d-02c8-ae76-9781-3d96faec8f9d\", \"accountId\": \"824e1725-77fc-4930-abce-4e8868d460e7\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "45583b62a4b2e7fe",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:18.384",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:18.384Z",
            "@version": "1",
            "message": "Received PortfolioLinkedWithAccountEvent: {\"portfolioId\": \"6cb9a02d-02c8-ae76-9781-3d96faec8f9d\", \"accountId\": \"824e1725-77fc-4930-abce-4e8868d460e7\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "45583b62a4b2e7fe",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:17.913",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:17.913Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_portfolio_account_linked_events-7, groupId=deposit_portfolio_account_linked_events] Seeking to offset 82646 for partition deposit.portfolio.account.linked.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:17.901",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:17.901Z",
            "@version": "1",
            "message": "Saving response under id e5d317f6-f145-4a21-80f4-a891b09c0e56",
            "logger_name": "com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "0011a4852c970e6a",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:17.901",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:17.901Z",
            "@version": "1",
            "message": "Produced: {\"accountId\": \"e5d317f6-f145-4a21-80f4-a891b09c0e56\"}",
            "logger_name": "com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "0011a4852c970e6a",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:17.901",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:17.901Z",
            "@version": "1",
            "message": "new status",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "0011a4852c970e6a",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:17.901",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:17.901Z",
            "@version": "1",
            "message": "onEnter run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "0011a4852c970e6a",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:17.901",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:17.901Z",
            "@version": "1",
            "message": "on Exit run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "0011a4852c970e6a",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:17.901",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:17.901Z",
            "@version": "1",
            "message": "validateTransition",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "0011a4852c970e6a",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:17.886",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:17.886Z",
            "@version": "1",
            "message": "Received portfolio to saving pot linkage event: {\"portfolioId\": \"04d26069-20e6-40d6-8bbb-8768db6f20a9\", \"accountId\": \"e5d317f6-f145-4a21-80f4-a891b09c0e56\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "0011a4852c970e6a",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:17.883",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:17.883Z",
            "@version": "1",
            "message": "Received PortfolioLinkedWithAccountEvent: {\"portfolioId\": \"04d26069-20e6-40d6-8bbb-8768db6f20a9\", \"accountId\": \"e5d317f6-f145-4a21-80f4-a891b09c0e56\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "0011a4852c970e6a",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:17.882",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:17.881Z",
            "@version": "1",
            "message": "Error handler threw an exception",
            "logger_name": "org.springframework.kafka.listener.KafkaMessageListenerContainer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Seek to current after exception; nested exception is org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:208)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2719)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2689)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t... 9 common frames omitted\nCaused by: org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\tSuppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: \nError has been observed at the following site(s):\n\t*__checkpoint ⇢ 409 from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses [DefaultWebClient]\nOriginal Stack Trace:\n\t\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\t\tat org.springframework.web.reactive.function.client.DefaultClientResponse.lambda$createException$1(DefaultClientResponse.java:207)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:106)\n\t\tat reactor.core.publisher.FluxOnErrorReturn$ReturnSubscriber.onNext(FluxOnErrorReturn.java:162)\n\t\tat reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:101)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)\n\t\tat reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)\n\t\tat reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)\n\t\tat reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1816)\n\t\tat reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:160)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat reactor.netty.channel.FluxReceive.onInboundComplete(FluxReceive.java:400)\n\t\tat reactor.netty.channel.ChannelOperations.onInboundComplete(ChannelOperations.java:419)\n\t\tat reactor.netty.channel.ChannelOperations.terminate(ChannelOperations.java:473)\n\t\tat reactor.netty.http.client.HttpClientOperations.onInboundNext(HttpClientOperations.java:702)\n\t\tat reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:113)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:336)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:308)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\n\t\tat io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe.epollInReady(AbstractEpollStreamChannel.java:800)\n\t\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\n\t\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\n\t\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\n\t\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\n\t\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n\tSuppressed: java.lang.Exception: #block terminated with an error\n\t\tat reactor.core.publisher.BlockingSingleSubscriber.blockingGet(BlockingSingleSubscriber.java:99)\n\t\tat reactor.core.publisher.Mono.block(Mono.java:1707)\n\t\tat com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl.saveAsyncResult(AsyncResponseServiceImpl.kt:17)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.produceSavingPotCreatedAsyncResult(SavingPotActiveHandler.kt:49)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:39)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:17)\n\t\tat com.arbm.digibank.accounts.common.statemachine.AccountStateMachine.transitionTo(AccountStateMachine.kt:20)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo(SavingPotService.kt:251)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo$default(SavingPotService.kt:247)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.activateSavingPot(SavingPotService.kt:117)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$FastClassBySpringCGLIB$$ece3748f.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.retry.annotation.AnnotationAwareRetryOperationsInterceptor.invoke(AnnotationAwareRetryOperationsInterceptor.java:162)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$EnhancerBySpringCGLIB$$decf1564.activateSavingPot(<generated>)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.handleSavingPotEvent(PortfolioEventProcessor.kt:90)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(PortfolioEventProcessor.kt:47)\n\t\tat jdk.internal.reflect.GeneratedMethodAccessor295.invoke(Unknown Source)\n\t\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\t\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\t\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\t\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$ba1defd9.onMessage(<generated>)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\t\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\t\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:17.881",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:17.88Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_portfolio_account_linked_events-7, groupId=deposit_portfolio_account_linked_events] Seeking to offset 82645 for partition deposit.portfolio.account.linked.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:13.871",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:13.871Z",
            "@version": "1",
            "message": "Saving response under id e5d317f6-f145-4a21-80f4-a891b09c0e56",
            "logger_name": "com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "f6d7d92e478f5d4f",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:13.871",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:13.871Z",
            "@version": "1",
            "message": "Produced: {\"accountId\": \"e5d317f6-f145-4a21-80f4-a891b09c0e56\"}",
            "logger_name": "com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "f6d7d92e478f5d4f",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:13.871",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:13.871Z",
            "@version": "1",
            "message": "new status",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "f6d7d92e478f5d4f",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:13.871",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:13.871Z",
            "@version": "1",
            "message": "onEnter run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "f6d7d92e478f5d4f",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:13.871",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:13.871Z",
            "@version": "1",
            "message": "on Exit run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "f6d7d92e478f5d4f",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:13.871",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:13.871Z",
            "@version": "1",
            "message": "validateTransition",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "f6d7d92e478f5d4f",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:13.865",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:13.865Z",
            "@version": "1",
            "message": "Received portfolio to saving pot linkage event: {\"portfolioId\": \"04d26069-20e6-40d6-8bbb-8768db6f20a9\", \"accountId\": \"e5d317f6-f145-4a21-80f4-a891b09c0e56\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "f6d7d92e478f5d4f",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:13.862",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:13.862Z",
            "@version": "1",
            "message": "Received PortfolioLinkedWithAccountEvent: {\"portfolioId\": \"04d26069-20e6-40d6-8bbb-8768db6f20a9\", \"accountId\": \"e5d317f6-f145-4a21-80f4-a891b09c0e56\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "f6d7d92e478f5d4f",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:13.861",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:13.861Z",
            "@version": "1",
            "message": "Error handler threw an exception",
            "logger_name": "org.springframework.kafka.listener.KafkaMessageListenerContainer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Seek to current after exception; nested exception is org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:208)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2719)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2689)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t... 9 common frames omitted\nCaused by: org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\tSuppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: \nError has been observed at the following site(s):\n\t*__checkpoint ⇢ 409 from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses [DefaultWebClient]\nOriginal Stack Trace:\n\t\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\t\tat org.springframework.web.reactive.function.client.DefaultClientResponse.lambda$createException$1(DefaultClientResponse.java:207)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:106)\n\t\tat reactor.core.publisher.FluxOnErrorReturn$ReturnSubscriber.onNext(FluxOnErrorReturn.java:162)\n\t\tat reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:101)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)\n\t\tat reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)\n\t\tat reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)\n\t\tat reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1816)\n\t\tat reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:160)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat reactor.netty.channel.FluxReceive.onInboundComplete(FluxReceive.java:400)\n\t\tat reactor.netty.channel.ChannelOperations.onInboundComplete(ChannelOperations.java:419)\n\t\tat reactor.netty.channel.ChannelOperations.terminate(ChannelOperations.java:473)\n\t\tat reactor.netty.http.client.HttpClientOperations.onInboundNext(HttpClientOperations.java:702)\n\t\tat reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:113)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:336)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:308)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\n\t\tat io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe.epollInReady(AbstractEpollStreamChannel.java:800)\n\t\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\n\t\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\n\t\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\n\t\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\n\t\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n\tSuppressed: java.lang.Exception: #block terminated with an error\n\t\tat reactor.core.publisher.BlockingSingleSubscriber.blockingGet(BlockingSingleSubscriber.java:99)\n\t\tat reactor.core.publisher.Mono.block(Mono.java:1707)\n\t\tat com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl.saveAsyncResult(AsyncResponseServiceImpl.kt:17)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.produceSavingPotCreatedAsyncResult(SavingPotActiveHandler.kt:49)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:39)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:17)\n\t\tat com.arbm.digibank.accounts.common.statemachine.AccountStateMachine.transitionTo(AccountStateMachine.kt:20)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo(SavingPotService.kt:251)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo$default(SavingPotService.kt:247)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.activateSavingPot(SavingPotService.kt:117)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$FastClassBySpringCGLIB$$ece3748f.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.retry.annotation.AnnotationAwareRetryOperationsInterceptor.invoke(AnnotationAwareRetryOperationsInterceptor.java:162)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$EnhancerBySpringCGLIB$$decf1564.activateSavingPot(<generated>)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.handleSavingPotEvent(PortfolioEventProcessor.kt:90)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(PortfolioEventProcessor.kt:47)\n\t\tat jdk.internal.reflect.GeneratedMethodAccessor295.invoke(Unknown Source)\n\t\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\t\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\t\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\t\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$ba1defd9.onMessage(<generated>)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\t\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\t\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:13.860",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:13.86Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_portfolio_account_linked_events-7, groupId=deposit_portfolio_account_linked_events] Seeking to offset 82645 for partition deposit.portfolio.account.linked.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:11.853",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:11.853Z",
            "@version": "1",
            "message": "Saving response under id e5d317f6-f145-4a21-80f4-a891b09c0e56",
            "logger_name": "com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "37737be82db53d00",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:11.853",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:11.853Z",
            "@version": "1",
            "message": "Produced: {\"accountId\": \"e5d317f6-f145-4a21-80f4-a891b09c0e56\"}",
            "logger_name": "com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "37737be82db53d00",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:11.853",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:11.852Z",
            "@version": "1",
            "message": "new status",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "37737be82db53d00",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:11.853",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:11.852Z",
            "@version": "1",
            "message": "onEnter run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "37737be82db53d00",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:11.853",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:11.852Z",
            "@version": "1",
            "message": "on Exit run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "37737be82db53d00",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:11.853",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:11.852Z",
            "@version": "1",
            "message": "validateTransition",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "37737be82db53d00",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:11.848",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:11.848Z",
            "@version": "1",
            "message": "Received portfolio to saving pot linkage event: {\"portfolioId\": \"04d26069-20e6-40d6-8bbb-8768db6f20a9\", \"accountId\": \"e5d317f6-f145-4a21-80f4-a891b09c0e56\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "37737be82db53d00",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:11.845",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:11.845Z",
            "@version": "1",
            "message": "Received PortfolioLinkedWithAccountEvent: {\"portfolioId\": \"04d26069-20e6-40d6-8bbb-8768db6f20a9\", \"accountId\": \"e5d317f6-f145-4a21-80f4-a891b09c0e56\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "37737be82db53d00",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:11.365",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:11.364Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_portfolio_account_linked_events-7, groupId=deposit_portfolio_account_linked_events] Seeking to offset 82645 for partition deposit.portfolio.account.linked.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:11.353",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:11.353Z",
            "@version": "1",
            "message": "Saving response under id b0fbe6ac-0e51-4150-bb96-adf8c4751d6e",
            "logger_name": "com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "dc3a99283bd4160a",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:11.353",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:11.353Z",
            "@version": "1",
            "message": "Produced: {\"accountId\": \"b0fbe6ac-0e51-4150-bb96-adf8c4751d6e\"}",
            "logger_name": "com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "dc3a99283bd4160a",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:11.353",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:11.353Z",
            "@version": "1",
            "message": "new status",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "dc3a99283bd4160a",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:11.353",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:11.353Z",
            "@version": "1",
            "message": "onEnter run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "dc3a99283bd4160a",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:11.353",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:11.353Z",
            "@version": "1",
            "message": "on Exit run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "dc3a99283bd4160a",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:11.353",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:11.353Z",
            "@version": "1",
            "message": "validateTransition",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "dc3a99283bd4160a",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:11.347",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:11.347Z",
            "@version": "1",
            "message": "Received portfolio to saving pot linkage event: {\"portfolioId\": \"04d26069-20e6-40d6-8bbb-8768db6f20a9\", \"accountId\": \"b0fbe6ac-0e51-4150-bb96-adf8c4751d6e\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "dc3a99283bd4160a",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:11.344",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:11.344Z",
            "@version": "1",
            "message": "Received PortfolioLinkedWithAccountEvent: {\"portfolioId\": \"04d26069-20e6-40d6-8bbb-8768db6f20a9\", \"accountId\": \"b0fbe6ac-0e51-4150-bb96-adf8c4751d6e\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "dc3a99283bd4160a",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:11.343",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:11.343Z",
            "@version": "1",
            "message": "Error handler threw an exception",
            "logger_name": "org.springframework.kafka.listener.KafkaMessageListenerContainer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Seek to current after exception; nested exception is org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:208)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2719)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2689)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t... 9 common frames omitted\nCaused by: org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\tSuppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: \nError has been observed at the following site(s):\n\t*__checkpoint ⇢ 409 from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses [DefaultWebClient]\nOriginal Stack Trace:\n\t\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\t\tat org.springframework.web.reactive.function.client.DefaultClientResponse.lambda$createException$1(DefaultClientResponse.java:207)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:106)\n\t\tat reactor.core.publisher.FluxOnErrorReturn$ReturnSubscriber.onNext(FluxOnErrorReturn.java:162)\n\t\tat reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:101)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)\n\t\tat reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)\n\t\tat reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)\n\t\tat reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1816)\n\t\tat reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:160)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat reactor.netty.channel.FluxReceive.onInboundComplete(FluxReceive.java:400)\n\t\tat reactor.netty.channel.ChannelOperations.onInboundComplete(ChannelOperations.java:419)\n\t\tat reactor.netty.channel.ChannelOperations.terminate(ChannelOperations.java:473)\n\t\tat reactor.netty.http.client.HttpClientOperations.onInboundNext(HttpClientOperations.java:702)\n\t\tat reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:113)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:336)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:308)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\n\t\tat io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe.epollInReady(AbstractEpollStreamChannel.java:800)\n\t\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\n\t\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\n\t\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\n\t\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\n\t\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n\tSuppressed: java.lang.Exception: #block terminated with an error\n\t\tat reactor.core.publisher.BlockingSingleSubscriber.blockingGet(BlockingSingleSubscriber.java:99)\n\t\tat reactor.core.publisher.Mono.block(Mono.java:1707)\n\t\tat com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl.saveAsyncResult(AsyncResponseServiceImpl.kt:17)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.produceSavingPotCreatedAsyncResult(SavingPotActiveHandler.kt:49)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:39)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:17)\n\t\tat com.arbm.digibank.accounts.common.statemachine.AccountStateMachine.transitionTo(AccountStateMachine.kt:20)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo(SavingPotService.kt:251)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo$default(SavingPotService.kt:247)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.activateSavingPot(SavingPotService.kt:117)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$FastClassBySpringCGLIB$$ece3748f.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.retry.annotation.AnnotationAwareRetryOperationsInterceptor.invoke(AnnotationAwareRetryOperationsInterceptor.java:162)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$EnhancerBySpringCGLIB$$decf1564.activateSavingPot(<generated>)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.handleSavingPotEvent(PortfolioEventProcessor.kt:90)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(PortfolioEventProcessor.kt:47)\n\t\tat jdk.internal.reflect.GeneratedMethodAccessor295.invoke(Unknown Source)\n\t\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\t\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\t\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\t\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$ba1defd9.onMessage(<generated>)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\t\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\t\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:11.342",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:11.342Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_portfolio_account_linked_events-7, groupId=deposit_portfolio_account_linked_events] Seeking to offset 82644 for partition deposit.portfolio.account.linked.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:07.333",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:07.332Z",
            "@version": "1",
            "message": "validateTransition",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "c88776c5b9e3d549",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:07.333",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:07.332Z",
            "@version": "1",
            "message": "on Exit run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "c88776c5b9e3d549",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:07.333",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:07.332Z",
            "@version": "1",
            "message": "onEnter run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "c88776c5b9e3d549",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:07.333",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:07.332Z",
            "@version": "1",
            "message": "new status",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "c88776c5b9e3d549",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:07.333",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:07.333Z",
            "@version": "1",
            "message": "Saving response under id b0fbe6ac-0e51-4150-bb96-adf8c4751d6e",
            "logger_name": "com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "c88776c5b9e3d549",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:07.333",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:07.333Z",
            "@version": "1",
            "message": "Produced: {\"accountId\": \"b0fbe6ac-0e51-4150-bb96-adf8c4751d6e\"}",
            "logger_name": "com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "c88776c5b9e3d549",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:07.327",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:07.327Z",
            "@version": "1",
            "message": "Received portfolio to saving pot linkage event: {\"portfolioId\": \"04d26069-20e6-40d6-8bbb-8768db6f20a9\", \"accountId\": \"b0fbe6ac-0e51-4150-bb96-adf8c4751d6e\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "c88776c5b9e3d549",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:07.324",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:07.324Z",
            "@version": "1",
            "message": "Received PortfolioLinkedWithAccountEvent: {\"portfolioId\": \"04d26069-20e6-40d6-8bbb-8768db6f20a9\", \"accountId\": \"b0fbe6ac-0e51-4150-bb96-adf8c4751d6e\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "c88776c5b9e3d549",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:07.323",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:07.323Z",
            "@version": "1",
            "message": "Error handler threw an exception",
            "logger_name": "org.springframework.kafka.listener.KafkaMessageListenerContainer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Seek to current after exception; nested exception is org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:208)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2719)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2689)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t... 9 common frames omitted\nCaused by: org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\tSuppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: \nError has been observed at the following site(s):\n\t*__checkpoint ⇢ 409 from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses [DefaultWebClient]\nOriginal Stack Trace:\n\t\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\t\tat org.springframework.web.reactive.function.client.DefaultClientResponse.lambda$createException$1(DefaultClientResponse.java:207)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:106)\n\t\tat reactor.core.publisher.FluxOnErrorReturn$ReturnSubscriber.onNext(FluxOnErrorReturn.java:162)\n\t\tat reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:101)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)\n\t\tat reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)\n\t\tat reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)\n\t\tat reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1816)\n\t\tat reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:160)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat reactor.netty.channel.FluxReceive.onInboundComplete(FluxReceive.java:400)\n\t\tat reactor.netty.channel.ChannelOperations.onInboundComplete(ChannelOperations.java:419)\n\t\tat reactor.netty.channel.ChannelOperations.terminate(ChannelOperations.java:473)\n\t\tat reactor.netty.http.client.HttpClientOperations.onInboundNext(HttpClientOperations.java:702)\n\t\tat reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:113)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:336)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:308)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\n\t\tat io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe.epollInReady(AbstractEpollStreamChannel.java:800)\n\t\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\n\t\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\n\t\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\n\t\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\n\t\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n\tSuppressed: java.lang.Exception: #block terminated with an error\n\t\tat reactor.core.publisher.BlockingSingleSubscriber.blockingGet(BlockingSingleSubscriber.java:99)\n\t\tat reactor.core.publisher.Mono.block(Mono.java:1707)\n\t\tat com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl.saveAsyncResult(AsyncResponseServiceImpl.kt:17)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.produceSavingPotCreatedAsyncResult(SavingPotActiveHandler.kt:49)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:39)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:17)\n\t\tat com.arbm.digibank.accounts.common.statemachine.AccountStateMachine.transitionTo(AccountStateMachine.kt:20)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo(SavingPotService.kt:251)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo$default(SavingPotService.kt:247)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.activateSavingPot(SavingPotService.kt:117)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$FastClassBySpringCGLIB$$ece3748f.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.retry.annotation.AnnotationAwareRetryOperationsInterceptor.invoke(AnnotationAwareRetryOperationsInterceptor.java:162)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$EnhancerBySpringCGLIB$$decf1564.activateSavingPot(<generated>)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.handleSavingPotEvent(PortfolioEventProcessor.kt:90)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(PortfolioEventProcessor.kt:47)\n\t\tat jdk.internal.reflect.GeneratedMethodAccessor295.invoke(Unknown Source)\n\t\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\t\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\t\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\t\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$ba1defd9.onMessage(<generated>)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\t\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\t\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:07.322",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:07.322Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_portfolio_account_linked_events-7, groupId=deposit_portfolio_account_linked_events] Seeking to offset 82644 for partition deposit.portfolio.account.linked.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:05.314",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:05.314Z",
            "@version": "1",
            "message": "Saving response under id b0fbe6ac-0e51-4150-bb96-adf8c4751d6e",
            "logger_name": "com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "298e095fb42b1b6a",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:05.314",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:05.314Z",
            "@version": "1",
            "message": "Produced: {\"accountId\": \"b0fbe6ac-0e51-4150-bb96-adf8c4751d6e\"}",
            "logger_name": "com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "298e095fb42b1b6a",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:05.314",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:05.314Z",
            "@version": "1",
            "message": "new status",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "298e095fb42b1b6a",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:05.314",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:05.314Z",
            "@version": "1",
            "message": "onEnter run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "298e095fb42b1b6a",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:05.314",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:05.314Z",
            "@version": "1",
            "message": "on Exit run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "298e095fb42b1b6a",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:05.314",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:05.314Z",
            "@version": "1",
            "message": "validateTransition",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "298e095fb42b1b6a",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:05.309",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:05.309Z",
            "@version": "1",
            "message": "Received portfolio to saving pot linkage event: {\"portfolioId\": \"04d26069-20e6-40d6-8bbb-8768db6f20a9\", \"accountId\": \"b0fbe6ac-0e51-4150-bb96-adf8c4751d6e\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "298e095fb42b1b6a",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:05.306",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:05.306Z",
            "@version": "1",
            "message": "Received PortfolioLinkedWithAccountEvent: {\"portfolioId\": \"04d26069-20e6-40d6-8bbb-8768db6f20a9\", \"accountId\": \"b0fbe6ac-0e51-4150-bb96-adf8c4751d6e\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "298e095fb42b1b6a",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:04.826",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:04.826Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_portfolio_account_linked_events-7, groupId=deposit_portfolio_account_linked_events] Seeking to offset 82644 for partition deposit.portfolio.account.linked.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:04.814",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:04.814Z",
            "@version": "1",
            "message": "Saving response under id 13b7df83-cade-4afb-ace0-7c089cb3893c",
            "logger_name": "com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "3fe08b6f00b617f6",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:04.814",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:04.814Z",
            "@version": "1",
            "message": "Produced: {\"accountId\": \"13b7df83-cade-4afb-ace0-7c089cb3893c\"}",
            "logger_name": "com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "3fe08b6f00b617f6",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:04.814",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:04.814Z",
            "@version": "1",
            "message": "new status",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "3fe08b6f00b617f6",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:04.814",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:04.814Z",
            "@version": "1",
            "message": "onEnter run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "3fe08b6f00b617f6",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:04.814",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:04.814Z",
            "@version": "1",
            "message": "on Exit run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "3fe08b6f00b617f6",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:04.814",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:04.814Z",
            "@version": "1",
            "message": "validateTransition",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "3fe08b6f00b617f6",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:04.808",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:04.808Z",
            "@version": "1",
            "message": "Received portfolio to saving pot linkage event: {\"portfolioId\": \"eeeda3ac-aa84-465e-b260-449bafaa3d7e\", \"accountId\": \"13b7df83-cade-4afb-ace0-7c089cb3893c\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "3fe08b6f00b617f6",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:04.804",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:04.804Z",
            "@version": "1",
            "message": "Received PortfolioLinkedWithAccountEvent: {\"portfolioId\": \"eeeda3ac-aa84-465e-b260-449bafaa3d7e\", \"accountId\": \"13b7df83-cade-4afb-ace0-7c089cb3893c\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "3fe08b6f00b617f6",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:04.803",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:04.803Z",
            "@version": "1",
            "message": "Error handler threw an exception",
            "logger_name": "org.springframework.kafka.listener.KafkaMessageListenerContainer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Seek to current after exception; nested exception is org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:208)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2719)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2689)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t... 9 common frames omitted\nCaused by: org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\tSuppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: \nError has been observed at the following site(s):\n\t*__checkpoint ⇢ 409 from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses [DefaultWebClient]\nOriginal Stack Trace:\n\t\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\t\tat org.springframework.web.reactive.function.client.DefaultClientResponse.lambda$createException$1(DefaultClientResponse.java:207)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:106)\n\t\tat reactor.core.publisher.FluxOnErrorReturn$ReturnSubscriber.onNext(FluxOnErrorReturn.java:162)\n\t\tat reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:101)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)\n\t\tat reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)\n\t\tat reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)\n\t\tat reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1816)\n\t\tat reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:160)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat reactor.netty.channel.FluxReceive.onInboundComplete(FluxReceive.java:400)\n\t\tat reactor.netty.channel.ChannelOperations.onInboundComplete(ChannelOperations.java:419)\n\t\tat reactor.netty.channel.ChannelOperations.terminate(ChannelOperations.java:473)\n\t\tat reactor.netty.http.client.HttpClientOperations.onInboundNext(HttpClientOperations.java:702)\n\t\tat reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:113)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:336)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:308)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\n\t\tat io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe.epollInReady(AbstractEpollStreamChannel.java:800)\n\t\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\n\t\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\n\t\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\n\t\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\n\t\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n\tSuppressed: java.lang.Exception: #block terminated with an error\n\t\tat reactor.core.publisher.BlockingSingleSubscriber.blockingGet(BlockingSingleSubscriber.java:99)\n\t\tat reactor.core.publisher.Mono.block(Mono.java:1707)\n\t\tat com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl.saveAsyncResult(AsyncResponseServiceImpl.kt:17)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.produceSavingPotCreatedAsyncResult(SavingPotActiveHandler.kt:49)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:39)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:17)\n\t\tat com.arbm.digibank.accounts.common.statemachine.AccountStateMachine.transitionTo(AccountStateMachine.kt:20)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo(SavingPotService.kt:251)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo$default(SavingPotService.kt:247)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.activateSavingPot(SavingPotService.kt:117)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$FastClassBySpringCGLIB$$ece3748f.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.retry.annotation.AnnotationAwareRetryOperationsInterceptor.invoke(AnnotationAwareRetryOperationsInterceptor.java:162)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$EnhancerBySpringCGLIB$$decf1564.activateSavingPot(<generated>)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.handleSavingPotEvent(PortfolioEventProcessor.kt:90)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(PortfolioEventProcessor.kt:47)\n\t\tat jdk.internal.reflect.GeneratedMethodAccessor295.invoke(Unknown Source)\n\t\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\t\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\t\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\t\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$ba1defd9.onMessage(<generated>)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\t\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\t\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:04.802",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:04.802Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_portfolio_account_linked_events-7, groupId=deposit_portfolio_account_linked_events] Seeking to offset 82643 for partition deposit.portfolio.account.linked.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:03.987",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:03.987Z",
            "@version": "1",
            "message": "Request to retrieve account by following accountNumber: 912010110104003",
            "logger_name": "com.arbm.digibank.accounts.savingaccount.controller.SavingAccountControllerV1",
            "thread_name": "http-nio-8080-exec-6",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a008e319f6020f548c59b31013201c",
            "spanId": "1c20909b8143eafa",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:03.382",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:03.382Z",
            "@version": "1",
            "message": "Request to retrieve account by following accountNumber: 912010110273493",
            "logger_name": "com.arbm.digibank.accounts.savingaccount.controller.SavingAccountControllerV1",
            "thread_name": "http-nio-8080-exec-8",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a008e358fc8da51c9ebfa17b866d7e",
            "spanId": "4335cff982e281b8",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:00.792",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:00.792Z",
            "@version": "1",
            "message": "validateTransition",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "dd81044d523b204b",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:00.792",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:00.792Z",
            "@version": "1",
            "message": "on Exit run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "dd81044d523b204b",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:00.792",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:00.792Z",
            "@version": "1",
            "message": "onEnter run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "dd81044d523b204b",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:00.792",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:00.792Z",
            "@version": "1",
            "message": "new status",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "dd81044d523b204b",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:00.792",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:00.792Z",
            "@version": "1",
            "message": "Produced: {\"accountId\": \"13b7df83-cade-4afb-ace0-7c089cb3893c\"}",
            "logger_name": "com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "dd81044d523b204b",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:00.792",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:00.792Z",
            "@version": "1",
            "message": "Saving response under id 13b7df83-cade-4afb-ace0-7c089cb3893c",
            "logger_name": "com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "dd81044d523b204b",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:00.786",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:00.786Z",
            "@version": "1",
            "message": "Received portfolio to saving pot linkage event: {\"portfolioId\": \"eeeda3ac-aa84-465e-b260-449bafaa3d7e\", \"accountId\": \"13b7df83-cade-4afb-ace0-7c089cb3893c\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "dd81044d523b204b",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:00.783",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:00.783Z",
            "@version": "1",
            "message": "Received PortfolioLinkedWithAccountEvent: {\"portfolioId\": \"eeeda3ac-aa84-465e-b260-449bafaa3d7e\", \"accountId\": \"13b7df83-cade-4afb-ace0-7c089cb3893c\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "dd81044d523b204b",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:00.782",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:00.782Z",
            "@version": "1",
            "message": "Error handler threw an exception",
            "logger_name": "org.springframework.kafka.listener.KafkaMessageListenerContainer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Seek to current after exception; nested exception is org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:208)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2719)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2689)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t... 9 common frames omitted\nCaused by: org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\tSuppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: \nError has been observed at the following site(s):\n\t*__checkpoint ⇢ 409 from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses [DefaultWebClient]\nOriginal Stack Trace:\n\t\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\t\tat org.springframework.web.reactive.function.client.DefaultClientResponse.lambda$createException$1(DefaultClientResponse.java:207)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:106)\n\t\tat reactor.core.publisher.FluxOnErrorReturn$ReturnSubscriber.onNext(FluxOnErrorReturn.java:162)\n\t\tat reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:101)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)\n\t\tat reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)\n\t\tat reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)\n\t\tat reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1816)\n\t\tat reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:160)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat reactor.netty.channel.FluxReceive.onInboundComplete(FluxReceive.java:400)\n\t\tat reactor.netty.channel.ChannelOperations.onInboundComplete(ChannelOperations.java:419)\n\t\tat reactor.netty.channel.ChannelOperations.terminate(ChannelOperations.java:473)\n\t\tat reactor.netty.http.client.HttpClientOperations.onInboundNext(HttpClientOperations.java:702)\n\t\tat reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:113)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:336)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:308)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\n\t\tat io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe.epollInReady(AbstractEpollStreamChannel.java:800)\n\t\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\n\t\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\n\t\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\n\t\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\n\t\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n\tSuppressed: java.lang.Exception: #block terminated with an error\n\t\tat reactor.core.publisher.BlockingSingleSubscriber.blockingGet(BlockingSingleSubscriber.java:99)\n\t\tat reactor.core.publisher.Mono.block(Mono.java:1707)\n\t\tat com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl.saveAsyncResult(AsyncResponseServiceImpl.kt:17)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.produceSavingPotCreatedAsyncResult(SavingPotActiveHandler.kt:49)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:39)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:17)\n\t\tat com.arbm.digibank.accounts.common.statemachine.AccountStateMachine.transitionTo(AccountStateMachine.kt:20)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo(SavingPotService.kt:251)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo$default(SavingPotService.kt:247)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.activateSavingPot(SavingPotService.kt:117)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$FastClassBySpringCGLIB$$ece3748f.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.retry.annotation.AnnotationAwareRetryOperationsInterceptor.invoke(AnnotationAwareRetryOperationsInterceptor.java:162)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$EnhancerBySpringCGLIB$$decf1564.activateSavingPot(<generated>)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.handleSavingPotEvent(PortfolioEventProcessor.kt:90)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(PortfolioEventProcessor.kt:47)\n\t\tat jdk.internal.reflect.GeneratedMethodAccessor295.invoke(Unknown Source)\n\t\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\t\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\t\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\t\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$ba1defd9.onMessage(<generated>)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\t\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\t\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:08:00.781",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:08:00.781Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_portfolio_account_linked_events-7, groupId=deposit_portfolio_account_linked_events] Seeking to offset 82643 for partition deposit.portfolio.account.linked.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:07:58.773",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:07:58.773Z",
            "@version": "1",
            "message": "Saving response under id 13b7df83-cade-4afb-ace0-7c089cb3893c",
            "logger_name": "com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "a2b0c5fff19c2ad8",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:07:58.773",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:07:58.773Z",
            "@version": "1",
            "message": "Produced: {\"accountId\": \"13b7df83-cade-4afb-ace0-7c089cb3893c\"}",
            "logger_name": "com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "a2b0c5fff19c2ad8",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:07:58.773",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:07:58.773Z",
            "@version": "1",
            "message": "new status",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "a2b0c5fff19c2ad8",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:07:58.773",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:07:58.773Z",
            "@version": "1",
            "message": "onEnter run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "a2b0c5fff19c2ad8",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:07:58.773",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:07:58.773Z",
            "@version": "1",
            "message": "on Exit run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "a2b0c5fff19c2ad8",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:07:58.773",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:07:58.773Z",
            "@version": "1",
            "message": "validateTransition",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "a2b0c5fff19c2ad8",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:07:58.766",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:07:58.766Z",
            "@version": "1",
            "message": "Received portfolio to saving pot linkage event: {\"portfolioId\": \"eeeda3ac-aa84-465e-b260-449bafaa3d7e\", \"accountId\": \"13b7df83-cade-4afb-ace0-7c089cb3893c\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "a2b0c5fff19c2ad8",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:07:58.763",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:07:58.763Z",
            "@version": "1",
            "message": "Received PortfolioLinkedWithAccountEvent: {\"portfolioId\": \"eeeda3ac-aa84-465e-b260-449bafaa3d7e\", \"accountId\": \"13b7df83-cade-4afb-ace0-7c089cb3893c\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "a2b0c5fff19c2ad8",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:07:58.284",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:07:58.284Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_portfolio_account_linked_events-7, groupId=deposit_portfolio_account_linked_events] Seeking to offset 82643 for partition deposit.portfolio.account.linked.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:07:58.271",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:07:58.271Z",
            "@version": "1",
            "message": "Saving response under id feb64eca-f996-4d9a-b6c9-0947d797807d",
            "logger_name": "com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "645e8fa86d0335c6",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:07:58.271",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:07:58.271Z",
            "@version": "1",
            "message": "Produced: {\"accountId\": \"feb64eca-f996-4d9a-b6c9-0947d797807d\"}",
            "logger_name": "com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "645e8fa86d0335c6",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:07:58.271",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:07:58.271Z",
            "@version": "1",
            "message": "new status",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "645e8fa86d0335c6",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:07:58.271",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:07:58.271Z",
            "@version": "1",
            "message": "onEnter run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "645e8fa86d0335c6",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:07:58.271",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:07:58.271Z",
            "@version": "1",
            "message": "on Exit run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "645e8fa86d0335c6",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:07:58.271",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:07:58.271Z",
            "@version": "1",
            "message": "validateTransition",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "645e8fa86d0335c6",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:07:58.265",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:07:58.265Z",
            "@version": "1",
            "message": "Received portfolio to saving pot linkage event: {\"portfolioId\": \"eeeda3ac-aa84-465e-b260-449bafaa3d7e\", \"accountId\": \"feb64eca-f996-4d9a-b6c9-0947d797807d\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "645e8fa86d0335c6",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:07:58.262",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:07:58.261Z",
            "@version": "1",
            "message": "Received PortfolioLinkedWithAccountEvent: {\"portfolioId\": \"eeeda3ac-aa84-465e-b260-449bafaa3d7e\", \"accountId\": \"feb64eca-f996-4d9a-b6c9-0947d797807d\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "645e8fa86d0335c6",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:07:58.259",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:07:58.258Z",
            "@version": "1",
            "message": "Error handler threw an exception",
            "logger_name": "org.springframework.kafka.listener.KafkaMessageListenerContainer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Seek to current after exception; nested exception is org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:208)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2719)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2689)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t... 9 common frames omitted\nCaused by: org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\tSuppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: \nError has been observed at the following site(s):\n\t*__checkpoint ⇢ 409 from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses [DefaultWebClient]\nOriginal Stack Trace:\n\t\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\t\tat org.springframework.web.reactive.function.client.DefaultClientResponse.lambda$createException$1(DefaultClientResponse.java:207)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:106)\n\t\tat reactor.core.publisher.FluxOnErrorReturn$ReturnSubscriber.onNext(FluxOnErrorReturn.java:162)\n\t\tat reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:101)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)\n\t\tat reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)\n\t\tat reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)\n\t\tat reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1816)\n\t\tat reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:160)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat reactor.netty.channel.FluxReceive.onInboundComplete(FluxReceive.java:400)\n\t\tat reactor.netty.channel.ChannelOperations.onInboundComplete(ChannelOperations.java:419)\n\t\tat reactor.netty.channel.ChannelOperations.terminate(ChannelOperations.java:473)\n\t\tat reactor.netty.http.client.HttpClientOperations.onInboundNext(HttpClientOperations.java:702)\n\t\tat reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:113)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:336)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:308)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\n\t\tat io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe.epollInReady(AbstractEpollStreamChannel.java:800)\n\t\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\n\t\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\n\t\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\n\t\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\n\t\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n\tSuppressed: java.lang.Exception: #block terminated with an error\n\t\tat reactor.core.publisher.BlockingSingleSubscriber.blockingGet(BlockingSingleSubscriber.java:99)\n\t\tat reactor.core.publisher.Mono.block(Mono.java:1707)\n\t\tat com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl.saveAsyncResult(AsyncResponseServiceImpl.kt:17)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.produceSavingPotCreatedAsyncResult(SavingPotActiveHandler.kt:49)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:39)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:17)\n\t\tat com.arbm.digibank.accounts.common.statemachine.AccountStateMachine.transitionTo(AccountStateMachine.kt:20)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo(SavingPotService.kt:251)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo$default(SavingPotService.kt:247)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.activateSavingPot(SavingPotService.kt:117)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$FastClassBySpringCGLIB$$ece3748f.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.retry.annotation.AnnotationAwareRetryOperationsInterceptor.invoke(AnnotationAwareRetryOperationsInterceptor.java:162)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$EnhancerBySpringCGLIB$$decf1564.activateSavingPot(<generated>)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.handleSavingPotEvent(PortfolioEventProcessor.kt:90)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(PortfolioEventProcessor.kt:47)\n\t\tat jdk.internal.reflect.GeneratedMethodAccessor295.invoke(Unknown Source)\n\t\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\t\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\t\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\t\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$ba1defd9.onMessage(<generated>)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\t\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\t\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:07:58.256",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:07:58.256Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_portfolio_account_linked_events-7, groupId=deposit_portfolio_account_linked_events] Seeking to offset 82642 for partition deposit.portfolio.account.linked.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:07:54.246",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:07:54.246Z",
            "@version": "1",
            "message": "validateTransition",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "d9117ce8356f8c50",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:07:54.246",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:07:54.246Z",
            "@version": "1",
            "message": "on Exit run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "d9117ce8356f8c50",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:07:54.246",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:07:54.246Z",
            "@version": "1",
            "message": "onEnter run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "d9117ce8356f8c50",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:07:54.246",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:07:54.246Z",
            "@version": "1",
            "message": "new status",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "d9117ce8356f8c50",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:07:54.246",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:07:54.246Z",
            "@version": "1",
            "message": "Produced: {\"accountId\": \"feb64eca-f996-4d9a-b6c9-0947d797807d\"}",
            "logger_name": "com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "d9117ce8356f8c50",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:07:54.246",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:07:54.246Z",
            "@version": "1",
            "message": "Saving response under id feb64eca-f996-4d9a-b6c9-0947d797807d",
            "logger_name": "com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "d9117ce8356f8c50",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:07:54.240",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:07:54.24Z",
            "@version": "1",
            "message": "Received portfolio to saving pot linkage event: {\"portfolioId\": \"eeeda3ac-aa84-465e-b260-449bafaa3d7e\", \"accountId\": \"feb64eca-f996-4d9a-b6c9-0947d797807d\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "d9117ce8356f8c50",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:07:54.237",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:07:54.237Z",
            "@version": "1",
            "message": "Received PortfolioLinkedWithAccountEvent: {\"portfolioId\": \"eeeda3ac-aa84-465e-b260-449bafaa3d7e\", \"accountId\": \"feb64eca-f996-4d9a-b6c9-0947d797807d\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "d9117ce8356f8c50",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:07:54.236",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:07:54.236Z",
            "@version": "1",
            "message": "Error handler threw an exception",
            "logger_name": "org.springframework.kafka.listener.KafkaMessageListenerContainer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Seek to current after exception; nested exception is org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:208)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2719)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2689)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t... 9 common frames omitted\nCaused by: org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\tSuppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: \nError has been observed at the following site(s):\n\t*__checkpoint ⇢ 409 from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses [DefaultWebClient]\nOriginal Stack Trace:\n\t\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\t\tat org.springframework.web.reactive.function.client.DefaultClientResponse.lambda$createException$1(DefaultClientResponse.java:207)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:106)\n\t\tat reactor.core.publisher.FluxOnErrorReturn$ReturnSubscriber.onNext(FluxOnErrorReturn.java:162)\n\t\tat reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:101)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)\n\t\tat reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)\n\t\tat reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)\n\t\tat reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1816)\n\t\tat reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:160)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat reactor.netty.channel.FluxReceive.onInboundComplete(FluxReceive.java:400)\n\t\tat reactor.netty.channel.ChannelOperations.onInboundComplete(ChannelOperations.java:419)\n\t\tat reactor.netty.channel.ChannelOperations.terminate(ChannelOperations.java:473)\n\t\tat reactor.netty.http.client.HttpClientOperations.onInboundNext(HttpClientOperations.java:702)\n\t\tat reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:113)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:336)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:308)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\n\t\tat io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe.epollInReady(AbstractEpollStreamChannel.java:800)\n\t\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\n\t\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\n\t\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\n\t\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\n\t\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n\tSuppressed: java.lang.Exception: #block terminated with an error\n\t\tat reactor.core.publisher.BlockingSingleSubscriber.blockingGet(BlockingSingleSubscriber.java:99)\n\t\tat reactor.core.publisher.Mono.block(Mono.java:1707)\n\t\tat com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl.saveAsyncResult(AsyncResponseServiceImpl.kt:17)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.produceSavingPotCreatedAsyncResult(SavingPotActiveHandler.kt:49)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:39)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:17)\n\t\tat com.arbm.digibank.accounts.common.statemachine.AccountStateMachine.transitionTo(AccountStateMachine.kt:20)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo(SavingPotService.kt:251)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo$default(SavingPotService.kt:247)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.activateSavingPot(SavingPotService.kt:117)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$FastClassBySpringCGLIB$$ece3748f.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.retry.annotation.AnnotationAwareRetryOperationsInterceptor.invoke(AnnotationAwareRetryOperationsInterceptor.java:162)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$EnhancerBySpringCGLIB$$decf1564.activateSavingPot(<generated>)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.handleSavingPotEvent(PortfolioEventProcessor.kt:90)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(PortfolioEventProcessor.kt:47)\n\t\tat jdk.internal.reflect.GeneratedMethodAccessor295.invoke(Unknown Source)\n\t\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\t\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\t\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\t\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$ba1defd9.onMessage(<generated>)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\t\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\t\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:07:54.235",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:07:54.235Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_portfolio_account_linked_events-7, groupId=deposit_portfolio_account_linked_events] Seeking to offset 82642 for partition deposit.portfolio.account.linked.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:07:52.227",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:07:52.227Z",
            "@version": "1",
            "message": "validateTransition",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "e4415125a3662f02",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:07:52.227",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:07:52.227Z",
            "@version": "1",
            "message": "on Exit run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "e4415125a3662f02",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:07:52.227",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:07:52.227Z",
            "@version": "1",
            "message": "onEnter run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "e4415125a3662f02",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:07:52.227",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:07:52.227Z",
            "@version": "1",
            "message": "new status",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "e4415125a3662f02",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:07:52.227",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:07:52.227Z",
            "@version": "1",
            "message": "Produced: {\"accountId\": \"feb64eca-f996-4d9a-b6c9-0947d797807d\"}",
            "logger_name": "com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "e4415125a3662f02",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:07:52.227",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:07:52.227Z",
            "@version": "1",
            "message": "Saving response under id feb64eca-f996-4d9a-b6c9-0947d797807d",
            "logger_name": "com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "e4415125a3662f02",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:07:52.222",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:07:52.221Z",
            "@version": "1",
            "message": "Received portfolio to saving pot linkage event: {\"portfolioId\": \"eeeda3ac-aa84-465e-b260-449bafaa3d7e\", \"accountId\": \"feb64eca-f996-4d9a-b6c9-0947d797807d\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "e4415125a3662f02",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:07:52.219",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:07:52.218Z",
            "@version": "1",
            "message": "Received PortfolioLinkedWithAccountEvent: {\"portfolioId\": \"eeeda3ac-aa84-465e-b260-449bafaa3d7e\", \"accountId\": \"feb64eca-f996-4d9a-b6c9-0947d797807d\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "e4415125a3662f02",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:07:51.812",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:07:51.811Z",
            "@version": "1",
            "message": "Request to retrieve account by following accountNumber: 912010110273493",
            "logger_name": "com.arbm.digibank.accounts.savingaccount.controller.SavingAccountControllerV1",
            "thread_name": "http-nio-8080-exec-3",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a008d75cde0dda25536a0723e505e2",
            "spanId": "b131f94c83933f63",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:07:51.739",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:07:51.739Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_portfolio_account_linked_events-7, groupId=deposit_portfolio_account_linked_events] Seeking to offset 82642 for partition deposit.portfolio.account.linked.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:07:51.726",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:07:51.726Z",
            "@version": "1",
            "message": "validateTransition",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "c49f9dc27222fc41",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:07:51.726",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:07:51.726Z",
            "@version": "1",
            "message": "on Exit run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "c49f9dc27222fc41",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:07:51.726",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:07:51.726Z",
            "@version": "1",
            "message": "onEnter run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "c49f9dc27222fc41",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:07:51.726",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:07:51.726Z",
            "@version": "1",
            "message": "new status",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "c49f9dc27222fc41",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:07:51.726",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:07:51.726Z",
            "@version": "1",
            "message": "Produced: {\"accountId\": \"f5938635-c98a-431d-91fb-93114bdd251f\"}",
            "logger_name": "com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "c49f9dc27222fc41",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:07:51.726",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:07:51.726Z",
            "@version": "1",
            "message": "Saving response under id f5938635-c98a-431d-91fb-93114bdd251f",
            "logger_name": "com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "c49f9dc27222fc41",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:07:51.720",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:07:51.72Z",
            "@version": "1",
            "message": "Received portfolio to saving pot linkage event: {\"portfolioId\": \"23bcdb37-b50e-4186-80e3-cca38d138d32\", \"accountId\": \"f5938635-c98a-431d-91fb-93114bdd251f\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "c49f9dc27222fc41",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:07:51.717",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:07:51.717Z",
            "@version": "1",
            "message": "Received PortfolioLinkedWithAccountEvent: {\"portfolioId\": \"23bcdb37-b50e-4186-80e3-cca38d138d32\", \"accountId\": \"f5938635-c98a-431d-91fb-93114bdd251f\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "c49f9dc27222fc41",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:07:51.716",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:07:51.715Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_portfolio_account_linked_events-7, groupId=deposit_portfolio_account_linked_events] Seeking to offset 82641 for partition deposit.portfolio.account.linked.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:07:51.716",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:07:51.716Z",
            "@version": "1",
            "message": "Error handler threw an exception",
            "logger_name": "org.springframework.kafka.listener.KafkaMessageListenerContainer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Seek to current after exception; nested exception is org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:208)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2719)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2689)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t... 9 common frames omitted\nCaused by: org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\tSuppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: \nError has been observed at the following site(s):\n\t*__checkpoint ⇢ 409 from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses [DefaultWebClient]\nOriginal Stack Trace:\n\t\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\t\tat org.springframework.web.reactive.function.client.DefaultClientResponse.lambda$createException$1(DefaultClientResponse.java:207)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:106)\n\t\tat reactor.core.publisher.FluxOnErrorReturn$ReturnSubscriber.onNext(FluxOnErrorReturn.java:162)\n\t\tat reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:101)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)\n\t\tat reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)\n\t\tat reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)\n\t\tat reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1816)\n\t\tat reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:160)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat reactor.netty.channel.FluxReceive.onInboundComplete(FluxReceive.java:400)\n\t\tat reactor.netty.channel.ChannelOperations.onInboundComplete(ChannelOperations.java:419)\n\t\tat reactor.netty.channel.ChannelOperations.terminate(ChannelOperations.java:473)\n\t\tat reactor.netty.http.client.HttpClientOperations.onInboundNext(HttpClientOperations.java:702)\n\t\tat reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:113)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:336)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:308)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\n\t\tat io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe.epollInReady(AbstractEpollStreamChannel.java:800)\n\t\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\n\t\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\n\t\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\n\t\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\n\t\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n\tSuppressed: java.lang.Exception: #block terminated with an error\n\t\tat reactor.core.publisher.BlockingSingleSubscriber.blockingGet(BlockingSingleSubscriber.java:99)\n\t\tat reactor.core.publisher.Mono.block(Mono.java:1707)\n\t\tat com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl.saveAsyncResult(AsyncResponseServiceImpl.kt:17)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.produceSavingPotCreatedAsyncResult(SavingPotActiveHandler.kt:49)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:39)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:17)\n\t\tat com.arbm.digibank.accounts.common.statemachine.AccountStateMachine.transitionTo(AccountStateMachine.kt:20)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo(SavingPotService.kt:251)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo$default(SavingPotService.kt:247)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.activateSavingPot(SavingPotService.kt:117)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$FastClassBySpringCGLIB$$ece3748f.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.retry.annotation.AnnotationAwareRetryOperationsInterceptor.invoke(AnnotationAwareRetryOperationsInterceptor.java:162)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$EnhancerBySpringCGLIB$$decf1564.activateSavingPot(<generated>)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.handleSavingPotEvent(PortfolioEventProcessor.kt:90)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(PortfolioEventProcessor.kt:47)\n\t\tat jdk.internal.reflect.GeneratedMethodAccessor295.invoke(Unknown Source)\n\t\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\t\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\t\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\t\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$ba1defd9.onMessage(<generated>)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\t\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\t\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:07:47.706",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:07:47.705Z",
            "@version": "1",
            "message": "validateTransition",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "15045ae58f4e415e",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:07:47.706",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:07:47.706Z",
            "@version": "1",
            "message": "on Exit run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "15045ae58f4e415e",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:07:47.706",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:07:47.706Z",
            "@version": "1",
            "message": "onEnter run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "15045ae58f4e415e",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:07:47.706",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:07:47.706Z",
            "@version": "1",
            "message": "new status",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "15045ae58f4e415e",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:07:47.706",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:07:47.706Z",
            "@version": "1",
            "message": "Produced: {\"accountId\": \"f5938635-c98a-431d-91fb-93114bdd251f\"}",
            "logger_name": "com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "15045ae58f4e415e",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:07:47.706",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:07:47.706Z",
            "@version": "1",
            "message": "Saving response under id f5938635-c98a-431d-91fb-93114bdd251f",
            "logger_name": "com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "15045ae58f4e415e",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:07:47.700",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:07:47.7Z",
            "@version": "1",
            "message": "Received portfolio to saving pot linkage event: {\"portfolioId\": \"23bcdb37-b50e-4186-80e3-cca38d138d32\", \"accountId\": \"f5938635-c98a-431d-91fb-93114bdd251f\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "15045ae58f4e415e",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:07:47.697",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:07:47.696Z",
            "@version": "1",
            "message": "Received PortfolioLinkedWithAccountEvent: {\"portfolioId\": \"23bcdb37-b50e-4186-80e3-cca38d138d32\", \"accountId\": \"f5938635-c98a-431d-91fb-93114bdd251f\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "15045ae58f4e415e",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:07:47.696",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:07:47.695Z",
            "@version": "1",
            "message": "Error handler threw an exception",
            "logger_name": "org.springframework.kafka.listener.KafkaMessageListenerContainer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Seek to current after exception; nested exception is org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:208)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2719)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2689)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t... 9 common frames omitted\nCaused by: org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\tSuppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: \nError has been observed at the following site(s):\n\t*__checkpoint ⇢ 409 from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses [DefaultWebClient]\nOriginal Stack Trace:\n\t\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\t\tat org.springframework.web.reactive.function.client.DefaultClientResponse.lambda$createException$1(DefaultClientResponse.java:207)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:106)\n\t\tat reactor.core.publisher.FluxOnErrorReturn$ReturnSubscriber.onNext(FluxOnErrorReturn.java:162)\n\t\tat reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:101)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)\n\t\tat reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)\n\t\tat reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)\n\t\tat reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1816)\n\t\tat reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:160)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat reactor.netty.channel.FluxReceive.onInboundComplete(FluxReceive.java:400)\n\t\tat reactor.netty.channel.ChannelOperations.onInboundComplete(ChannelOperations.java:419)\n\t\tat reactor.netty.channel.ChannelOperations.terminate(ChannelOperations.java:473)\n\t\tat reactor.netty.http.client.HttpClientOperations.onInboundNext(HttpClientOperations.java:702)\n\t\tat reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:113)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:336)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:308)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\n\t\tat io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe.epollInReady(AbstractEpollStreamChannel.java:800)\n\t\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\n\t\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\n\t\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\n\t\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\n\t\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n\tSuppressed: java.lang.Exception: #block terminated with an error\n\t\tat reactor.core.publisher.BlockingSingleSubscriber.blockingGet(BlockingSingleSubscriber.java:99)\n\t\tat reactor.core.publisher.Mono.block(Mono.java:1707)\n\t\tat com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl.saveAsyncResult(AsyncResponseServiceImpl.kt:17)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.produceSavingPotCreatedAsyncResult(SavingPotActiveHandler.kt:49)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:39)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:17)\n\t\tat com.arbm.digibank.accounts.common.statemachine.AccountStateMachine.transitionTo(AccountStateMachine.kt:20)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo(SavingPotService.kt:251)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo$default(SavingPotService.kt:247)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.activateSavingPot(SavingPotService.kt:117)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$FastClassBySpringCGLIB$$ece3748f.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.retry.annotation.AnnotationAwareRetryOperationsInterceptor.invoke(AnnotationAwareRetryOperationsInterceptor.java:162)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$EnhancerBySpringCGLIB$$decf1564.activateSavingPot(<generated>)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.handleSavingPotEvent(PortfolioEventProcessor.kt:90)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(PortfolioEventProcessor.kt:47)\n\t\tat jdk.internal.reflect.GeneratedMethodAccessor295.invoke(Unknown Source)\n\t\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\t\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\t\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\t\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$ba1defd9.onMessage(<generated>)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\t\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\t\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:07:47.695",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:07:47.695Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_portfolio_account_linked_events-7, groupId=deposit_portfolio_account_linked_events] Seeking to offset 82641 for partition deposit.portfolio.account.linked.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:07:45.687",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:07:45.687Z",
            "@version": "1",
            "message": "validateTransition",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "4241e2ed36205181",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:07:45.687",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:07:45.687Z",
            "@version": "1",
            "message": "on Exit run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "4241e2ed36205181",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:07:45.687",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:07:45.687Z",
            "@version": "1",
            "message": "onEnter run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "4241e2ed36205181",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:07:45.687",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:07:45.687Z",
            "@version": "1",
            "message": "new status",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "4241e2ed36205181",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:07:45.687",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:07:45.687Z",
            "@version": "1",
            "message": "Produced: {\"accountId\": \"f5938635-c98a-431d-91fb-93114bdd251f\"}",
            "logger_name": "com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "4241e2ed36205181",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:07:45.687",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:07:45.687Z",
            "@version": "1",
            "message": "Saving response under id f5938635-c98a-431d-91fb-93114bdd251f",
            "logger_name": "com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "4241e2ed36205181",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:07:45.682",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:07:45.682Z",
            "@version": "1",
            "message": "Received portfolio to saving pot linkage event: {\"portfolioId\": \"23bcdb37-b50e-4186-80e3-cca38d138d32\", \"accountId\": \"f5938635-c98a-431d-91fb-93114bdd251f\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "4241e2ed36205181",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:07:45.679",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:07:45.678Z",
            "@version": "1",
            "message": "Received PortfolioLinkedWithAccountEvent: {\"portfolioId\": \"23bcdb37-b50e-4186-80e3-cca38d138d32\", \"accountId\": \"f5938635-c98a-431d-91fb-93114bdd251f\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "4241e2ed36205181",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:07:45.198",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:07:45.198Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_portfolio_account_linked_events-7, groupId=deposit_portfolio_account_linked_events] Seeking to offset 82641 for partition deposit.portfolio.account.linked.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:07:45.186",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:07:45.186Z",
            "@version": "1",
            "message": "validateTransition",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "f80a32629f72bb57",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:07:45.186",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:07:45.186Z",
            "@version": "1",
            "message": "on Exit run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "f80a32629f72bb57",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:07:45.186",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:07:45.186Z",
            "@version": "1",
            "message": "onEnter run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "f80a32629f72bb57",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:07:45.186",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:07:45.186Z",
            "@version": "1",
            "message": "new status",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "f80a32629f72bb57",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:07:45.186",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:07:45.186Z",
            "@version": "1",
            "message": "Produced: {\"accountId\": \"a1cf7616-708e-4484-a5cd-fb78b9278d5f\"}",
            "logger_name": "com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "f80a32629f72bb57",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:07:45.186",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:07:45.186Z",
            "@version": "1",
            "message": "Saving response under id a1cf7616-708e-4484-a5cd-fb78b9278d5f",
            "logger_name": "com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "f80a32629f72bb57",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:07:45.181",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:07:45.181Z",
            "@version": "1",
            "message": "Received portfolio to saving pot linkage event: {\"portfolioId\": \"23bcdb37-b50e-4186-80e3-cca38d138d32\", \"accountId\": \"a1cf7616-708e-4484-a5cd-fb78b9278d5f\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "f80a32629f72bb57",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:07:45.177",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:07:45.177Z",
            "@version": "1",
            "message": "Received PortfolioLinkedWithAccountEvent: {\"portfolioId\": \"23bcdb37-b50e-4186-80e3-cca38d138d32\", \"accountId\": \"a1cf7616-708e-4484-a5cd-fb78b9278d5f\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "f80a32629f72bb57",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:07:45.176",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:07:45.175Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_portfolio_account_linked_events-7, groupId=deposit_portfolio_account_linked_events] Seeking to offset 82640 for partition deposit.portfolio.account.linked.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:07:45.176",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:07:45.176Z",
            "@version": "1",
            "message": "Error handler threw an exception",
            "logger_name": "org.springframework.kafka.listener.KafkaMessageListenerContainer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Seek to current after exception; nested exception is org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:208)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2719)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2689)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t... 9 common frames omitted\nCaused by: org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\tSuppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: \nError has been observed at the following site(s):\n\t*__checkpoint ⇢ 409 from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses [DefaultWebClient]\nOriginal Stack Trace:\n\t\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\t\tat org.springframework.web.reactive.function.client.DefaultClientResponse.lambda$createException$1(DefaultClientResponse.java:207)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:106)\n\t\tat reactor.core.publisher.FluxOnErrorReturn$ReturnSubscriber.onNext(FluxOnErrorReturn.java:162)\n\t\tat reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:101)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)\n\t\tat reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)\n\t\tat reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)\n\t\tat reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1816)\n\t\tat reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:160)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat reactor.netty.channel.FluxReceive.onInboundComplete(FluxReceive.java:400)\n\t\tat reactor.netty.channel.ChannelOperations.onInboundComplete(ChannelOperations.java:419)\n\t\tat reactor.netty.channel.ChannelOperations.terminate(ChannelOperations.java:473)\n\t\tat reactor.netty.http.client.HttpClientOperations.onInboundNext(HttpClientOperations.java:702)\n\t\tat reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:113)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:336)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:308)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\n\t\tat io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe.epollInReady(AbstractEpollStreamChannel.java:800)\n\t\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\n\t\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\n\t\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\n\t\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\n\t\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n\tSuppressed: java.lang.Exception: #block terminated with an error\n\t\tat reactor.core.publisher.BlockingSingleSubscriber.blockingGet(BlockingSingleSubscriber.java:99)\n\t\tat reactor.core.publisher.Mono.block(Mono.java:1707)\n\t\tat com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl.saveAsyncResult(AsyncResponseServiceImpl.kt:17)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.produceSavingPotCreatedAsyncResult(SavingPotActiveHandler.kt:49)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:39)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:17)\n\t\tat com.arbm.digibank.accounts.common.statemachine.AccountStateMachine.transitionTo(AccountStateMachine.kt:20)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo(SavingPotService.kt:251)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo$default(SavingPotService.kt:247)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.activateSavingPot(SavingPotService.kt:117)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$FastClassBySpringCGLIB$$ece3748f.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.retry.annotation.AnnotationAwareRetryOperationsInterceptor.invoke(AnnotationAwareRetryOperationsInterceptor.java:162)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$EnhancerBySpringCGLIB$$decf1564.activateSavingPot(<generated>)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.handleSavingPotEvent(PortfolioEventProcessor.kt:90)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(PortfolioEventProcessor.kt:47)\n\t\tat jdk.internal.reflect.GeneratedMethodAccessor295.invoke(Unknown Source)\n\t\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\t\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\t\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\t\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$ba1defd9.onMessage(<generated>)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\t\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\t\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:07:41.166",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:07:41.166Z",
            "@version": "1",
            "message": "validateTransition",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "5115ef825e764355",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:07:41.166",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:07:41.166Z",
            "@version": "1",
            "message": "on Exit run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "5115ef825e764355",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:07:41.166",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:07:41.166Z",
            "@version": "1",
            "message": "onEnter run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "5115ef825e764355",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:07:41.166",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:07:41.166Z",
            "@version": "1",
            "message": "new status",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "5115ef825e764355",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:07:41.166",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:07:41.166Z",
            "@version": "1",
            "message": "Produced: {\"accountId\": \"a1cf7616-708e-4484-a5cd-fb78b9278d5f\"}",
            "logger_name": "com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "5115ef825e764355",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:07:41.166",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:07:41.166Z",
            "@version": "1",
            "message": "Saving response under id a1cf7616-708e-4484-a5cd-fb78b9278d5f",
            "logger_name": "com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "5115ef825e764355",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:07:41.160",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:07:41.16Z",
            "@version": "1",
            "message": "Received portfolio to saving pot linkage event: {\"portfolioId\": \"23bcdb37-b50e-4186-80e3-cca38d138d32\", \"accountId\": \"a1cf7616-708e-4484-a5cd-fb78b9278d5f\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "5115ef825e764355",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:07:41.157",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:07:41.157Z",
            "@version": "1",
            "message": "Received PortfolioLinkedWithAccountEvent: {\"portfolioId\": \"23bcdb37-b50e-4186-80e3-cca38d138d32\", \"accountId\": \"a1cf7616-708e-4484-a5cd-fb78b9278d5f\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "5115ef825e764355",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:07:41.156",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:07:41.155Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_portfolio_account_linked_events-7, groupId=deposit_portfolio_account_linked_events] Seeking to offset 82640 for partition deposit.portfolio.account.linked.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:07:41.156",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:07:41.156Z",
            "@version": "1",
            "message": "Error handler threw an exception",
            "logger_name": "org.springframework.kafka.listener.KafkaMessageListenerContainer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Seek to current after exception; nested exception is org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:208)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2719)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2689)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t... 9 common frames omitted\nCaused by: org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\tSuppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: \nError has been observed at the following site(s):\n\t*__checkpoint ⇢ 409 from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses [DefaultWebClient]\nOriginal Stack Trace:\n\t\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\t\tat org.springframework.web.reactive.function.client.DefaultClientResponse.lambda$createException$1(DefaultClientResponse.java:207)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:106)\n\t\tat reactor.core.publisher.FluxOnErrorReturn$ReturnSubscriber.onNext(FluxOnErrorReturn.java:162)\n\t\tat reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:101)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)\n\t\tat reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)\n\t\tat reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)\n\t\tat reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1816)\n\t\tat reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:160)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat reactor.netty.channel.FluxReceive.onInboundComplete(FluxReceive.java:400)\n\t\tat reactor.netty.channel.ChannelOperations.onInboundComplete(ChannelOperations.java:419)\n\t\tat reactor.netty.channel.ChannelOperations.terminate(ChannelOperations.java:473)\n\t\tat reactor.netty.http.client.HttpClientOperations.onInboundNext(HttpClientOperations.java:702)\n\t\tat reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:113)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:336)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:308)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\n\t\tat io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe.epollInReady(AbstractEpollStreamChannel.java:800)\n\t\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\n\t\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\n\t\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\n\t\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\n\t\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n\tSuppressed: java.lang.Exception: #block terminated with an error\n\t\tat reactor.core.publisher.BlockingSingleSubscriber.blockingGet(BlockingSingleSubscriber.java:99)\n\t\tat reactor.core.publisher.Mono.block(Mono.java:1707)\n\t\tat com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl.saveAsyncResult(AsyncResponseServiceImpl.kt:17)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.produceSavingPotCreatedAsyncResult(SavingPotActiveHandler.kt:49)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:39)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:17)\n\t\tat com.arbm.digibank.accounts.common.statemachine.AccountStateMachine.transitionTo(AccountStateMachine.kt:20)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo(SavingPotService.kt:251)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo$default(SavingPotService.kt:247)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.activateSavingPot(SavingPotService.kt:117)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$FastClassBySpringCGLIB$$ece3748f.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.retry.annotation.AnnotationAwareRetryOperationsInterceptor.invoke(AnnotationAwareRetryOperationsInterceptor.java:162)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$EnhancerBySpringCGLIB$$decf1564.activateSavingPot(<generated>)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.handleSavingPotEvent(PortfolioEventProcessor.kt:90)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(PortfolioEventProcessor.kt:47)\n\t\tat jdk.internal.reflect.GeneratedMethodAccessor295.invoke(Unknown Source)\n\t\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\t\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\t\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\t\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$ba1defd9.onMessage(<generated>)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\t\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\t\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:07:39.717",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:07:39.717Z",
            "@version": "1",
            "message": "Event doesn't inform about cleared saving pot or cleared saving account: {\"eventId\": \"a78a0629-17d1-4eca-9fcb-267e5b2ab45e_69a07a8a-ee8e-4ca8-aa47-d1f986139c6c\", \"valueTimestamp\": \"2025-02-03T00:07:39.289Z\", \"accountId\": \"a78a0629-17d1-4eca-9fcb-267e5b2ab45e\", \"customerId\": \"487359\", \"availableBalance\": 135705.79, \"settledBalance\": 135705.79}",
            "logger_name": "com.arbm.digibank.offboarding.service.OffboardingService",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#10-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a008cb8e9ca5d6a18e06d8f4482593",
            "spanId": "51a19b1840beec10",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:07:39.716",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:07:39.715Z",
            "@version": "1",
            "message": "Consume DepositBalanceEvent: {\"eventId\": \"a78a0629-17d1-4eca-9fcb-267e5b2ab45e_69a07a8a-ee8e-4ca8-aa47-d1f986139c6c\", \"valueTimestamp\": \"2025-02-03T00:07:39.289Z\", \"accountId\": \"a78a0629-17d1-4eca-9fcb-267e5b2ab45e\", \"customerId\": \"487359\", \"availableBalance\": 135705.79, \"settledBalance\": 135705.79}",
            "logger_name": "com.arbm.digibank.offboarding.OffboardingProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#10-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a008cb8e9ca5d6a18e06d8f4482593",
            "spanId": "51a19b1840beec10",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:07:39.147",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:07:39.147Z",
            "@version": "1",
            "message": "on Exit run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "e1bdfa1388372f94",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:07:39.147",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:07:39.147Z",
            "@version": "1",
            "message": "validateTransition",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "e1bdfa1388372f94",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:07:39.147",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:07:39.147Z",
            "@version": "1",
            "message": "onEnter run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "e1bdfa1388372f94",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:07:39.147",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:07:39.147Z",
            "@version": "1",
            "message": "new status",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "e1bdfa1388372f94",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:07:39.147",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:07:39.147Z",
            "@version": "1",
            "message": "Produced: {\"accountId\": \"a1cf7616-708e-4484-a5cd-fb78b9278d5f\"}",
            "logger_name": "com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "e1bdfa1388372f94",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:07:39.147",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:07:39.147Z",
            "@version": "1",
            "message": "Saving response under id a1cf7616-708e-4484-a5cd-fb78b9278d5f",
            "logger_name": "com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "e1bdfa1388372f94",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:07:39.142",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:07:39.142Z",
            "@version": "1",
            "message": "Received portfolio to saving pot linkage event: {\"portfolioId\": \"23bcdb37-b50e-4186-80e3-cca38d138d32\", \"accountId\": \"a1cf7616-708e-4484-a5cd-fb78b9278d5f\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "e1bdfa1388372f94",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:07:39.140",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:07:39.139Z",
            "@version": "1",
            "message": "Received PortfolioLinkedWithAccountEvent: {\"portfolioId\": \"23bcdb37-b50e-4186-80e3-cca38d138d32\", \"accountId\": \"a1cf7616-708e-4484-a5cd-fb78b9278d5f\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "e1bdfa1388372f94",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:07:38.813",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:07:38.813Z",
            "@version": "1",
            "message": "Request to retrieve account by following accountNumber: 912010110005044",
            "logger_name": "com.arbm.digibank.accounts.savingaccount.controller.SavingAccountControllerV1",
            "thread_name": "http-nio-8080-exec-5",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a008ca2fd62355a34452c3791c48ce",
            "spanId": "a34452c3791c48ce",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:07:38.674",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:07:38.674Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_portfolio_account_linked_events-7, groupId=deposit_portfolio_account_linked_events] Seeking to offset 82640 for partition deposit.portfolio.account.linked.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:07:38.661",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:07:38.661Z",
            "@version": "1",
            "message": "new status",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "0fadc9b10dac133b",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:07:38.661",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:07:38.661Z",
            "@version": "1",
            "message": "onEnter run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "0fadc9b10dac133b",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:07:38.661",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:07:38.661Z",
            "@version": "1",
            "message": "on Exit run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "0fadc9b10dac133b",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:07:38.661",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:07:38.661Z",
            "@version": "1",
            "message": "validateTransition",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "0fadc9b10dac133b",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:07:38.661",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:07:38.661Z",
            "@version": "1",
            "message": "Produced: {\"accountId\": \"0d7cb982-1617-45ff-bf52-c4d4de435f5a\"}",
            "logger_name": "com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "0fadc9b10dac133b",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:07:38.661",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:07:38.661Z",
            "@version": "1",
            "message": "Saving response under id 0d7cb982-1617-45ff-bf52-c4d4de435f5a",
            "logger_name": "com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "0fadc9b10dac133b",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:07:38.642",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:07:38.642Z",
            "@version": "1",
            "message": "Received portfolio to saving pot linkage event: {\"portfolioId\": \"23bcdb37-b50e-4186-80e3-cca38d138d32\", \"accountId\": \"0d7cb982-1617-45ff-bf52-c4d4de435f5a\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "0fadc9b10dac133b",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:07:38.638",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:07:38.638Z",
            "@version": "1",
            "message": "Received PortfolioLinkedWithAccountEvent: {\"portfolioId\": \"23bcdb37-b50e-4186-80e3-cca38d138d32\", \"accountId\": \"0d7cb982-1617-45ff-bf52-c4d4de435f5a\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "0fadc9b10dac133b",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:07:38.637",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:07:38.637Z",
            "@version": "1",
            "message": "Error handler threw an exception",
            "logger_name": "org.springframework.kafka.listener.KafkaMessageListenerContainer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "ERROR",
            "level_value": 40000,
            "stack_trace": "org.springframework.kafka.KafkaException: Seek to current after exception; nested exception is org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:208)\n\tat org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2706)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2587)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:829)\nCaused by: org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(com.arbm.digibank.producer.generated.avro.model.PortfolioLinkedWithAccountEvent)' threw exception; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses; nested exception is org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2719)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2689)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t... 9 common frames omitted\nCaused by: org.springframework.web.reactive.function.client.WebClientResponseException$Conflict: 409 Conflict from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses\n\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\tSuppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: \nError has been observed at the following site(s):\n\t*__checkpoint ⇢ 409 from POST http://async-response-service.async-response-service.svc.cluster.local:8080/async-response-service/v1/responses [DefaultWebClient]\nOriginal Stack Trace:\n\t\tat org.springframework.web.reactive.function.client.WebClientResponseException.create(WebClientResponseException.java:229)\n\t\tat org.springframework.web.reactive.function.client.DefaultClientResponse.lambda$createException$1(DefaultClientResponse.java:207)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:106)\n\t\tat reactor.core.publisher.FluxOnErrorReturn$ReturnSubscriber.onNext(FluxOnErrorReturn.java:162)\n\t\tat reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber.onNext(FluxDefaultIfEmpty.java:101)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:129)\n\t\tat reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107)\n\t\tat reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299)\n\t\tat reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337)\n\t\tat reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1816)\n\t\tat reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:160)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)\n\t\tat org.springframework.cloud.sleuth.instrument.reactor.ScopePassingSpanSubscriber.onComplete(ScopePassingSpanSubscriber.java:103)\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144)\n\t\tat reactor.netty.channel.FluxReceive.onInboundComplete(FluxReceive.java:400)\n\t\tat reactor.netty.channel.ChannelOperations.onInboundComplete(ChannelOperations.java:419)\n\t\tat reactor.netty.channel.ChannelOperations.terminate(ChannelOperations.java:473)\n\t\tat reactor.netty.http.client.HttpClientOperations.onInboundNext(HttpClientOperations.java:702)\n\t\tat reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:113)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:336)\n\t\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:308)\n\t\tat io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\t\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\n\t\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\t\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\n\t\tat io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe.epollInReady(AbstractEpollStreamChannel.java:800)\n\t\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:499)\n\t\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:397)\n\t\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\n\t\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\n\t\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n\tSuppressed: java.lang.Exception: #block terminated with an error\n\t\tat reactor.core.publisher.BlockingSingleSubscriber.blockingGet(BlockingSingleSubscriber.java:99)\n\t\tat reactor.core.publisher.Mono.block(Mono.java:1707)\n\t\tat com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl.saveAsyncResult(AsyncResponseServiceImpl.kt:17)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.produceSavingPotCreatedAsyncResult(SavingPotActiveHandler.kt:49)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:39)\n\t\tat com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler.afterStatusChange(SavingPotActiveHandler.kt:17)\n\t\tat com.arbm.digibank.accounts.common.statemachine.AccountStateMachine.transitionTo(AccountStateMachine.kt:20)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo(SavingPotService.kt:251)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.transitionTo$default(SavingPotService.kt:247)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService.activateSavingPot(SavingPotService.kt:117)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$FastClassBySpringCGLIB$$ece3748f.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.retry.annotation.AnnotationAwareRetryOperationsInterceptor.invoke(AnnotationAwareRetryOperationsInterceptor.java:162)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat com.arbm.digibank.accounts.savingpot.SavingPotService$$EnhancerBySpringCGLIB$$decf1564.activateSavingPot(<generated>)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.handleSavingPotEvent(PortfolioEventProcessor.kt:90)\n\t\tat com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor.consumeEvent(PortfolioEventProcessor.kt:47)\n\t\tat jdk.internal.reflect.GeneratedMethodAccessor295.invoke(Unknown Source)\n\t\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\t\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)\n\t\tat org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)\n\t\tat org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)\n\t\tat org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)\n\t\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:793)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)\n\t\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\t\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:763)\n\t\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:708)\n\t\tat org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$ba1defd9.onMessage(<generated>)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2669)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2649)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2576)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2456)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2334)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2005)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)\n\t\tat org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)\n\t\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n\t\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\t\tat java.base/java.lang.Thread.run(Thread.java:829)\n",
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:07:38.637",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:07:38.636Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_portfolio_account_linked_events-7, groupId=deposit_portfolio_account_linked_events] Seeking to offset 82639 for partition deposit.portfolio.account.linked.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:07:34.662",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:07:34.613Z",
            "@version": "1",
            "message": "[Consumer clientId=consumer-deposit_portfolio_account_linked_events-7, groupId=deposit_portfolio_account_linked_events] Seeking to offset 82639 for partition deposit.portfolio.account.linked.v1-0",
            "logger_name": "org.apache.kafka.clients.consumer.KafkaConsumer",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:07:34.662",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:07:34.624Z",
            "@version": "1",
            "message": "validateTransition",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "0fa80d9e2ae1e672",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:07:34.662",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:07:34.618Z",
            "@version": "1",
            "message": "Received portfolio to saving pot linkage event: {\"portfolioId\": \"23bcdb37-b50e-4186-80e3-cca38d138d32\", \"accountId\": \"0d7cb982-1617-45ff-bf52-c4d4de435f5a\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "0fa80d9e2ae1e672",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:07:34.662",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:07:34.615Z",
            "@version": "1",
            "message": "Received PortfolioLinkedWithAccountEvent: {\"portfolioId\": \"23bcdb37-b50e-4186-80e3-cca38d138d32\", \"accountId\": \"0d7cb982-1617-45ff-bf52-c4d4de435f5a\"}",
            "logger_name": "com.arbm.digibank.externalservices.portfolio.processor.PortfolioEventProcessor",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "0fa80d9e2ae1e672",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:07:34.662",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:07:34.624Z",
            "@version": "1",
            "message": "on Exit run",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "0fa80d9e2ae1e672",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:07:34.662",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:07:34.624Z",
            "@version": "1",
            "message": "Saving response under id 0d7cb982-1617-45ff-bf52-c4d4de435f5a",
            "logger_name": "com.arbm.digibank.externalservices.asyncresponse.service.AsyncResponseServiceImpl",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "0fa80d9e2ae1e672",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:07:34.662",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:07:34.624Z",
            "@version": "1",
            "message": "Produced: {\"accountId\": \"0d7cb982-1617-45ff-bf52-c4d4de435f5a\"}",
            "logger_name": "com.arbm.digibank.accounts.savingpot.statemachine.handler.SavingPotActiveHandler",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "spanId": "0fa80d9e2ae1e672",
            "bc": "deposits"
        }
    },
    {
        "@timestamp": "2025-02-03 00:07:34.662",
        "kubernetes.container_name": "deposit-account-service",
        "logBody": {
            "@timestamp": "2025-02-03T00:07:34.624Z",
            "@version": "1",
            "message": "new status",
            "logger_name": "com.arbm.digibank.accounts.common.statemachine.AccountStateMachine",
            "thread_name": "org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1",
            "level": "INFO",
            "level_value": 20000,
            "springAppName": "deposit-account-service",
            "traceId": "67a005c6d165445fbf36c010fe14f802",
            "spanId": "0fa80d9e2ae1e672",
            "bc": "deposits"
        }
    }
]